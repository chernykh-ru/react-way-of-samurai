{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/News/News.module.css","components/Music/Music.module.css","components/Setings/Setings.module.css","components/Login/Login.module.css","api/profile-api.ts","redux/profile-reducer.ts","assets/images/avataaars.svg","assets/images/avataaars.png","redux/dialog-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","pages/Sandbox/Sandbox.module.css","api/api.ts","components/News/News.tsx","components/Music/Music.tsx","components/Setings/Setings.tsx","pages/Sandbox/Judge.tsx","pages/Sandbox/GithubProfile.tsx","pages/Sandbox/Github.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","components/Header/Header.tsx","redux/app-reducer.ts","hoc/withSuspense.tsx","App.tsx","reportWebVitals.js","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Users/Users.module.css","assets/images/preloader.svg","components/common/preloader/Preloader.tsx"],"names":["module","exports","FormControl","input","meta","children","hasError","touched","error","className","styles","formControl","Textarea","props","restProps","Input","required","value","maxLengthCreator","maxLength","length","profileAPI","userId","instance","get","response","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likeCounter","newPostText","actions","addPostActionCreator","type","setUserProfile","setStatus","savePhotoSuccess","photos","deletePost","postId","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodeEnum","Success","console","log","savePhoto","saveProfile","getState","auth","messages","stopSubmit","_error","Promise","reject","profileReducer","state","action","filter","p","dialogs","name","addMessage","dialogsReducer","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","map","m","uuidv4","index","array","ResultCodeForCaptchaEnam","axios","create","withCredentials","baseURL","News","wrapper","wrapper__item","Music","Setings","Judge","Title","Typography","useState","c1","c2","countsGamer","setCountsGamer","level","justify","span","onClick","offset","Link","GithubTimer","seconds","onChange","timerKey","timer","setTimer","useEffect","intervalId","setInterval","clearInterval","percent","format","GithubProfile","selectedUser","selectedUserDetails","setSelectedUsersDetails","setSeconds","login","then","res","href","html_url","src","avatar_url","size","sm","md","lg","xl","xxl","followers","GithubSearch","onSubmit","tempSearch","setTempSearch","placeholder","target","GithubUsersList","termSearch","onUserSelect","users","setUsers","items","u","selected","Github","setSelectedUser","setTermSearch","document","title","Paginator","totalItemsCount","pageSize","onPageChanged","x","currentPage","portionSize","pagesCount","Math","ceil","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","paginationBlockWrapper","paginationBlock","buttonPrev","disabled","page","event","pagination","selectedPage","buttonNext","User","followingInProgress","follow","unfollow","user","to","userPhoto","small","avataaars","alt","userButton","followed","some","getUsers","createSelector","usersPage","getPageSize","getCurrentPage","getUsersFilter","getIsFetching","isFetching","getFollowingInProgress","usersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","setSubmitting","isSubmitting","as","usersAPI","post","delete","updateObjectInArray","itemId","objPropName","newObjProps","totalUsersCount","requestUsers","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","useDispatch","history","useHistory","location","useLocation","pathname","search","parsed","URLSearchParams","parsedPage","parsedTerm","parsedFriend","actualPage","actualFilter","Number","_follow","bind","_unfollow","UsersPage","pageTitle","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","isAuth","captchaUrl","getAuthUserData","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","loginFormWrapper","Field","component","formSummaryError","LoginPage","stylesLogin","loginH1","CaptchaIsRequired","loginblock","Header","profilePage","Layout","theme","mode","defaultSelectedKeys","Item","icon","style","width","initialized","appReducer","WrappedComponent","SubMenu","Menu","Content","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","Suspense","fallback","App","catchAllUnhandledErrors","this","initializeApp","window","defaultOpenKeys","height","borderRight","UserOutlined","MessageOutlined","NotificationOutlined","CodeSandboxOutlined","padding","margin","minHeight","path","exact","textAlign","Component","compose","withRouter","connect","app","promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","dialogsPage","sidebar","formReducer","chat","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById","preloader"],"mappings":"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","file":"static/js/main.89f7e154.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlockWrapper\":\"Paginator_paginationBlockWrapper__35ZIW\",\"paginationBlock\":\"Paginator_paginationBlock__3Lv8U\",\"pagination\":\"Paginator_pagination__1RdNg\",\"selectedPage\":\"Paginator_selectedPage__2m9br\",\"buttonPrev\":\"Paginator_buttonPrev__1vSfq\",\"buttonNext\":\"Paginator_buttonNext__22tii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormWrapper\":\"FormsControls_loginFormWrapper__QJkSz\",\"formControl\":\"FormsControls_formControl__ZczVY\",\"error\":\"FormsControls_error__-uRCD\",\"formSummaryError\":\"FormsControls_formSummaryError__2HC3s\"};","import { WrappedFieldProps, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\r\nimport styles from './FormsControls.module.css';\r\n\r\ntype FormControlPropsType = {\r\n  input: WrappedFieldInputProps\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ input, meta, children, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"News_wrapper__3YHyz\",\"wrapper__item\":\"News_wrapper__item__1eIyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Music_wrapper___hSbD\",\"wrapper__item\":\"Music_wrapper__item__267UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Setings_wrapper__uTzoH\",\"wrapper__item\":\"Setings_wrapper__item__1F9W6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginH1\":\"Login_loginH1__21Npf\",\"loginblock\":\"Login_loginblock__34CEy\"};","// import axios from 'axios';\r\nimport { ProfileType, PhotosType } from '../types/types'\r\nimport { instance, BasicResponseType } from './api'\r\n\r\ntype SavePhotoResponseType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile(userId: number | null) {\r\n    const response = await instance.get<ProfileType>(`profile/${userId}`);\r\n    return response.data;\r\n  },\r\n  async getStatus(userId: number | null) {\r\n    const response = await instance.get<string>(`profile/status/${userId}`);\r\n    return response.data;\r\n  },\r\n  async updateStatus(status: string) {\r\n    const response = await instance.put<BasicResponseType>(`profile/status`, { status: status }); //вторым параметром передаем объект json\r\n    return response.data;\r\n  },\r\n  async savePhoto(photoFile: File) {\r\n    const formData = new FormData(); //Конструктор FormData() создаёт новые объект FormData, если проще - HTML-форму//https://developer.mozilla.org/ru/docs/Web/API/FormData/FormData\r\n    formData.append('image', photoFile); //формируем formData по spec API\r\n    const response = await instance.put<BasicResponseType<SavePhotoResponseType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    }); //вторым параметром передаем formData, а третьим объект со спец заголовками(необязательно, его формирует форма)\r\n    return response.data;\r\n  },\r\n  async saveProfile(profile: ProfileType) {\r\n    const response = await instance.put<BasicResponseType>(`profile`, profile); //вторым параметром передаем объект json из redux-form\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// type ProfileAPIResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// } BasicResponseType\r\n\r\n// type SavePhotoResponseType = {\r\n//   data: {\r\n//     photos: PhotosType\r\n//   }\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n// }\r\n","import { ResultCodeEnum } from '../api/api';\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport {PostType, PhotosType, ProfileType} from '../types/types'\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\n// const ADD_POST = 'RWOS/PROFILE/ADD-POST'; //add redux-ducks\r\n// const SET_USERS_PROFILE = 'RWOS/PROFILE/SET_USERS_PROFILE';\r\n// const SET_STATUS = 'RWOS/PROFILE/SET_STATUS';\r\n// const SAVE_PHOTO_SUCCESS = 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS';\r\n// const DELETE_POST = 'RWOS/PROFILE/DELETE_POST';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likeCounter: 15 },\r\n    { id: 2, message: 'My first react post', likeCounter: 25 },\r\n    { id: 3, message: 'Yo', likeCounter: 5 },\r\n  ] as Array<PostType>,\r\n  newPostText: '' as string | null,\r\n  profile: null as unknown as ProfileType,\r\n  status: '' as string,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/PROFILE/ADD-POST':\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, { id: 4, message: action.newPostText, likeCounter: 0 }], //добавляем новый элемент в массив\r\n      };\r\n    case 'RWOS/PROFILE/DELETE_POST':\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId), //jest test\r\n      };\r\n    case 'RWOS/PROFILE/SET_USERS_PROFILE':\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case 'RWOS/PROFILE/SET_STATUS':\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    case 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS':\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string | null) => ({ type: 'RWOS/PROFILE/ADD-POST', newPostText } as const),\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'RWOS/PROFILE/SET_USERS_PROFILE', profile } as const),  \r\n  setStatus: (status: string) => ({ type: 'RWOS/PROFILE/SET_STATUS', status } as const),  \r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS', photos } as const),  \r\n  deletePost: (postId: number | null) => ({ type: 'RWOS/PROFILE/DELETE_POST', postId } as const), //jest test  \r\n}\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n// type ThunkType = BasicThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>//расширяем типами экшенов для redux-form\r\ntype ThunkType = BasicThunkType<ActionsTypes | FormAction>//расширяем типами экшенов для redux-form\r\n\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(data));\r\n}; //convert to async/await\r\n\r\n// export const getUserProfile = (userId) => {\r\n//   return (dispatch) => {\r\n//     usersAPI.getProfile(userId).then((data) => {\r\n//       dispatch(setUserProfile(data));\r\n//     });\r\n//   };\r\n// }; //with then\r\n\r\nexport const getStatus = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(data));\r\n}; //convert to async/await\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n      dispatch(actions.setStatus(status)); //после подверждения сервера сетаем себе статус\r\n    }\r\n  } catch (error) {\r\n    console.log('updateStatus error');\r\n  }\r\n}; //test try catch\r\n\r\nexport const savePhoto = (photoFile: File): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(photoFile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n    // dispatch(savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n  }\r\n};\r\n\r\n//TC отправка и получение данных профиля\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId; //в санку помимо диспача приходит стейт целиком, берем getState() и достаем из ветки auth нужный userId\r\n  // console.log(userId);\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getUserProfile(userId)); //диспачим id для получения новых данных с сервера после редатирования профиля\r\n  } else {\r\n    //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('edit-profile', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n    return Promise.reject(message); //решение с отображением ошибки формы\r\n  }\r\n};//Fix dispatch: any dispatch(stopSubmit('edit-profile', { _error: message }))\r\n\r\nexport default profileReducer;\r\n","export default __webpack_public_path__ + \"static/media/avataaars.68dca8f1.svg\";","export default __webpack_public_path__ + \"static/media/avataaars.4186f5f3.png\";","import { InferActionsTypes } from './redux-store';\r\nimport { DialogsType, MessagesType } from '../types/types'\r\n\r\n// export type DialogsType = {\r\n//   id: number | null,\r\n//   name: string | null\r\n// }\r\n// export type MessagesType = {\r\n//   id: number | null,\r\n//   message: string | null\r\n// }\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    {\r\n      id: 1,\r\n      name: 'Andrew',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Dmitry',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Petya',\r\n    },\r\n    { id: 4, name: 'Sasha' },\r\n    { id: 5, name: 'Valera' },\r\n    { id: 6, name: 'Viktor' },\r\n  ] as DialogsType[],\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it?' },\r\n    { id: 3, message: 'I am fine' },\r\n  ] as MessagesType[],\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/DIALOG/ADD-MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 4, message: action.message }],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n//AC\r\nexport const actions = {\r\n  addMessage: (message: string) => ({ type: 'RWOS/DIALOG/ADD-MESSAGE', message } as const),\r\n}\r\n\r\nexport default dialogsReducer;\r\n","let subscribers = {\r\n  'messages-received': [] as MessagesReceivedSubscriberType[],\r\n  'status-changed': [] as StatusChangedSubscriberType[],\r\n}\r\n\r\nlet ws: WebSocket | null = null;\r\n\r\nconst closeHandler = () => {\r\n  // console.log('close wsChannel');\r\n  notifySubscribersAboutStatus('pending')\r\n  setTimeout(createChannel, 3000);\r\n};\r\n\r\nlet messageHandler = (e: MessageEvent) => {\r\n  const newMessages = JSON.parse(e.data);\r\n  subscribers['messages-received'].forEach(s => s(newMessages))\r\n};\r\n\r\nlet openHandler = () => {\r\n  notifySubscribersAboutStatus('ready')\r\n};\r\n\r\nlet errorHandler = () => {\r\n  notifySubscribersAboutStatus('error')\r\n  console.error('REFRESH PAGE')\r\n};\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener('close', closeHandler);\r\n  ws?.removeEventListener('message', messageHandler);\r\n  ws?.removeEventListener('open', openHandler);\r\n  ws?.removeEventListener('error', errorHandler);\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n  subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n  cleanUp()\r\n  ws?.close();\r\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n  notifySubscribersAboutStatus('pending')\r\n  ws.addEventListener('close', closeHandler);\r\n  ws.addEventListener('message', messageHandler);\r\n  ws.addEventListener('open', openHandler);\r\n  ws.addEventListener('error', errorHandler);\r\n}\r\n\r\nexport const chatAPI = {\r\n  start() { \r\n    createChannel()\r\n  },\r\n  stop() {\r\n    subscribers['messages-received'] = []\r\n    subscribers['status-changed'] = []\r\n    cleanUp()\r\n    ws?.close();\r\n\r\n  },\r\n  subscribe(eventName: EventsNameType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n    //@ts-ignore\r\n    subscribers[eventName].push(callback)\r\n    return () => {\r\n      //@ts-ignore\r\n      subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    }\r\n  },\r\n  unsubscribe(eventName: EventsNameType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n    //@ts-ignore\r\n    subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n  },\r\n  sendMessage(message: string) {\r\n    ws?.send(message)\r\n  }\r\n}\r\n\r\ntype EventsNameType = 'messages-received' | 'status-changed'\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\nexport type StatusType = 'pending' | 'ready' | 'error';\r\nexport type ChatMessageAPIType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};","import { ChatMessageAPIType, chatAPI, StatusType } from './../api/chat-api';\r\nimport { BasicThunkType, InferActionsTypes } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\nimport {v4 as uuidv4 } from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nconst initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: 'pending' as StatusType\r\n};\r\n\r\nconst chatReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/CHAT/MESSAGES_RECEIVED': {\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: uuidv4()}))].filter((m, index, array) => index >= (array.length - 100)),\r\n      };\r\n    }\r\n    case 'RWOS/CHAT/STATUS_CHANGED': {\r\n      return {\r\n        ...state,\r\n        status: action.payload.status,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  messagesReseived: (messages: ChatMessageAPIType[]) => ({\r\n    type: 'RWOS/CHAT/MESSAGES_RECEIVED',\r\n    payload: { messages },\r\n  } as const),\r\n  statusChanged: (status: StatusType) => ({\r\n    type: 'RWOS/CHAT/STATUS_CHANGED',\r\n    payload: { status },\r\n  } as const),\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\n\r\n//TC\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n  if(_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      dispatch(actions.messagesReseived(messages))\r\n      }//c HOCом передаем диспатч внутренней функции через замыкание\r\n    };\r\n  return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  if(_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(actions.statusChanged(status))\r\n      }//c HOCом передаем диспатч внутренней функции через замыкание\r\n    };\r\n  return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.start()\r\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n  chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n  chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Sandbox_selected__3TS97\"};","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  headers: { 'API-KEY': '6e65516f-e614-437d-93bf-9e85e40713b5' },\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n}); //создаем инстанс запроса(с параметрами запроса)\r\n\r\nexport enum ResultCodeEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}//added types for result code API\r\n\r\nexport enum ResultCodeForCaptchaEnam {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type BasicResponseType<D = {}, RC = ResultCodeEnum> = {\r\n  data: D\r\n  messages: string[]\r\n  resultCode: RC\r\n}\r\n\r\n// export type BasicResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// }\r\n","import styles from './News.module.css'\r\n\r\nconst News: React.FC = () => (\r\n  <div>\r\n    <p>News</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        News #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        News #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default News","import styles from './Music.module.css'\r\n\r\nconst Music: React.FC = () => (\r\n  <div>\r\n    <p>Music</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        Albums #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n      Albums #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Music","import styles from './Setings.module.css'\r\n\r\nconst Setings: React.FC = () => (\r\n  <div>\r\n    <p>Setings</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Setings","import { useState } from 'react';\r\nimport { Row, Col, Divider, Button } from 'antd';\r\nimport { Typography } from 'antd';\r\n\r\nexport const _Judge = () => {\r\n  console.log('rendering calc');\r\n  const { Title } = Typography;\r\n\r\n  let [count1gamer, setCount1gamer] = useState(() => 10); //убираем создание иниц значения при последующих рендерах(оптимально для сложных иниц объектов)\r\n  let [count2gamer, setCount2gamer] = useState(() => 10);\r\n\r\n  const increment1Handler = () => {\r\n    setCount1gamer((count1gamer) => count1gamer + 1);\r\n  };\r\n  const increment2Handler = () => {\r\n    setCount2gamer((count2gamer) => count2gamer + 1);\r\n  };\r\n  const decrementAllHandler = () => {\r\n    setCount1gamer((count1gamer) => count1gamer - 1);\r\n    setCount2gamer((count2gamer) => count2gamer - 1);\r\n  };\r\n  const resetHandler = () => {\r\n    setCount1gamer((count1gamer = 10));\r\n    setCount2gamer((count2gamer = 10));\r\n  };\r\n  return (\r\n    <div>\r\n      <Title level={2}>Judge calc</Title>\r\n      <Row>\r\n        <Col>\r\n          <div>\r\n            <div>Иван Иванович</div>\r\n            <div>{count1gamer}</div>\r\n            <Button onClick={increment1Handler}>+</Button>\r\n          </div>\r\n        </Col>\r\n        <Divider />\r\n        <Col>\r\n          <div>\r\n            <div>Петр Петрович</div>\r\n            <div>{count2gamer}</div>\r\n            <Button onClick={increment2Handler}>+</Button>\r\n          </div>\r\n        </Col>\r\n        <Divider />\r\n      </Row>\r\n      <Button onClick={decrementAllHandler}>-</Button>\r\n      <Button onClick={resetHandler}>reset</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Judge = () => {\r\n  console.log('rendering calc');\r\n  const { Title } = Typography;\r\n\r\n  let [countsGamer, setCountsGamer] = useState({\r\n    c1: 10,\r\n    c2: 10,\r\n  });\r\n\r\n  const increment1Handler = () => {\r\n    setCountsGamer((countsGamer) => {\r\n      return { ...countsGamer, c1: countsGamer.c1 + 1 };\r\n    });\r\n  };\r\n\r\n  const increment2Handler = () => {\r\n    setCountsGamer((countsGamer) => {\r\n      return { ...countsGamer, c2: countsGamer.c2 + 1 };\r\n    });\r\n  };\r\n  const decrementAllHandler = () => {\r\n    setCountsGamer((countsGamer) => {\r\n      return { ...countsGamer, c1: countsGamer.c1 - 1, c2: countsGamer.c2 - 1 };\r\n    });\r\n  };\r\n  const resetHandler = () => {\r\n    setCountsGamer((countsGamer) => {\r\n      return { ...countsGamer, c1: (countsGamer.c1 = 10), c2: (countsGamer.c2 = 10) };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Title level={2}>Judge calc</Title>\r\n      <Row justify='start'>\r\n        <Col span={4}>\r\n          <div>Иван Иванович</div>\r\n          <div>{countsGamer.c1}</div>\r\n          <Button onClick={increment1Handler}>+</Button>\r\n        </Col>\r\n        <Col span={4} offset={2}>\r\n          <div>Петр Петрович</div>\r\n          <div>{countsGamer.c2}</div>\r\n          <Button onClick={increment2Handler}>+</Button>\r\n        </Col>\r\n        <Divider />\r\n      </Row>\r\n      <Row justify='start'>\r\n        <Col span={2} offset={2}>\r\n          <Button onClick={decrementAllHandler}>-</Button>\r\n        </Col>\r\n        <Col span={2}>\r\n          <Button onClick={resetHandler}>reset</Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n","import { Col, Avatar, Typography, Progress } from 'antd';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { SearchUserType, SelectedUserType } from './Github';\r\n\r\nconst { Title, Link } = Typography;\r\n\r\ntype GithubProfilePropsType = {\r\n  selectedUser: SearchUserType | null;\r\n};\r\n\r\ntype GithubTimerProps = {\r\n  seconds: number;\r\n  onChange: (seconds: number) => void;\r\n  timerKey: string;\r\n};\r\n\r\nconst startTimerSeconds = 10;\r\n\r\nexport const GithubTimer: React.FC<GithubTimerProps> = ({ seconds, onChange, timerKey }) => {\r\n  const [timer, setTimer] = useState(startTimerSeconds);\r\n\r\n  useEffect(() => {\r\n    setTimer(seconds);\r\n  }, [seconds]);\r\n\r\n  useEffect(() => {\r\n    onChange(timer);\r\n  }, [timer]);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTimer((timer) => timer - 1);\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    }; //cleanup function\r\n  }, [timerKey]); //timerKey искуственно внедренная зависимость для пересоздания setInterval(решение проблемы скачка времени на первой секунде)\r\n\r\n  // useEffect(() => {\r\n  //   if (timer > 0)\r\n  //     setTimeout(() => {\r\n  //       setTimer(timer - 1);\r\n  //     }, 1000);\r\n  // }, [timer]);\r\n\r\n  return (\r\n    <>\r\n      <Progress type='circle' percent={timer * 10} format={(percent) => `${timer} sec`} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport const GithubProfile: React.FC<GithubProfilePropsType> = ({ selectedUser }) => {\r\n  const [selectedUserDetails, setSelectedUsersDetails] = useState<SelectedUserType | null>(null); //локальное хранилище профиля юзера\r\n  const [seconds, setSeconds] = useState(startTimerSeconds);\r\n\r\n  useEffect(() => {\r\n    if (!!selectedUser)\r\n      axios\r\n        .get<SelectedUserType>(`https://api.github.com/users/${selectedUser.login}`)\r\n        .then((res) => {\r\n          setSeconds(startTimerSeconds); //стартуем вначале таймер на новый профиль\r\n          setSelectedUsersDetails(res.data); //затем сетаем полученного юзера в локальный стейт(при обратном порядке баг микротаски и перерендера пустого профиля)\r\n        });\r\n  }, [selectedUser]); //засисимость от выбранного юзера приходящего из пропсов\r\n\r\n  useEffect(() => {\r\n    if (seconds < 1) setSelectedUsersDetails(null);\r\n  }, [seconds]); //очищаем компонент по окончанию таймера\r\n\r\n  return (\r\n    <>\r\n      {selectedUserDetails && (\r\n        <Col span={8} offset={2}>\r\n          <GithubTimer\r\n            seconds={seconds}\r\n            onChange={setSeconds}\r\n            timerKey={selectedUserDetails.login}\r\n          />\r\n          <Title level={1}>Profile:</Title>\r\n          <Link href={selectedUserDetails.html_url}>\r\n            <Title level={2}>{selectedUserDetails.login}</Title>\r\n            <Avatar\r\n              src={selectedUserDetails.avatar_url}\r\n              size={{ sm: 40, md: 60, lg: 84, xl: 160, xxl: 220 }}\r\n            />\r\n          </Link>\r\n          <p>User id: {selectedUserDetails.id}</p>\r\n          <p>Followers: {selectedUserDetails.followers}</p>\r\n        </Col>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import styles from './Sandbox.module.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Row, Col, Divider, Button, Input, Typography } from 'antd';\r\nimport axios from 'axios';\r\nimport { GithubProfile } from './GithubProfile';\r\n\r\nexport type SearchUserType = {\r\n  login: string;\r\n  id: number;\r\n};\r\n\r\nexport type SelectedUserType = {\r\n  login: string;\r\n  id: number;\r\n  avatar_url: string;\r\n  html_url: string;\r\n  followers: string;\r\n};\r\n\r\ntype SearchResult = {\r\n  items: SearchUserType[];\r\n};\r\n\r\ntype GithubSearchPropsType = {\r\n  value: string;\r\n  onSubmit: (fixedValue: string) => void;\r\n};\r\n\r\nexport const GithubSearch: React.FC<GithubSearchPropsType> = ({ value, onSubmit }) => {\r\n  const [tempSearch, setTempSearch] = useState(''); //input value\r\n\r\n  useEffect(() => {\r\n    setTempSearch(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <>\r\n      <Input\r\n        placeholder='search users'\r\n        value={tempSearch} //контроллируемый элемент ввода\r\n        onChange={(e) => {\r\n          setTempSearch(e.target.value);\r\n        }}\r\n      />\r\n      <Button\r\n        onClick={() => {\r\n          onSubmit(tempSearch); //при нажатии колбеком отдаем временное значения поля ввода поисковому значению для отправки запроса\r\n        }}>\r\n        find\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\ntype GithubUsersListPropsType = {\r\n  termSearch: string;\r\n  selectedUser: SearchUserType | null;\r\n  onUserSelect: (user: SearchUserType) => void;\r\n};\r\n\r\nexport const GithubUsersList: React.FC<GithubUsersListPropsType> = ({\r\n  termSearch,\r\n  selectedUser,\r\n  onUserSelect,\r\n}) => {\r\n  const [users, setUsers] = useState<SearchUserType[]>([]); //локальное хранилище юзеров\r\n\r\n  useEffect(() => {\r\n    axios.get<SearchResult>(`https://api.github.com/search/users?q=${termSearch}`).then((res) => {\r\n      setUsers(res.data.items); //сетаем полученных юзеров в локальный стейт\r\n    });\r\n  }, [termSearch]); //засисимость от синхронизированого стейта с полем ввода(по кнопке)\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {users.map((u) => (\r\n          <li\r\n            key={u.id}\r\n            className={selectedUser === u ? styles.selected : ''}\r\n            onClick={() => {\r\n              onUserSelect(u); //отдаем родителю в колбэк выбранного юзера(которого затем он нам вернет пропсами и мы его подсветим)\r\n            }}>\r\n            {u.login}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\n// type GithubTimerProps = {};\r\n\r\n// export const GithubTimer: React.FC<GithubTimerProps> = () => {\r\n//   const [timer, setTimer] = useState(10)\r\n//   return <>{timer}</>;\r\n// };\r\n\r\nexport const Github: React.FC = () => {\r\n  const { Title } = Typography;\r\n\r\n  const [selectedUser, setSelectedUser] = useState<SearchUserType | null>(null);\r\n  const [termSearch, setTermSearch] = useState('chernykh'); //value for fetch\r\n  // const [users, setUsers] = useState<SearchUserType[]>([]); //локальное хранилище юзеров\r\n  // const [tempSearch, setTempSearch] = useState('chernykh'); //input value\r\n  // const [selectedUserDetails, setSelectedUsersDetails] = useState<SelectedUserType | null>(null); //локальное хранилище профиля юзера\r\n\r\n  useEffect(() => {\r\n    console.log('sync title');\r\n    if (selectedUser) document.title = selectedUser.login;\r\n  }, [selectedUser]);\r\n\r\n  // useEffect(() => {\r\n  //   axios.get<SearchResult>(`https://api.github.com/search/users?q=${termSearch}`).then((res) => {\r\n  //     setUsers(res.data.items); //сетаем полученных юзеров в локальный стейт\r\n  //   });\r\n  // }, [termSearch]); //засисимость от синхронизированого стейта с полем ввода(по кнопке)\r\n  // // console.log(users);\r\n\r\n  // useEffect(() => {\r\n  //   if (!!selectedUser)\r\n  //     axios\r\n  //       .get<SelectedUserType>(`https://api.github.com/users/${selectedUser.login}`)\r\n  //       .then((res) => {\r\n  //         setSelectedUsersDetails(res.data); //сетаем полученного юзера в локальный стейт\r\n  //       });\r\n  // }, [selectedUser]); //засисимость от выбранного юзера\r\n\r\n  return (\r\n    <div>\r\n      <Title level={2}>GitHub search</Title>\r\n      <Row justify='start'>\r\n        <Col span={8}>\r\n          <GithubSearch\r\n            value={termSearch}\r\n            onSubmit={(value: string) => {\r\n              setTermSearch(value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              setTermSearch('chernykh'); //сброс на дефолтное значение\r\n            }}>\r\n            reset\r\n          </Button>\r\n          <GithubUsersList\r\n            termSearch={termSearch}\r\n            selectedUser={selectedUser}\r\n            // onUserSelect={setSelectedUser}\r\n            onUserSelect={(selectedUser: SearchUserType | null) => {\r\n              setSelectedUser(selectedUser);\r\n            }}\r\n          />\r\n        </Col>\r\n        {selectedUser && <GithubProfile selectedUser={selectedUser} />}\r\n        <Divider />\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n","import styles from './Paginator.module.css';\r\nimport React, { useState } from 'react';\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number;\r\n  pageSize: number;\r\n  onPageChanged?: (page: number) => void; //?для теста\r\n  currentPage: number;\r\n  portionSize?: number; //'?' необязательный параметр\r\n}; //типизируем пропсы и ниже компонент: React.FC<Props>\r\n\r\nconst Paginator: React.FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  onPageChanged = (x) => x,\r\n  currentPage = 1,\r\n  portionSize = 10,\r\n}) => {\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize); //кол-во странииц\r\n  const portionCount = Math.ceil(pagesCount / portionSize); //кол-во порций\r\n  const [portionNumber, setPortionNumber] = useState<number>(Math.ceil(currentPage / portionSize)); //отслеживаем номер порции и его изменение//решение со сбросом порции при смене страницы\r\n  // let [portionNumber, setPortionNumber] = useState(1); //отслеживаем номер порции и его изменение\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //номер левого элемента порции\r\n  const rightPortionPageNumber = portionNumber * portionSize; //номер правого элемента порции\r\n  const pages: number[] = [];\r\n  // const pages: Array<number> = [];\r\n  for (let i = 1; i <= pagesCount; i++) pages.push(i);\r\n\r\n  return (\r\n    <div className={styles.paginationBlockWrapper}>\r\n      <div className={styles.paginationBlock}>\r\n        {portionNumber > 1 ? (\r\n          <button\r\n            className={styles.buttonPrev}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber - 1);\r\n            }}>\r\n            PREV\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>PREV</button>\r\n        )}\r\n        {pages\r\n          .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n          .map((page, id) => {\r\n            return (\r\n              <span\r\n                key={id}\r\n                onClick={(event) => {\r\n                  onPageChanged(page);\r\n                }}\r\n                className={`${styles.pagination} ${\r\n                  currentPage === page ? styles.selectedPage : ''\r\n                }`}>\r\n                {page}\r\n              </span>\r\n            );\r\n          })}\r\n        {portionNumber < portionCount ? (\r\n          <button\r\n            className={styles.buttonNext}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber + 1);\r\n            }}>\r\n            NEXT\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>NEXT</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import styles from './Users.module.css';\r\nimport avataaars from './../../../src/assets/images/avataaars.svg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {UsersType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n  followingInProgress: Array<number | null>,\r\n  user: UsersType,\r\n  follow: (userId: number | null) => void,\r\n  unfollow: (userId: number | null) => void,\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({ followingInProgress, follow, unfollow, user }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              className={styles.userPhoto}\r\n              src={user.photos.small != null ? user.photos.small : avataaars} //добавляем проверку, если с сервера не пришла аватарка, поставить заглушку\r\n              alt='avatar'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div className={styles.userButton}>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        <div>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </div>\r\n        <div>\r\n          {/* <div>{user.location.country}</div>\r\n                <div>{user.location.city}</div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { createSelector } from 'reselect';\r\nimport {AppStateType} from './redux-store'\r\n\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n}); //test reselec\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};//add formik term in URL\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n","// import styles from './Users.module.css';\r\nimport React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n  term: string;\r\n  friend: FriendFormType;\r\n};\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo(({ onFilterChanged }) => {\r\n  const filter = useSelector(getUsersFilter);\r\n\r\n  const submit = (\r\n    values: FormType,\r\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void },\r\n  ) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false,\r\n    };\r\n    onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize={true} //реинициальзация после отработки эффекта с квери параметрами\r\n        initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type='text' name='term' />\r\n            <Field name='friend' as='select'>\r\n              <option value='null'>All</option>\r\n              <option value='true'>Only followed</option>\r\n              <option value='false'>Only unfollowed</option>\r\n            </Field>\r\n            <button type='submit' disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default UsersSearchForm;\r\n","// import axios from 'axios';\r\nimport { UsersType } from '../types/types'\r\nimport { instance, BasicResponseType } from './api'\r\n\r\ntype GetUsersResponseType = {\r\n  items: UsersType[]\r\n  totalCount: number\r\n  error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n  // getUsers(currentPage: number, pageSize: number | null, term: string = '', friend: null | boolean = null) {\r\n    return instance //обращаемся уже к инстансу запроса\r\n      .get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))//add formik term and friend in URL\r\n      .then((response) => response.data); //промисом вернем не весь ответ а нужную часть data\r\n  },\r\n  async follow(userId: number | null) {\r\n    const response = await instance.post<BasicResponseType>(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  async unfollow(userId: number | null) {\r\n    const response = await instance.delete<BasicResponseType>(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// type FollowUnfollowResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// }//BasicResponseType\r\n\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n  return items.map((user: any) => {\r\n    if (user[objPropName] === itemId) {\r\n      return { ...user, ...newObjProps };\r\n    }\r\n    return user;\r\n  });\r\n};\r\n//в итоге вернет нам новый массив, в котором заменит, если найдет совпадение по objPropName из объекта с таким itemId, создаст копию объекта и заменит старые свойства деструктуризацией из новых свойств newObjProps\r\n","import { ResultCodeEnum, BasicResponseType } from '../api/api';\r\nimport { usersAPI} from '../api/users-api';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { UsersType} from '../types/types'\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { AppStateType, InferActionsTypes, BasicThunkType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UsersType>,\r\n  pageSize: 10 as number,\r\n  totalUsersCount: 0 as number,\r\n  currentPage: 1 as number,\r\n  isFetching: true as boolean,\r\n  followingInProgress: [] as Array<number | null>,//array of users Id\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean,\r\n  }//add formik in URL\r\n};\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/USERS/FOLLOW' :\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }),\r\n      };\r\n    case 'RWOS/USERS/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }),\r\n      };\r\n    case 'RWOS/USERS/SET_USERS': {\r\n      return {\r\n        ...state,\r\n        users: action.users, //перезатираем массив юзеров\r\n        // users: [...state.users, ...action.users],\r\n      }; //с сервера придут пользователи, мы должны взять старый стейт(сделать копию) и дополнить его новыми пользователями пришедшими из экшна (склеить два массива спред оператором)\r\n    }\r\n    case 'RWOS/USERS/SET_CURRENT_PAGE': {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/SET_FILTER': {\r\n      return {\r\n        ...state,\r\n        filter: action.payload,\r\n      };//add formik term in URL\r\n    }\r\n    case 'RWOS/USERS/SET_TOTAL_USERS_COUNT': {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/TOGGLE_IS_FETCHING': {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId] //если isF true добавляем в массив id из экшена\r\n          : state.followingInProgress.filter((id) => id !== action.userId), //если isF false фильтрация вернут новый массив\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// type ActionsTypes = InferActionsTypes<typeof actions>\r\n//выносим AC в объект\r\nexport const actions = {\r\n  followSuccess: (userId: number | null) => ({ type: 'RWOS/USERS/FOLLOW', userId } as const), //переименуем из-за thunkCreate\r\n  unfollowSuccess: (userId: number | null) => ({ type: 'RWOS/USERS/UNFOLLOW', userId }) as const, //переименуем из-за thunkCreate\r\n  setUsers: (users: Array<UsersType>) => ({ type: 'RWOS/USERS/SET_USERS', users } as const), //возьмем данные о юзерах с сервера и поместим их потом в стейт\r\n  setCurrentPage: (currentPage: number) => ({ type: 'RWOS/USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n  setFilter: (filter: FilterType) => ({ type: 'RWOS/USERS/SET_FILTER', payload: filter } as const),///add formik term in URL\r\n  setTotalUsersCount: (totalUsersCount: number) => ({\r\n    type: 'RWOS/USERS/SET_TOTAL_USERS_COUNT',\r\n    totalUsersCount, //когда ключ и значение не одинаковы(специально)\r\n  } as const),\r\n  toggleIsFetching: (isFetching: boolean) => ({\r\n    type: 'RWOS/USERS/TOGGLE_IS_FETCHING',\r\n    isFetching,\r\n  } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number | null) => ({\r\n    type: 'RWOS/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n    isFetching,\r\n    userId,\r\n  } as const),\r\n}\r\n\r\n//создаем функции thunk creator, которая создает(возвращает) thunk(dispatch action)\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch, getState) => {\r\n  dispatch(actions.toggleIsFetching(true)); //запрос ушел preloader виден\r\n  dispatch(actions.setCurrentPage(page)); //from onPageChanged(активная страница)\r\n  dispatch(actions.setFilter(filter));//add formik term in URL\r\n  const data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);//add formik term in URL\r\n  dispatch(actions.toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n  dispatch(actions.setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}; //remove page | null\r\n\r\n//рефакторинг, вынесение дублирующей логики из follow и unfollow в функцию followUnfollowFlow\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number | null, apiMethod: (userId: number | null) => Promise<BasicResponseType>, actionCreator: (userId: number | null) => ActionsTypes) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await apiMethod(userId);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actionCreator(userId));\r\n  } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId: number | null): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n};//типизируем TC по типу ThunkType\r\n\r\nexport const unfollow = (userId: number | null): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;\r\n","import styles from './Users.module.css';\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport UsersSearchForm from './UsersSearchForm';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { follow, unfollow, requestUsers, FilterType } from '../../redux/users-reducer';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getUsers,\r\n  getUsersFilter,\r\n} from '../../redux/users-selectors';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n// import * as queryString from 'querystring'//deprecated — Legacy\r\n\r\n// type QueryParamsType = {\r\n//   term?: string;\r\n//   page?: string;\r\n//   friend?: string;\r\n// };//querystring deprecated — Legacy\r\n\r\nexport const Users: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const totalUsersCount = useSelector((state: AppStateType) => state.usersPage.totalUsersCount); //example\r\n  const pageSize = useSelector(getPageSize); //from users-selectors\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const users = useSelector(getUsers);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n  useEffect(() => {\r\n    // const query: QueryParamsType = {};\r\n    // if (filter.term) query.term = filter.term;\r\n    // if (filter.friend !== null) query.friend = String(filter.friend);\r\n    // if (currentPage !== 1) query.page = String(currentPage);\r\n    //querystring deprecated — Legacy\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`,\r\n    });\r\n  }, [filter, currentPage]); //следим за изменением фильтра и текущей страницы в стейте и пушим в урл квери строку параметры\r\n\r\n  useEffect(() => {\r\n    const { search } = location;\r\n    const parsed = new URLSearchParams(search);\r\n    const parsedPage = parsed.get('page');\r\n    const parsedTerm = parsed.get('term');\r\n    const parsedFriend = parsed.get('friend');\r\n\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n    if (!!parsedPage) actualPage = Number(parsedPage);\r\n    if (!!parsedTerm) actualFilter = { ...actualFilter, term: parsedTerm };\r\n    if (parsedFriend)\r\n      actualFilter = {\r\n        ...actualFilter,\r\n        friend: parsedFriend === 'null' ? null : parsedFriend === 'true' ? true : false,\r\n      }; //..иммутабельно\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []); //парсим url строку, извлекаем query params, и если они есть иммутабельно меняем данные и диспачим уже параметры из урла, а не из стейта при первой загрузке страницы\r\n\r\n  const onPageChanged = (currentPage: number) => {\r\n    dispatch(requestUsers(currentPage, pageSize, filter));\r\n  };\r\n\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter)); //1 сброс страницы на первую при фильтрации\r\n  }; //add formik term in URL\r\n\r\n  const _follow = (userId: number | null) => {\r\n    dispatch(follow(userId));\r\n  };\r\n\r\n  const _unfollow = (userId: number | null) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Paginator //выносим логику пагинации в отдельный компонент, прокидываем пропсы\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        onPageChanged={onPageChanged}\r\n        currentPage={currentPage}\r\n      />\r\n      {users.map((user) => (\r\n        <div className={styles.wrapper} key={user.id}>\r\n          <User //выносим логику в компонент, прокидываем пропсы\r\n            followingInProgress={followingInProgress}\r\n            follow={_follow}\r\n            unfollow={_unfollow}\r\n            user={user}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Users } from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\nimport { useSelector } from 'react-redux';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\n\r\ntype PropsType = {\r\n  pageTitle: string;\r\n};\r\n\r\nexport const UsersPage: React.FC<PropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  // const isFetching = useSelector((state: AppStateType) => state.usersPage.isFetching);\r\n\r\n  return (\r\n    <>\r\n      <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n","import { instance, BasicResponseType, ResultCodeEnum, ResultCodeForCaptchaEnam } from './api'\r\n\r\n\r\ntype MeResponseDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    // const response = await instance.get<MeResponseType>(`auth/me`);\r\n    const response = await instance.get<BasicResponseType<MeResponseDataType>>(`auth/me`);\r\n    return response.data;\r\n  },\r\n  async login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n    // const response = await instance.post<LoginResponseType>(`auth/login`, {\r\n    const response = await instance.post<BasicResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnam>>(`auth/login`, {\r\n      email: email,\r\n      password: password,\r\n      rememberMe: rememberMe,\r\n      captcha: captcha,\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete<BasicResponseType>(`auth/login`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n//add BasicResponseType generic\r\n\r\n// type MeResponseType = {\r\n//   data: {\r\n//     id: number\r\n//     email: string\r\n//     login: string\r\n//   }\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n// }\r\n\r\n// type LoginResponseType = {\r\n//   resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n//   messages: string[]\r\n//   data: {\r\n//     userId: number\r\n//   }\r\n// }\r\n\r\n// type LogoutResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n\r\n","// import axios from 'axios';\r\nimport { instance } from './api'\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptchaUrl() {\r\n    const response = await instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);\r\n    return response.data;\r\n  },\r\n};","import { ResultCodeEnum, ResultCodeForCaptchaEnam } from '../api/api';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { FormAction, stopSubmit } from 'redux-form';//add @types/redux-form\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Action } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\n// const SET_USER_DATA = 'RWOS/AUTH/SET_USER_DATA'; //add redux-ducks\r\n// const SET_CAPTCHA_URL_SUCCESS = 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS';\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false as boolean, //isAuth флаг того, что юзер залогинен\r\n  captchaUrl: null as string | null, //по наличию капчи в стейте отображаем капчу и поле ввода в форме на странице логина\r\n}; //инициализируем стейт согласно данным из API response\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/AUTH/SET_USER_DATA': {\r\n      return {\r\n        ...state,\r\n        ...action.payload, //в экшене будет сидеть объект data,который мы деструктурируем\r\n      };\r\n    }\r\n    case 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// type ActionsTypes = SetAuthUserDataActionType | SetCaptchaUrlSuccessActionType\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean, captchaUrl: string | null = null) => ({\r\n    type: 'RWOS/AUTH/SET_USER_DATA',\r\n    payload: { userId, email, login, isAuth, captchaUrl },\r\n  } as const), //AC деструктурируем объект data до составляющих userId, email, login, isAuth true, зануляем капчу\r\n  setCaptchaUrlSuccess: (captchaUrl: string | null) => ({\r\n    type: 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS', //\r\n    captchaUrl,\r\n  } as const),\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsTypes | FormAction>//расширяем типами экшенов для redux-form\r\n// type ThunkType = BasicThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>//расширяем типами экшенов для redux-form\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.me();\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    const { id, email, login } = data.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true)); //isAuth true\r\n  }\r\n};//added TS API, ResultCodeEnum\r\n\r\n//TC to login and logout\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (data.resultCode === ResultCodeForCaptchaEnam.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    } //при ответе сервера 10 диспачим санку на получение капчи\r\n    // let action = stopSubmit('login', { email: 'Email is wrong' }); //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('login', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n  }//Fix dispatch: any dispatch(stopSubmit('login', { _error: message }))\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.logout();\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false)); //при логауте зануляем все данные и ставим флаг isAuth false\r\n  }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  dispatch(actions.setCaptchaUrlSuccess(data.url));\r\n}; //получаем капчу с сервера\r\n\r\nexport default authReducer;\r\n","import { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from '../common/FormsControls/FormsControls.module.css';\r\nimport stylesLogin from './Login.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null;\r\n}; //собственные пропсы формы\r\n//InjectedFormProps заинжекченый набор свойств redux-form(handleSubmit, error)\r\n//LoginFormValuesType свойства формы из полей\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.loginFormWrapper}>\r\n      <div>\r\n        <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          placeholder={'Password'}\r\n          name={'password'}\r\n          type={'password'}\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field component={Input} name={'rememberMe'} type={'checkbox'} />\r\n      </div>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      {captchaUrl && ( //по условию наличия в стейте капчи покажем ее на странице формы\r\n        <div>\r\n          <img src={captchaUrl} alt='captcha' />\r\n          <Field placeholder={'captcha'} name={'captcha'} component={Input} validate={[required]} />\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n//handleSubmit выполнит следующие действия\r\n//e.preventDefault\r\n//get all form data and put them to object\r\n//props.onSubmit(formData)\r\n\r\n//unique name for the form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(\r\n  LoginForm,\r\n);\r\n\r\ntype LoginFormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string | null;\r\n};\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { isAuth, captchaUrl } = useSelector(({ auth }: AppStateType) => auth);\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={stylesLogin.loginH1}>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n      <div className={stylesLogin.loginblock}>\r\n        <h2>Данные тестового аккаунта:</h2>\r\n        <p>Email: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nimport { Layout, Menu, Avatar, Image, Row, Col, Button } from 'antd';\r\n// import { UserOutlined } from '@ant-design/icons';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport avataaars from '../../assets/images/avataaars.png';\r\n\r\nexport const Header: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { login, isAuth } = useSelector(({ auth }: AppStateType) => auth);\r\n  const { profile } = useSelector(({ profilePage }: AppStateType) => profilePage);\r\n  const { Header } = Layout;\r\n\r\n  const _logout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Header className='header'>\r\n      <div className='logo' />\r\n      <Row>\r\n        <Col span={18}>\r\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\r\n            <Menu.Item key='1'>\r\n              <Link to='/users'>Developers</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Col>\r\n        {isAuth ? (\r\n          <>\r\n            <Col span={2}>\r\n              {/* <Avatar\r\n                alt={login || ''}\r\n                style={{ backgroundColor: '#87d068' }}\r\n                icon={<UserOutlined />}\r\n              /> */}\r\n              {profile && (\r\n                <Avatar\r\n                  icon={\r\n                    <Image\r\n                      src={profile.photos.small !== null ? profile.photos.small : avataaars}\r\n                      style={{ width: 32 }}\r\n                    />\r\n                  }\r\n                />\r\n              )}\r\n            </Col>\r\n            <Col span={4}>\r\n              <Button onClick={_logout}>Log out</Button>\r\n            </Col>\r\n          </>\r\n        ) : (\r\n          <Col span={6}>\r\n            <Button>\r\n              <Link to={'/Login/'}>Login</Link>\r\n            </Button>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\n","import { getAuthUserData } from './auth-reducer';\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\nconst initialState = {\r\n  initialized: false as boolean,\r\n}; //инициализируем стейт, initialized флаг того, что юзер залогинен(нет)\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/APP/INITIALIZED_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        initialized: true, // isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};//TS редьюсер на входе и на выходе должен принять и вернуть state: InitialStateType\r\n\r\n\r\n//AC\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  initializedSuccess: () => ({\r\n    type: 'RWOS/APP/INITIALIZED_SUCCESS',\r\n  } as const)\r\n}\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\n\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n  let promise = dispatch(getAuthUserData()); //диспачим получение юзерских данных\r\n  //dispatch(somethingelse())//диспачим получение любых других данных\r\n  //и когда промис (в authAPI.me) зарезолвится, мы его здесь получим как результат promise и после этого мы задиспачим AC success\r\n  // promise.then(() => {dispatch(initializedSuccess())})//если промис один\r\n  Promise.all([promise]).then(() => dispatch(actions.initializedSuccess()));\r\n};\r\n\r\nexport default appReducer;\r\n","import React from 'react';\r\nimport Preloader from '../components/common/preloader/Preloader';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<Preloader />}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n};\r\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\n// import Navbar from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setings from './components/Setings/Setings';\r\nimport { Judge } from './pages/Sandbox/Judge';\r\nimport { Github } from './pages/Sandbox/Github';\r\nimport { UsersPage as UsersContainer } from './components/Users/UsersContainer';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\nimport { LoginPage } from './components/Login/LoginPage';\r\nimport { Header } from './components/Header/Header';\r\n// import HeaderContainer from './components/Header/HeaderContainer';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/preloader/Preloader';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { compose } from 'redux';\r\nimport { withSuspense } from './hoc/withSuspense';\r\n// import { BrowserRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages!!!\r\n// import { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import store from './redux/redux-store';\r\n// import { Provider } from 'react-redux';\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  UserOutlined,\r\n  MessageOutlined,\r\n  NotificationOutlined,\r\n  CodeSandboxOutlined,\r\n} from '@ant-design/icons';\r\nimport { Footer } from 'antd/lib/layout/layout';\r\n// import { ChatPage } from './pages/Chat/ChatPage';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Content, Sider } = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Ленивая загрузка\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'));\r\n// const Login = React.lazy(() => import('./components/Login/Login'));\r\n\r\ntype MapStatePropsType = {\r\n  initialized: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer); //единожды при загрузке приложения оборачиваем в HOC withSuspense, и ниже отрисовываем уже обернутую компоненту\r\n\r\nclass App extends React.Component<PropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    console.log('Some error occured');\r\n    // console.error(promiseRejectionEvent);\r\n  }; //Событие unhandledrejection происходит, когда Promise завершён с ошибкой, но на данную ошибку не установлен обработчик.\r\n  // debugger;\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  } //переносим запрос из HeaderC\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <Layout>\r\n        <Header />\r\n        <Layout>\r\n          <Sider width={200} className='site-layout-background'>\r\n            <Menu\r\n              mode='inline'\r\n              defaultSelectedKeys={['1']}\r\n              defaultOpenKeys={['sub1']}\r\n              style={{ height: '100%', borderRight: 0 }}>\r\n              <SubMenu key='sub1' icon={<UserOutlined />} title='My profile'>\r\n                <Menu.Item key='1'>\r\n                  <Link to='/profile'>Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='2'>\r\n                  <Link to='/dialogs'>Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='3'>\r\n                  <Link to='/chat'>Chat</Link>\r\n                </Menu.Item>\r\n                {/* <Menu.Item key='4'>option4</Menu.Item> */}\r\n              </SubMenu>\r\n              <SubMenu key='sub2' icon={<MessageOutlined />} title='Developers'>\r\n                <Menu.Item key='5'>\r\n                  <Link to='/users'>Users</Link>\r\n                </Menu.Item>\r\n                {/* <Menu.Item key='6'>option6</Menu.Item>\r\n                <Menu.Item key='7'>option7</Menu.Item>\r\n                <Menu.Item key='8'>option8</Menu.Item> */}\r\n              </SubMenu>\r\n              <SubMenu key='sub3' icon={<NotificationOutlined />} title='Media'>\r\n                <Menu.Item key='9'>\r\n                  <Link to='/news'>News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='10'>\r\n                  <Link to='/music'>Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='11'>\r\n                  <Link to='/setings'>Setings</Link>\r\n                </Menu.Item>\r\n              </SubMenu>\r\n              <SubMenu key='sub4' icon={<CodeSandboxOutlined />} title='SandBox'>\r\n                <Menu.Item key='12'>\r\n                  <Link to='/github'>GitHub</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='13'>\r\n                  <Link to='/calc'>Сalc</Link>\r\n                </Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout style={{ padding: '0 24px 24px' }}>\r\n            {/* <Breadcrumb style={{ margin: '16px 0' }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>List</Breadcrumb.Item>\r\n              <Breadcrumb.Item>App</Breadcrumb.Item>\r\n            </Breadcrumb> */}\r\n            <Content\r\n              className='site-layout-background'\r\n              style={{\r\n                padding: 24,\r\n                margin: 0,\r\n                minHeight: 280,\r\n              }}>\r\n              <Suspense fallback={<Preloader />}>\r\n                <Route path='/profile/:userId?'>\r\n                  <ProfileContainer\r\n                  //:userId? опциональный параметр ХОКа withRouter\r\n                  />\r\n                </Route>\r\n                <Route path='/chat'>\r\n                  <ChatPage />\r\n                </Route>\r\n                {/* <Route path='/dialogs'>\r\n              <DialogsContainer />//ниже с HOC withSuspense\r\n            </Route> */}\r\n              </Suspense>\r\n              <Route path='/dialogs'>\r\n                <SuspendedDialogs />\r\n              </Route>\r\n              <Route path='/login'>\r\n                <LoginPage />\r\n              </Route>\r\n              <Route path='/users'>\r\n                <UsersContainer pageTitle={'Самураи'} />\r\n              </Route>\r\n              <Route path='/news'>\r\n                <News />\r\n              </Route>\r\n              <Route path='/music'>\r\n                <Music />\r\n                <Route path='/setings'>\r\n                  <Setings />\r\n                </Route>\r\n              </Route>\r\n              <Route path='/github'>\r\n                <Github />\r\n              </Route>\r\n              <Route path='/calc'>\r\n                <Judge />\r\n              </Route>\r\n              {/* <Route path='/' exact>\r\n            <Redirect to='/profile' />\r\n          </Route> */}\r\n              <Route exact path='/'>\r\n                {this.props.initialized ? <Redirect to='/profile' /> : <LoginPage />}\r\n              </Route>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>\r\n              developers social network © 2021 Created by chernykh.ru\r\n            </Footer>\r\n          </Layout>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n//  <Route path='/dialogs'//Suspense custom HOC\r\n// render = {() => withSuspense(DialogsContainer)} />\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized, //получаем из стейта флаг\r\n});\r\n\r\n// let AppContainer = compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App)\r\n\r\n// const SamuraiJSApp: React.FC = () => {\r\n//   return (\r\n//   <Router>\r\n//     <Provider store={store}>\r\n//       <AppContainer />\r\n//     </Provider>\r\n//   </Router>)\r\n// }//variant IT-Dimich\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp }),\r\n)(App);\r\n// export default withRouter(connect<MapStatePropsType, MapDispatchPropsType, AppStateType>(mapStateToProps, { initializeApp }))(App);\r\n// export default compose(withRouter, connect(mapStateToProps, { initializeApp })(App));//bug with compose\r\n\r\n// export default SamuraiJSApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { combineReducers, createStore, applyMiddleware, Action } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialog-reducer'; //add ts\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport appReducer from './app-reducer';\r\nimport chatReducer from './chat-reducer';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n//ключи из стейта, значения соответствующие редьюсеры(ветки нашего глобального стейта)\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;//(globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>//ReturnType утилита создает тип, состоящий из возвращаемого типа функции (самостоятельно определяет тип возвращаемый из <RootReducerType>) и присваиваем его AppStateType\r\n\r\n//Вывод типов из обекта actions, содержащего Action Creators\r\n// type PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n// export type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BasicThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n//A = A extends Action from redux(ActionsTypes)\r\n//R(возвращаемое значение) = Promise<void>//большинство санок нам ничего не возвращает(возвращает промис который ничем не резолвится), поэтому по умолчанию поставим R = Promise<void>\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n//создаем редаксовский стор с помощью функции createStore(cS мы отдаем закомбайненые редьюсеры)\r\n//добавляем промежуточный слой middleware thunk\r\n// let store = createStore(reducers, applyMiddleware(thunk));\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import SamuraiJSApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import { BrowserRouter as Router, Route } from 'react-router-dom';//заменен на HashRouter\r\nimport { Provider } from 'react-redux';\r\n\r\n// ReactDOM.render(<SamuraiJSApp />, document.getElementById('root'),\r\n// );//variant IT-Dimich\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Router>\r\n    {/* <Router basename={process.env.PUBLIC_URL}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3GS1A\",\"wrapper__item\":\"Users_wrapper__item__1cUQX\",\"userPhoto\":\"Users_userPhoto__22rSw\",\"userButton\":\"Users_userButton__1Rd_M\",\"pagination\":\"Users_pagination__9wTpd\",\"selectedPage\":\"Users_selectedPage__rTwP8\",\"preloader\":\"Users_preloader__13i_D\"};","export default __webpack_public_path__ + \"static/media/preloader.0703713f.svg\";","import React from 'react';\r\nimport styles from '../../Users/Users.module.css';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <>\r\n      <img className={styles.preloader} src={preloader} alt='is loading...' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n"],"sourceRoot":""}