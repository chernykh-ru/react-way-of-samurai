{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","id","name","className","styles","dialog","avatar","src","avataaars","alt","to","activeClassName","activeLink","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogs","messages","addMessage","dialogsElements","map","i","messagesElements","m","dialogsItems","messagesUser","value","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","actions","WrappedComponent","props","restProps"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,cAAgB,+BAA+B,OAAS,wBAAwB,aAAe,8BAA8B,eAAiB,gCAAgC,QAAU,2B,8GCwBjVC,EAlB2B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAG9C,OACE,sBAAKC,UAAWC,IAAOC,OAAvB,UACE,qBACEF,UAAWC,IAAOE,OAClBC,IAAKC,IAELC,IAAI,WAEN,cAAC,IAAD,CAASC,GAAI,YAAcT,EAAIU,gBAAiBP,IAAOQ,WAAvD,SACGV,QCPMW,EAJsB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,QAAiB,EAARb,GAC9C,OAAO,qBAAKE,UAAWC,IAAOU,QAAvB,SAAiCA,K,2CCJpCC,EAAcC,YAAiB,IAyBxBC,EAAsBC,YAAiC,CAAEC,KAAM,wBAAzCD,EAnB+D,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAEnG,OACE,uBAAMC,SAAUD,EAAhB,UACE,8BACE,cAACE,EAAA,EAAD,CACEC,UAAWC,IACXtB,KAAM,UACNuB,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAGzB,8BACE,yDC4BOa,EA7BsB,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAElDC,EAAkBH,EAAQI,KAAI,SAAC5B,EAAqB6B,GAAtB,OAClC,cAAC,EAAD,CAAoBhC,KAAMG,EAAOH,KAAMD,GAAII,EAAOJ,IAAjCiC,MAIbC,EAAmBL,EAASG,KAAI,SAACG,EAAGF,GAAJ,OACpC,cAAC,EAAD,CAAiBpB,QAASsB,EAAEtB,QAASb,GAAImC,EAAEnC,IAA7BiC,MAUhB,OACE,sBAAK/B,UAAWC,IAAOyB,QAAvB,UACE,qBAAK1B,UAAWC,IAAOiC,aAAvB,SAAsCL,IACtC,sBAAK7B,UAAWC,IAAO0B,SAAvB,UACE,qBAAK3B,UAAWC,IAAOkC,aAAvB,SAAsCH,IACtC,cAAClB,EAAD,CAAqBI,SAXP,SAACkB,GACnBR,EAAWQ,EAAMzB,mB,8BC9BjB0B,EAA6B,SAACC,GAAD,MAA0B,CACzDC,OAAQD,EAAME,KAAKD,S,YC+BNE,4BAA6BC,aA1BtB,SAACJ,GACrB,MAAO,CACLZ,QAASY,EAAMK,YAAYjB,QAC3BC,SAAUW,EAAMK,YAAYhB,YAuBmB,eAAsBiB,ODrBlE,SAAgCC,GAYrC,OAFqCH,YAA4DL,EAA5DK,EARkC,SAACI,GACtE,IAAKP,EAAwBO,EAAxBP,OAAWQ,EAAhB,YAA6BD,EAA7B,GACA,OAAKP,EAEE,cAACM,EAAD,eAAsBE,IAFT,cAAC,IAAD,CAAUxC,GAAI,gBCiBvBkC,CAAuFhB","file":"static/js/4.afbf1671.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2k5OF\",\"dialogsItems\":\"Dialogs_dialogsItems__1XTni\",\"dialog\":\"Dialogs_dialog__aU1X5\",\"messages\":\"Dialogs_messages__2gINe\",\"avatarWrapper\":\"Dialogs_avatarWrapper__WbZwe\",\"avatar\":\"Dialogs_avatar__2Onne\",\"messagesUser\":\"Dialogs_messagesUser__2OOnJ\",\"messagesFriend\":\"Dialogs_messagesFriend__3wPpz\",\"message\":\"Dialogs_message__2DoC3\"};","import { NavLink } from 'react-router-dom';\r\nimport styles from './../Dialogs.module.css';\r\nimport avataaars from './../../../assets/images/avataaars.svg';\r\nimport { DialogsType } from '../../../types/types'\r\n\r\n// type PropsType = DialogsType\r\n\r\nconst DialogItem: React.FC<DialogsType> = ({id, name}) => {\r\n  // debugger\r\n\r\n  return (\r\n    <div className={styles.dialog}>\r\n      <img\r\n        className={styles.avatar}\r\n        src={avataaars}\r\n        // src={props.avatar != null ? props.avatar : avataaars}\r\n        alt='avatar'\r\n      />\r\n      <NavLink to={'/dialogs/' + id} activeClassName={styles.activeLink}>\r\n        {name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import styles from './../Dialogs.module.css';\r\n// import {MessagesType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n  message: string\r\n  id: number\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({message, id}) => {\r\n  return <div className={styles.message}>{message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport {DialogMessageFormType} from '../Dialogs'\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n// type DialogMessageFormValuesKeysType = Extract<keyof DialogMessageFormType, string>//ключи для кастомных функций\r\n\r\ntype PropsType = {}//добавлены пока для единообразия с прицелом на дальнейшее развитие\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<DialogMessageFormType, PropsType> & PropsType> = ({ handleSubmit }) => {\r\n  // const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={'message'}\r\n          placeholder={'Enter your message'}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add message</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<DialogMessageFormType>({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n","import styles from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport React from 'react';\r\n// import { Redirect } from 'react-router';\r\nimport { AddMessageFormRedux } from './AddMessageForm/AddMessageForm';\r\n// import { reduxForm } from 'redux-form';\r\nimport { DialogsType, MessagesType } from '../../types/types'\r\n// import InitialStateType from '../../redux/dialog-reducer'\r\n\r\n\r\n// const AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n\r\ntype PropsType = {\r\n  dialogs: DialogsType[],\r\n  messages: MessagesType[],\r\n  // isAuth: boolean\r\n  addMessage: (message: string) => void,\r\n}\r\nexport type DialogMessageFormType = {\r\n  message: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = ({dialogs, messages, addMessage}) => {\r\n\r\n  const dialogsElements = dialogs.map((dialog: DialogsType, i: number) => (\r\n    <DialogItem key={i} name={dialog.name} id={dialog.id} />\r\n    // <DialogItem key={i} name={dialog.name} id={dialog.id} avatar={dialog.avatar} />\r\n  ));\r\n\r\n  const messagesElements = messages.map((m, i) => (\r\n    <Message key={i} message={m.message} id={m.id} />\r\n  ));\r\n\r\n  //в атрибуте value придут свойства как имена полей name у field\r\n  let addNewMassage = (value: DialogMessageFormType) => {\r\n    addMessage(value.message);\r\n  }; //add redux-form//передаем в колбэк значение поля ввода и далее диспачим его в стейт\r\n\r\n  // if (!isAuth) return <Redirect to={'/login'} />; //если пользователь не залогинен(пришедший в пропсах isAuth === false) то закрываем ему доступ к dialogs и перенаправляем на страницу логина\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogsItems}>{dialogsElements}</div>\r\n      <div className={styles.messages}>\r\n        <div className={styles.messagesUser}>{messagesElements}</div>\r\n        <AddMessageFormRedux onSubmit={addNewMassage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth, //вытаскиваем из стейта инфу залогинен или нет\r\n});\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n  const  RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/login'} />;\r\n\r\n    return <WrappedComponent {...restProps as WCP} />;\r\n  }\r\n\r\n  //конненктим к стору RedirectComponent которую создали внутри ХОКа, и возвращаем ее наружу\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n\r\n//те вызывая хок withAuthRedirect происходит двойное оборачивание(две конт комп одна в другой) коннект оборачивает редирект, а внутри будет сидеть целевая компонента\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  actions,\r\n} from '../../redux/dialog-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\n\r\n\r\n//connect в mstp отдаст стейт\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    // newMessageText: state.dialogsPage.newMessageText,\r\n  };\r\n};\r\n\r\n//колбэки\r\n//connect в mdtp засунет store.dispatch.bind(store)\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     addMessage: (message) => {\r\n//       dispatch(actions.addMessage(message));\r\n//     },\r\n//   };\r\n// };\r\n\r\n//connect from react-redux\r\n//двойной вызов ()() -  вызываем функцию connect, она возвращает другую функцию и мы вызываем другую функцию, которую нам вернул предыдущий вызов\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);//add compose\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\n// export default DialogsContainer;//compose\r\n\r\n//оборачиваем compose (каждая функция примет один параметр, его возвращенное значение будет передано вышестоящей(слева) функции как аргумент), выполнение идет справа налево(снизу вверх)\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {...actions}), withAuthRedirect)(Dialogs);\r\n// export default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}