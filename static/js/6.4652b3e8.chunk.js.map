{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/Login/Login.module.css","components/Login/Login.jsx"],"names":["module","exports","FormControl","input","meta","props","child","hasError","touched","error","className","styles","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","loginFormWrapper","placeholder","name","component","validate","type","formSummaryError","src","alt","connect","state","isAuth","auth","login","to","stylesLogin","loginH1","formData","email","password","rememberMe","captcha","loginblock"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,iBAAmB,wCAAwC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,kOCCzKC,EAAc,SAAC,GAAqC,EAAnCC,MAAoC,IAA7BC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,MAAsB,kBACzDC,EAAWH,EAAKI,SAAWJ,EAAKK,MAEtC,OACE,sBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,IAAtE,UACE,8BAAMJ,EAAMQ,WACXN,GAAY,+BAAOH,EAAKK,YAKlBK,EAAW,SAACT,GACvB,IAAQF,EAAqCE,EAArCF,MAAuBY,GAAcV,EAA9BD,KAA8BC,EAAxBC,MAArB,YAA6CD,EAA7C,IAEA,OACE,cAACH,EAAD,2BAAiBG,GAAjB,aACE,oDAAcF,GAAWY,QAKlBC,EAAQ,SAACX,GACpB,IAAQF,EAAqCE,EAArCF,MAAuBY,GAAcV,EAA9BD,KAA8BC,EAAxBC,MAArB,YAA6CD,EAA7C,IAEA,OACE,cAACH,EAAD,2BAAiBG,GAAjB,aACE,iDAAWF,GAAWY,S,iCC5B5B,oEAAO,IAAME,EAAW,SAACC,GACvB,IAAIA,EACJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCLzCpB,EAAOC,QAAU,CAAC,QAAU,uBAAuB,WAAa,4B,iCCDhE,iHAgDMqB,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EAvCL,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAchB,EAAwB,EAAxBA,MAAOiB,EAAiB,EAAjBA,WACxC,OACE,uBAAMC,SAAUF,EAAcf,UAAWC,IAAOiB,iBAAhD,UACE,8BACE,cAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAWf,IAAOgB,SAAU,CAACf,SAE3E,8BACE,cAAC,IAAD,CACEY,YAAa,WACbC,KAAM,WACNG,KAAM,WACNF,UAAWf,IACXgB,SAAU,CAACf,SAGf,8BACE,cAAC,IAAD,CAAOc,UAAWf,IAAOc,KAAM,aAAcG,KAAM,eAEpDxB,GAAS,qBAAKC,UAAWC,IAAOuB,iBAAvB,SAA0CzB,IACnDiB,GACC,gCACE,qBAAKS,IAAKT,EAAYU,IAAI,YAC1B,cAAC,IAAD,CAAOP,YAAa,UAAWC,KAAM,UAAWC,UAAWf,IAAOgB,SAAU,CAACf,UAGjF,8BACE,mDA0COoB,uBALS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,OACnBb,WAAYY,EAAME,KAAKd,cAGe,CAAEe,WAA3BJ,EA3BD,SAAChC,GAKb,OAAIA,EAAMkC,OACD,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACE,oBAAIhC,UAAWiC,IAAYC,QAA3B,mBACA,cAACtB,EAAD,CAAgBK,SAXH,SAACkB,GAChBxC,EAAMoC,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAUvCvB,WAAYrB,EAAMqB,aACtD,sBAAKhB,UAAWiC,IAAYO,WAA5B,UACE,+KACA,0DACA","file":"static/js/6.4652b3e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormWrapper\":\"FormsControls_loginFormWrapper__QJkSz\",\"formControl\":\"FormsControls_formControl__ZczVY\",\"error\":\"FormsControls_error__-uRCD\",\"formSummaryError\":\"FormsControls_formSummaryError__2HC3s\"};","import styles from './FormsControls.module.css';\r\n\r\nexport const FormControl = ({ input, meta, child, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// export const Textarea = ({ input, meta, ...props }) => {\r\n//   const hasError = meta.touched && meta.error;\r\n\r\n//   return (\r\n//     <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n//       <div>\r\n//         <textarea {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export const Input = ({ input, meta, ...props }) => {\r\n//   const hasError = meta.touched && meta.error;\r\n\r\n//   return (\r\n//     <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n//       <div>\r\n//         <input {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   );\r\n// };\r\n","export const required = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginH1\":\"Login_loginH1__21Npf\",\"loginblock\":\"Login_loginblock__34CEy\"};","import { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router';\r\nimport styles from '../common/FormsControls/FormsControls.module.css';\r\nimport stylesLogin from './Login.module.css';\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.loginFormWrapper}>\r\n      <div>\r\n        <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          placeholder={'Password'}\r\n          name={'password'}\r\n          type={'password'}\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field component={Input} name={'rememberMe'} type={'checkbox'} />\r\n      </div>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      {captchaUrl && ( //по условию наличия в стейте капчи покажем ее на странице формы\r\n        <div>\r\n          <img src={captchaUrl} alt='captcha' />\r\n          <Field placeholder={'captcha'} name={'captcha'} component={Input} validate={[required]} />\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n//handleSubmit выполнит следующие действия\r\n//e.preventDefault\r\n//get all form data and put them to object\r\n//props.onSubmit(formData)\r\n\r\n//unique name for the form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm);\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={stylesLogin.loginH1}>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n      <div className={stylesLogin.loginblock}>\r\n        <h2>Данные тестового аккаунта:</h2>\r\n        <p>Email: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"sourceRoot":""}