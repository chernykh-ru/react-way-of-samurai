{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","assets/images/avataaars.png","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","FormControl","input","meta","props","child","hasError","touched","error","className","styles","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","target","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","profileFormWrapper","Field","placeholder","name","component","type","Object","keys","contacts","map","key","contactsWrapper","stylesForm","formSummaryError","ProfileData","isOwner","fullName","aboutMe","userId","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","goToEditMode","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","userPhoto","src","photos","large","avataaars","alt","inputWrapper","files","id","inputFile","htmlFor","inputFileButton","inputFileButtonText","statusBlock","dataWrapper","initialValues","formData","then","Post","item","width","height","message","like","likeCounter","maxLength30","AddPostFormRedux","postBlock","validate","MyPosts","React","memo","postsElements","posts","reverse","p","i","postsBlock","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Number","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.ae5ab54c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormWrapper\":\"FormsControls_loginFormWrapper__QJkSz\",\"formControl\":\"FormsControls_formControl__ZczVY\",\"error\":\"FormsControls_error__-uRCD\",\"formSummaryError\":\"FormsControls_formSummaryError__2HC3s\"};","import styles from './FormsControls.module.css';\r\n\r\nexport const FormControl = ({ input, meta, child, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// export const Textarea = ({ input, meta, ...props }) => {\r\n//   const hasError = meta.touched && meta.error;\r\n\r\n//   return (\r\n//     <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n//       <div>\r\n//         <textarea {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export const Input = ({ input, meta, ...props }) => {\r\n//   const hasError = meta.touched && meta.error;\r\n\r\n//   return (\r\n//     <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n//       <div>\r\n//         <input {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   );\r\n// };\r\n","export const required = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1NNXR\",\"userPhoto\":\"ProfileInfo_userPhoto__yWMww\",\"statusBlock\":\"ProfileInfo_statusBlock__3SAiq\",\"inputWrapper\":\"ProfileInfo_inputWrapper__1ARM0\",\"inputFile\":\"ProfileInfo_inputFile__26GYr\",\"inputFileButton\":\"ProfileInfo_inputFileButton__ONqPO\",\"inputFileButtonText\":\"ProfileInfo_inputFileButtonText__3PLiH\",\"contactsWrapper\":\"ProfileInfo_contactsWrapper__2x99X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__tewBo\",\"like\":\"Post_like__uZX4v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1x4Hf\",\"postBlock\":\"MyPosts_postBlock__1zPAp\",\"posts\":\"MyPosts_posts__2Xfo7\"};","export default __webpack_public_path__ + \"static/media/avataaars.4186f5f3.png\";","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]); //принимает зависимость от статуса прищедшего в пропсах и синхронизирует статусы в ЛС и ГС\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    // setStatus(props.status); //сетаем статус из пропсов, чтобы инпут не обнулялся при переходе с других страниц\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status); //TC передаем статус(текущее значение поля инпута - сидящее в 'локальном' стейте)\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.target.value); //сетаем в ЛС хука текущее значение поля инпута\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode ? (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n        </div> //копия из ГС(пропсы)\r\n      ) : (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            autoFocus={true}\r\n            value={status}></input>\r\n        </div> //вначале копия из ЛС, во время изменения сохранение в локальном стейте обработчик onChange, после потери фокуса deactivateEditMode отпраялем данные на сервер, после ответа сервера меняется ГС и рендер статуса\r\n      )}\r\n    </div> //по условию показываем или статус или поле редактирования\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import styles from './ProfileInfo.module.css';\r\nimport stylesForm from './../../common/FormsControls/FormsControls.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.profileFormWrapper}>\r\n      <div>\r\n        <p>Full name: </p>\r\n        <Field placeholder={'Full name'} name={'fullName'} component={Input} />\r\n      </div>\r\n      <div>\r\n        <p>About me:</p>\r\n        <Field placeholder={'About me'} name={'aboutMe'} component={Input} />\r\n      </div>\r\n      <div>\r\n        <p>Looking for a job:</p>\r\n        <Field name={'lookingForAJob'} component={Input} type={'checkbox'} />\r\n      </div>\r\n      <div>\r\n        <p>About skils: </p>\r\n        <Field\r\n          placeholder={'about skills'}\r\n          name={'lookingForAJobDescription'}\r\n          component={Textarea}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>Contacts: </b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          //Метод Object.keys возвращает массив строковых элементов, соответствующих именам перечисляемых свойств, после мапим массив передавая в компонент ключ-значение\r\n          return (\r\n            <div key={key} className={styles.contactsWrapper}>\r\n              {key}: {<Field placeholder={key} name={'contacts.' + key} component={Input} />}\r\n            </div>\r\n          ); //обратимся к profile.contacts и прочитаем свойство по ключу[key](наподобие точечной нотации)\r\n        })}\r\n      </div>\r\n      {error && <div className={stylesForm.formSummaryError}>{error}</div>}\r\n      <button>Отправить</button>\r\n    </form>\r\n  );\r\n};\r\n\r\n//unique name for the form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst ProfileDataReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;\r\n","import Preloader from '../../common/preloader/Preloader';\r\nimport styles from './ProfileInfo.module.css';\r\nimport avataaars from '../../../assets/images/avataaars.png';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'; //следить за переименованием из FC в CC\r\nimport React, { useState } from 'react';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  // if (props.profile === null || props.profile === undefined)\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false); //при успешном без ошибоксабмите убираем режим редактирования\r\n    });\r\n    // console.log(formData);\r\n  };\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    // debugger;\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    } //проверяем что файлы прицепились и повесили на обработчик инпута колбэк TC\r\n  };\r\n  // debugger;\r\n  return (\r\n    <div>\r\n      <div className={styles.descriptionBlock}>\r\n        <img\r\n          className={styles.userPhoto}\r\n          src={profile.photos.large != null ? profile.photos.large : avataaars}\r\n          alt='user avatar'\r\n        />\r\n\r\n        {/* <div>{isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}</div> */}\r\n        <div className={styles.inputWrapper}>\r\n          {isOwner ? (\r\n            <div>\r\n              <input\r\n                type={'file'}\r\n                onChange={onMainPhotoSelected}\r\n                name='file'\r\n                id='input__file'\r\n                className={styles.inputFile}\r\n              />\r\n              <label htmlFor='input__file' className={styles.inputFileButton}>\r\n                <span className={styles.inputFileButtonText}>Выберите файл</span>\r\n              </label>\r\n            </div> //инпут спрятан за лейбл и стилизован под кнопку\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n        <div className={styles.statusBlock}>\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n        <div className={styles.dataWrapper}>\r\n          {!editMode ? (\r\n            <ProfileData profile={profile} isOwner={isOwner} setEditMode={setEditMode} />\r\n          ) : (\r\n            <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, setEditMode }) => {\r\n  // const goToEditMode = () => {\r\n  //   return setEditMode(true);\r\n  // };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>Full name: {profile.fullName}</p>\r\n      </div>\r\n      <div>\r\n        <p>About me: {profile.aboutMe}</p>\r\n      </div>\r\n      <div>\r\n        <p>User id: {profile.userId}</p>\r\n      </div>\r\n      <div>\r\n        <p>Looking for a job: {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n        {profile.lookingForAJob && (\r\n          <div>\r\n            <p>My skills: {profile.lookingForAJobDescription}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>Contacts: </b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          //Метод Object.keys возвращает массив строковых элементов, соответствующих именам перечисляемых свойств, после мапим массив передавая в компонент ключ-значение\r\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />; //обратимся к profile.contacts и прочитаем свойство по ключу[key](наподобие точечной нотации)\r\n        })}\r\n      </div>\r\n      <div>\r\n        {isOwner && <button onClick={(goToEditMode) => setEditMode(true)}>Edit profile</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={styles.contactsWrapper}>\r\n      <p>\r\n        {contactTitle}: {contactValue}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import styles from './Post.module.css';\r\n\r\nconst Post = (props) => (\r\n  <div className={styles.item}>\r\n    <img\r\n      src='https://e7.pngegg.com/pngimages/57/256/png-clipart-bender-philip-j-fry-computer-icons-leela-bender-smiley-cartoon.png'\r\n      width='60'\r\n      height='60'\r\n      alt='avatar'\r\n    />\r\n    <p>{props.message}</p>\r\n    <div className={styles.like}>\r\n      <img\r\n        src='https://w7.pngwing.com/pngs/49/109/png-transparent-facebook-like-button-giphy-social-network-advertising-facebook-text-hand-rectangle-thumbnail.png'\r\n        width='15'\r\n        height='15'\r\n        alt='like'\r\n      />\r\n      <span>{props.likeCounter}</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Post;\r\n","import Post from './Post/Post';\r\nimport styles from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst AddPostForm = (props) => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.postBlock}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={'newPostText'}\r\n          placeholder={'Enter your post text'}\r\n          validate={[required, maxLength30]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm({ form: 'postAddPostForm' })(AddPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  // debugger;\r\n  const postsElements = [...props.posts] //иммутабельность - меняем отображение постов на странице не затрагивая исходные данные, а делая копию и ее переворачивая\r\n    .reverse()\r\n    .map((p, i) => <Post key={i} message={p.message} likeCounter={p.likeCounter} />);\r\n\r\n  const addNewPost = (value) => {\r\n    props.addPost(value.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostFormRedux onSubmit={addNewPost} />\r\n      <div className={styles.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n}); //обернули ХОКом мемо, тест, решает проблему с лишними рендерами при неизменившихся пропсах и стейте\r\n\r\nexport default MyPosts;\r\n","import { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\n// import MyPosts from './MyPosts/MyPosts';\r\n// import classes from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n// import store from '../../redux/store';\r\n\r\nconst Profile = (props) => {\r\n  // debugger;\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer\r\n      // store={props.store}\r\n      // posts={props.profilePage.posts}\r\n      // dispatch={props.dispatch}\r\n      // newPostText={props.profilePage.newPostText}\r\n      // updateNewPostText={props.updateNewPostText}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router';\r\n// import { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId; //объявляем переменную userId которой присваиваем значение из пропсов(которые появились там после оборачивания ХОКом withRouter)\r\n    // let userId = this.props.match.params.userId || 20627;\r\n    if (!userId) {\r\n      userId = this.props.autorizedUserId;\r\n      // userId = 20627;//проверка что userId не null или undefined\r\n      if (!userId) {\r\n        this.props.history.push('/login');\r\n      } //если и в autorizedUserId нет userId тогда переадресация на Логин встроенным методом withRouter\r\n    }\r\n    this.props.getUserProfile(userId); //TC получения профиля\r\n    this.props.getStatus(userId); //TC получения статуса\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log('auth', this.props.autorizedUserId);\r\n    // console.log('params', Number(this.props.match.params.userId));\r\n\r\n    // debugger;\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // debugger;\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile(); //сравниваем текущие пропсы userId с прошлыми\r\n    }\r\n  } //с условием избегаем зациклености ререндеров при получении пропсов\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={\r\n          !this.props.match.params.userId ||\r\n          Number(this.props.match.params.userId) === this.props.autorizedUserId\r\n        } //если в строке URL есть Id, значит мы на чужой странице, если нет - на своей и можно будет загрузить аватар или проверим если Id это Id авторизированого юзера то тоже можно загрузить аватар\r\n        savePhoto={this.props.savePhoto}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        saveProfile={this.props.saveProfile} //TC сохранение данных профиля из redux-form\r\n      />\r\n    );\r\n  }\r\n}\r\n//profile={this.props.profile} выше передавать не обязательно, мы уже передаем все пропсы целиком через {...this.props}, сделано для наглядности\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile, //начать с initialState\r\n  status: state.profilePage.status, //начать с initialState\r\n  autorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\n//помещаем в withRouter обертку Auth\r\n// export default connect(mapStateToProps, { getUserProfile })(withRouter(AuthRedirectComponent));//add compose\r\n// export default connect(mapStateToProps, { getUserProfile })(withRouter(ProfileContainer));\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n  // withAuthRedirect,\r\n)(ProfileContainer); //add compose\r\n"],"sourceRoot":""}