{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","block","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","i","Message","message","id","ref","React","memo","src","photo","width","borderRadius","alt","userName","userId","setMessage","onChange","target","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"wMAeMA,EAAiB,WACrB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,IAGD,gCACc,UAAXN,GAAsB,0EACvB,cAACO,EAAD,IACA,cAACC,EAAD,QAKAD,EAAqB,WACzB,IAAME,EAAoBC,iBAAuB,MAC3CC,EAAWV,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YACjE,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAkBA,OANAV,qBAAU,WACW,IAAD,EAAdS,IACF,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAExE,CAACP,IAGF,sBAAKQ,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAlBhC,SAACC,GACrB,IAAIC,EAAUD,EAAEE,cACZC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAalC,UACGH,EAASoB,KAAI,SAACC,EAAQC,GAAT,OACZ,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAElB,qBAAKC,IAAK5B,QAKVyB,EAAqDI,IAAMC,MAAK,YAAkB,IAAfJ,EAAc,EAAdA,QACvE,OACE,gCACE,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAAEuB,MAAO,OAAQC,aAAc,OAASC,IAAI,YAC5E,8BAAIT,EAAQU,SAAZ,OACA,qCAAQV,EAAQW,UAChB,4BAAIX,EAAQA,UACZ,cAAC,IAAD,UAKA3B,EAA2B,WAC/B,MAA8BI,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBY,EAAhB,KACM/C,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDF,EAAWC,cASjB,OACE,gCACE,8BACE,0BAAUiD,SAAU,SAACzB,GAAD,OAAOwB,EAAWxB,EAAE0B,OAAOC,QAAQA,MAAOf,MAEhE,8BACE,wBAAQgB,SAAqB,YAAXnD,EAAsBoD,QAbnB,WACpBjB,IAGLrC,EAASuD,YAAYlB,IACrBY,EAAW,MAQP,wBAQOO,UA7FY,WACzB,OAAO,cAACzD,EAAD","file":"static/js/5.fa1a2155.chunk.js","sourcesContent":["import { Divider } from 'antd';\r\nimport React from 'react';\r\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ChatMessageAPIType } from '../../api/chat-api';\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../redux/chat-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nconst ChatPage: React.FC = () => {\r\n  return <Chat />;\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Some error occured. Please refresh page</div>}\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    let element = e.currentTarget;\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n  // useLayoutEffect(() => {\r\n  //   messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });\r\n  // }, [messages]);\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n      {messages.map((m: any, i) => (\r\n        <Message key={m.id} message={m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n  return (\r\n    <div>\r\n      <img src={message.photo} style={{ width: '40px', borderRadius: '50%' }} alt='message' />\r\n      <b>{message.userName} </b>\r\n      <b>id: {message.userId}</b>\r\n      <p>{message.message}</p>\r\n      <Divider />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = useState('');\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n  const dispatch = useDispatch();\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage(''); //зануялем\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea onChange={(e) => setMessage(e.target.value)} value={message}></textarea>\r\n      </div>\r\n      <div>\r\n        <button disabled={status === 'pending'} onClick={sendMessageHandler}>\r\n          send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}