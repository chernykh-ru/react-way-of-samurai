{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/News/News.module.css","components/Music/Music.module.css","components/Setings/Setings.module.css","components/Login/Login.module.css","api/profile-api.ts","redux/profile-reducer.ts","assets/images/avataaars.svg","redux/dialog-reducer.ts","api/api.ts","components/News/News.tsx","components/Music/Music.tsx","components/Setings/Setings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","components/Header/Header.tsx","redux/app-reducer.ts","hoc/withSuspense.tsx","App.tsx","reportWebVitals.js","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Users/Users.module.css","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["FormControl","input","meta","children","hasError","touched","error","className","styles","formControl","Textarea","props","restProps","Input","required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","response","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likeCounter","newPostText","actions","addPostActionCreator","type","setUserProfile","setStatus","savePhotoSuccess","photos","deletePost","postId","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodeEnum","Success","console","log","savePhoto","saveProfile","getState","auth","messages","stopSubmit","_error","Promise","reject","profileReducer","state","action","filter","p","dialogs","name","addMessage","dialogsReducer","ResultCodeForCaptchaEnam","axios","create","withCredentials","baseURL","News","wrapper","wrapper__item","Music","Setings","Paginator","totalItemsCount","pageSize","onPageChanged","x","currentPage","portionSize","pagesCount","Math","ceil","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","paginationBlockWrapper","paginationBlock","buttonPrev","onClick","disabled","page","map","event","pagination","selectedPage","buttonNext","User","followingInProgress","follow","unfollow","user","to","userPhoto","src","small","avataaars","alt","userButton","followed","some","getUsers","createSelector","usersPage","users","u","getPageSize","getCurrentPage","getUsersFilter","getIsFetching","isFetching","getFollowingInProgress","usersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","isSubmitting","as","usersAPI","then","post","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","totalUsersCount","payload","requestUsers","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","useDispatch","history","useHistory","location","useLocation","useEffect","pathname","search","parsed","URLSearchParams","parsedPage","parsedTerm","parsedFriend","actualPage","actualFilter","Number","_follow","bind","_unfollow","UsersPage","pageTitle","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","loginFormWrapper","Field","placeholder","component","formSummaryError","LoginPage","stylesLogin","loginH1","CaptchaIsRequired","loginblock","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","style","backgroundColor","icon","UserOutlined","initialized","appReducer","WrappedComponent","SubMenu","Menu","Content","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","Suspense","fallback","App","catchAllUnhandledErrors","e","this","initializeApp","window","addEventListener","removeEventListener","width","defaultOpenKeys","height","borderRight","title","MessageOutlined","NotificationOutlined","padding","margin","minHeight","path","exact","textAlign","Component","compose","withRouter","connect","app","promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","preloader"],"mappings":"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","file":"static/js/main.fae2065b.chunk.js","sourcesContent":["import { WrappedFieldProps, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\r\nimport styles from './FormsControls.module.css';\r\n\r\ntype FormControlPropsType = {\r\n  input: WrappedFieldInputProps\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ input, meta, children, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"News_wrapper__3YHyz\",\"wrapper__item\":\"News_wrapper__item__1eIyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Music_wrapper___hSbD\",\"wrapper__item\":\"Music_wrapper__item__267UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Setings_wrapper__uTzoH\",\"wrapper__item\":\"Setings_wrapper__item__1F9W6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginH1\":\"Login_loginH1__21Npf\",\"loginblock\":\"Login_loginblock__34CEy\"};","// import axios from 'axios';\r\nimport { ProfileType, PhotosType } from '../types/types'\r\nimport { instance, BasicResponseType } from './api'\r\n\r\ntype SavePhotoResponseType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile(userId: number | null) {\r\n    const response = await instance.get<ProfileType>(`profile/${userId}`);\r\n    return response.data;\r\n  },\r\n  async getStatus(userId: number | null) {\r\n    const response = await instance.get<string>(`profile/status/${userId}`);\r\n    return response.data;\r\n  },\r\n  async updateStatus(status: string) {\r\n    const response = await instance.put<BasicResponseType>(`profile/status`, { status: status }); //вторым параметром передаем объект json\r\n    return response.data;\r\n  },\r\n  async savePhoto(photoFile: File) {\r\n    const formData = new FormData(); //Конструктор FormData() создаёт новые объект FormData, если проще - HTML-форму//https://developer.mozilla.org/ru/docs/Web/API/FormData/FormData\r\n    formData.append('image', photoFile); //формируем formData по spec API\r\n    const response = await instance.put<BasicResponseType<SavePhotoResponseType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    }); //вторым параметром передаем formData, а третьим объект со спец заголовками(необязательно, его формирует форма)\r\n    return response.data;\r\n  },\r\n  async saveProfile(profile: ProfileType) {\r\n    const response = await instance.put<BasicResponseType>(`profile`, profile); //вторым параметром передаем объект json из redux-form\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// type ProfileAPIResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// } BasicResponseType\r\n\r\n// type SavePhotoResponseType = {\r\n//   data: {\r\n//     photos: PhotosType\r\n//   }\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n// }\r\n","import { ResultCodeEnum } from '../api/api';\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport {PostType, PhotosType, ProfileType} from '../types/types'\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\n// const ADD_POST = 'RWOS/PROFILE/ADD-POST'; //add redux-ducks\r\n// const SET_USERS_PROFILE = 'RWOS/PROFILE/SET_USERS_PROFILE';\r\n// const SET_STATUS = 'RWOS/PROFILE/SET_STATUS';\r\n// const SAVE_PHOTO_SUCCESS = 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS';\r\n// const DELETE_POST = 'RWOS/PROFILE/DELETE_POST';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likeCounter: 15 },\r\n    { id: 2, message: 'My first react post', likeCounter: 25 },\r\n    { id: 3, message: 'Yo', likeCounter: 5 },\r\n  ] as Array<PostType>,\r\n  newPostText: '' as string | null,\r\n  profile: null as unknown as ProfileType,\r\n  status: '' as string,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/PROFILE/ADD-POST':\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, { id: 4, message: action.newPostText, likeCounter: 0 }], //добавляем новый элемент в массив\r\n      };\r\n    case 'RWOS/PROFILE/DELETE_POST':\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId), //jest test\r\n      };\r\n    case 'RWOS/PROFILE/SET_USERS_PROFILE':\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case 'RWOS/PROFILE/SET_STATUS':\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    case 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS':\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string | null) => ({ type: 'RWOS/PROFILE/ADD-POST', newPostText } as const),\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'RWOS/PROFILE/SET_USERS_PROFILE', profile } as const),  \r\n  setStatus: (status: string) => ({ type: 'RWOS/PROFILE/SET_STATUS', status } as const),  \r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS', photos } as const),  \r\n  deletePost: (postId: number | null) => ({ type: 'RWOS/PROFILE/DELETE_POST', postId } as const), //jest test  \r\n}\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n// type ThunkType = BasicThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>//расширяем типами экшенов для redux-form\r\ntype ThunkType = BasicThunkType<ActionsTypes | FormAction>//расширяем типами экшенов для redux-form\r\n\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(data));\r\n}; //convert to async/await\r\n\r\n// export const getUserProfile = (userId) => {\r\n//   return (dispatch) => {\r\n//     usersAPI.getProfile(userId).then((data) => {\r\n//       dispatch(setUserProfile(data));\r\n//     });\r\n//   };\r\n// }; //with then\r\n\r\nexport const getStatus = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(data));\r\n}; //convert to async/await\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n      dispatch(actions.setStatus(status)); //после подверждения сервера сетаем себе статус\r\n    }\r\n  } catch (error) {\r\n    console.log('updateStatus error');\r\n  }\r\n}; //test try catch\r\n\r\nexport const savePhoto = (photoFile: File): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(photoFile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n    // dispatch(savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n  }\r\n};\r\n\r\n//TC отправка и получение данных профиля\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId; //в санку помимо диспача приходит стейт целиком, берем getState() и достаем из ветки auth нужный userId\r\n  // console.log(userId);\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getUserProfile(userId)); //диспачим id для получения новых данных с сервера после редатирования профиля\r\n  } else {\r\n    //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('edit-profile', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n    return Promise.reject(message); //решение с отображением ошибки формы\r\n  }\r\n};//Fix dispatch: any dispatch(stopSubmit('edit-profile', { _error: message }))\r\n\r\nexport default profileReducer;\r\n","export default __webpack_public_path__ + \"static/media/avataaars.68dca8f1.svg\";","import { InferActionsTypes } from './redux-store';\r\nimport { DialogsType, MessagesType } from '../types/types'\r\n\r\n// export type DialogsType = {\r\n//   id: number | null,\r\n//   name: string | null\r\n// }\r\n// export type MessagesType = {\r\n//   id: number | null,\r\n//   message: string | null\r\n// }\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    {\r\n      id: 1,\r\n      name: 'Andrew',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Dmitry',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Petya',\r\n    },\r\n    { id: 4, name: 'Sasha' },\r\n    { id: 5, name: 'Valera' },\r\n    { id: 6, name: 'Viktor' },\r\n  ] as DialogsType[],\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it?' },\r\n    { id: 3, message: 'I am fine' },\r\n  ] as MessagesType[],\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/DIALOG/ADD-MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 4, message: action.message }],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n//AC\r\nexport const actions = {\r\n  addMessage: (message: string) => ({ type: 'RWOS/DIALOG/ADD-MESSAGE', message } as const),\r\n}\r\n\r\nexport default dialogsReducer;\r\n","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  headers: { 'API-KEY': '6e65516f-e614-437d-93bf-9e85e40713b5' },\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n}); //создаем инстанс запроса(с параметрами запроса)\r\n\r\nexport enum ResultCodeEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}//added types for result code API\r\n\r\nexport enum ResultCodeForCaptchaEnam {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type BasicResponseType<D = {}, RC = ResultCodeEnum> = {\r\n  data: D\r\n  messages: string[]\r\n  resultCode: RC\r\n}\r\n\r\n// export type BasicResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// }\r\n","import styles from './News.module.css'\r\n\r\nconst News: React.FC = () => (\r\n  <div>\r\n    <p>News</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        News #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        News #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default News","import styles from './Music.module.css'\r\n\r\nconst Music: React.FC = () => (\r\n  <div>\r\n    <p>Music</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        Albums #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n      Albums #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Music","import styles from './Setings.module.css'\r\n\r\nconst Setings: React.FC = () => (\r\n  <div>\r\n    <p>Setings</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Setings","import styles from './Paginator.module.css';\r\nimport React, { useState } from 'react';\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number;\r\n  pageSize: number;\r\n  onPageChanged?: (page: number) => void; //?для теста\r\n  currentPage: number;\r\n  portionSize?: number; //'?' необязательный параметр\r\n}; //типизируем пропсы и ниже компонент: React.FC<Props>\r\n\r\nconst Paginator: React.FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  onPageChanged = (x) => x,\r\n  currentPage = 1,\r\n  portionSize = 10,\r\n}) => {\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize); //кол-во странииц\r\n  const portionCount = Math.ceil(pagesCount / portionSize); //кол-во порций\r\n  const [portionNumber, setPortionNumber] = useState<number>(Math.ceil(currentPage / portionSize)); //отслеживаем номер порции и его изменение//решение со сбросом порции при смене страницы\r\n  // let [portionNumber, setPortionNumber] = useState(1); //отслеживаем номер порции и его изменение\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //номер левого элемента порции\r\n  const rightPortionPageNumber = portionNumber * portionSize; //номер правого элемента порции\r\n  const pages: number[] = [];\r\n  // const pages: Array<number> = [];\r\n  for (let i = 1; i <= pagesCount; i++) pages.push(i);\r\n\r\n  return (\r\n    <div className={styles.paginationBlockWrapper}>\r\n      <div className={styles.paginationBlock}>\r\n        {portionNumber > 1 ? (\r\n          <button\r\n            className={styles.buttonPrev}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber - 1);\r\n            }}>\r\n            PREV\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>PREV</button>\r\n        )}\r\n        {pages\r\n          .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n          .map((page, id) => {\r\n            return (\r\n              <span\r\n                key={id}\r\n                onClick={(event) => {\r\n                  onPageChanged(page);\r\n                }}\r\n                className={`${styles.pagination} ${\r\n                  currentPage === page ? styles.selectedPage : ''\r\n                }`}>\r\n                {page}\r\n              </span>\r\n            );\r\n          })}\r\n        {portionNumber < portionCount ? (\r\n          <button\r\n            className={styles.buttonNext}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber + 1);\r\n            }}>\r\n            NEXT\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>NEXT</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import styles from './Users.module.css';\r\nimport avataaars from './../../../src/assets/images/avataaars.svg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {UsersType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n  followingInProgress: Array<number | null>,\r\n  user: UsersType,\r\n  follow: (userId: number | null) => void,\r\n  unfollow: (userId: number | null) => void,\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({ followingInProgress, follow, unfollow, user }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              className={styles.userPhoto}\r\n              src={user.photos.small != null ? user.photos.small : avataaars} //добавляем проверку, если с сервера не пришла аватарка, поставить заглушку\r\n              alt='avatar'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div className={styles.userButton}>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        <div>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </div>\r\n        <div>\r\n          {/* <div>{user.location.country}</div>\r\n                <div>{user.location.city}</div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { createSelector } from 'reselect';\r\nimport {AppStateType} from './redux-store'\r\n\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n}); //test reselec\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};//add formik term in URL\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n","// import styles from './Users.module.css';\r\nimport React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n  term: string;\r\n  friend: FriendFormType;\r\n};\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo(({ onFilterChanged }) => {\r\n  const filter = useSelector(getUsersFilter);\r\n\r\n  const submit = (\r\n    values: FormType,\r\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void },\r\n  ) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false,\r\n    };\r\n    onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize={true} //реинициальзация после отработки эффекта с квери параметрами\r\n        initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type='text' name='term' />\r\n            <Field name='friend' as='select'>\r\n              <option value='null'>All</option>\r\n              <option value='true'>Only followed</option>\r\n              <option value='false'>Only unfollowed</option>\r\n            </Field>\r\n            <button type='submit' disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default UsersSearchForm;\r\n","// import axios from 'axios';\r\nimport { UsersType } from '../types/types'\r\nimport { instance, BasicResponseType } from './api'\r\n\r\ntype GetUsersResponseType = {\r\n  items: UsersType[]\r\n  totalCount: number\r\n  error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n  // getUsers(currentPage: number, pageSize: number | null, term: string = '', friend: null | boolean = null) {\r\n    return instance //обращаемся уже к инстансу запроса\r\n      .get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))//add formik term and friend in URL\r\n      .then((response) => response.data); //промисом вернем не весь ответ а нужную часть data\r\n  },\r\n  async follow(userId: number | null) {\r\n    const response = await instance.post<BasicResponseType>(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  async unfollow(userId: number | null) {\r\n    const response = await instance.delete<BasicResponseType>(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// type FollowUnfollowResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// }//BasicResponseType\r\n\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n  return items.map((user: any) => {\r\n    if (user[objPropName] === itemId) {\r\n      return { ...user, ...newObjProps };\r\n    }\r\n    return user;\r\n  });\r\n};\r\n//в итоге вернет нам новый массив, в котором заменит, если найдет совпадение по objPropName из объекта с таким itemId, создаст копию объекта и заменит старые свойства деструктуризацией из новых свойств newObjProps\r\n","import { ResultCodeEnum, BasicResponseType } from '../api/api';\r\nimport { usersAPI} from '../api/users-api';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { UsersType} from '../types/types'\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { AppStateType, InferActionsTypes, BasicThunkType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UsersType>,\r\n  pageSize: 10 as number,\r\n  totalUsersCount: 0 as number,\r\n  currentPage: 1 as number,\r\n  isFetching: true as boolean,\r\n  followingInProgress: [] as Array<number | null>,//array of users Id\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean,\r\n  }//add formik in URL\r\n};\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/USERS/FOLLOW' :\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }),\r\n      };\r\n    case 'RWOS/USERS/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }),\r\n      };\r\n    case 'RWOS/USERS/SET_USERS': {\r\n      return {\r\n        ...state,\r\n        users: action.users, //перезатираем массив юзеров\r\n        // users: [...state.users, ...action.users],\r\n      }; //с сервера придут пользователи, мы должны взять старый стейт(сделать копию) и дополнить его новыми пользователями пришедшими из экшна (склеить два массива спред оператором)\r\n    }\r\n    case 'RWOS/USERS/SET_CURRENT_PAGE': {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/SET_FILTER': {\r\n      return {\r\n        ...state,\r\n        filter: action.payload,\r\n      };//add formik term in URL\r\n    }\r\n    case 'RWOS/USERS/SET_TOTAL_USERS_COUNT': {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/TOGGLE_IS_FETCHING': {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId] //если isF true добавляем в массив id из экшена\r\n          : state.followingInProgress.filter((id) => id !== action.userId), //если isF false фильтрация вернут новый массив\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// type ActionsTypes = InferActionsTypes<typeof actions>\r\n//выносим AC в объект\r\nexport const actions = {\r\n  followSuccess: (userId: number | null) => ({ type: 'RWOS/USERS/FOLLOW', userId } as const), //переименуем из-за thunkCreate\r\n  unfollowSuccess: (userId: number | null) => ({ type: 'RWOS/USERS/UNFOLLOW', userId }) as const, //переименуем из-за thunkCreate\r\n  setUsers: (users: Array<UsersType>) => ({ type: 'RWOS/USERS/SET_USERS', users } as const), //возьмем данные о юзерах с сервера и поместим их потом в стейт\r\n  setCurrentPage: (currentPage: number) => ({ type: 'RWOS/USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n  setFilter: (filter: FilterType) => ({ type: 'RWOS/USERS/SET_FILTER', payload: filter } as const),///add formik term in URL\r\n  setTotalUsersCount: (totalUsersCount: number) => ({\r\n    type: 'RWOS/USERS/SET_TOTAL_USERS_COUNT',\r\n    totalUsersCount, //когда ключ и значение не одинаковы(специально)\r\n  } as const),\r\n  toggleIsFetching: (isFetching: boolean) => ({\r\n    type: 'RWOS/USERS/TOGGLE_IS_FETCHING',\r\n    isFetching,\r\n  } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number | null) => ({\r\n    type: 'RWOS/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n    isFetching,\r\n    userId,\r\n  } as const),\r\n}\r\n\r\n//создаем функции thunk creator, которая создает(возвращает) thunk(dispatch action)\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch, getState) => {\r\n  dispatch(actions.toggleIsFetching(true)); //запрос ушел preloader виден\r\n  dispatch(actions.setCurrentPage(page)); //from onPageChanged(активная страница)\r\n  dispatch(actions.setFilter(filter));//add formik term in URL\r\n  const data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);//add formik term in URL\r\n  dispatch(actions.toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n  dispatch(actions.setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}; //remove page | null\r\n\r\n//рефакторинг, вынесение дублирующей логики из follow и unfollow в функцию followUnfollowFlow\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number | null, apiMethod: (userId: number | null) => Promise<BasicResponseType>, actionCreator: (userId: number | null) => ActionsTypes) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await apiMethod(userId);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actionCreator(userId));\r\n  } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId: number | null): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n};//типизируем TC по типу ThunkType\r\n\r\nexport const unfollow = (userId: number | null): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;\r\n","import styles from './Users.module.css';\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport UsersSearchForm from './UsersSearchForm';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { follow, unfollow, requestUsers, FilterType } from '../../redux/users-reducer';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getUsers,\r\n  getUsersFilter,\r\n} from '../../redux/users-selectors';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n// import * as queryString from 'querystring'//deprecated — Legacy\r\n\r\n// type QueryParamsType = {\r\n//   term?: string;\r\n//   page?: string;\r\n//   friend?: string;\r\n// };//querystring deprecated — Legacy\r\n\r\nexport const Users: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const totalUsersCount = useSelector((state: AppStateType) => state.usersPage.totalUsersCount); //example\r\n  const pageSize = useSelector(getPageSize); //from users-selectors\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const users = useSelector(getUsers);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n  useEffect(() => {\r\n    // const query: QueryParamsType = {};\r\n    // if (filter.term) query.term = filter.term;\r\n    // if (filter.friend !== null) query.friend = String(filter.friend);\r\n    // if (currentPage !== 1) query.page = String(currentPage);\r\n    //querystring deprecated — Legacy\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`,\r\n    });\r\n  }, [filter, currentPage]); //следим за изменением фильтра и текущей страницы в стейте и пушим в урл квери строку параметры\r\n\r\n  useEffect(() => {\r\n    const { search } = location;\r\n    const parsed = new URLSearchParams(search);\r\n    const parsedPage = parsed.get('page');\r\n    const parsedTerm = parsed.get('term');\r\n    const parsedFriend = parsed.get('friend');\r\n\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n    if (!!parsedPage) actualPage = Number(parsedPage);\r\n    if (!!parsedTerm) actualFilter = { ...actualFilter, term: parsedTerm };\r\n    if (parsedFriend)\r\n      actualFilter = {\r\n        ...actualFilter,\r\n        friend: parsedFriend === 'null' ? null : parsedFriend === 'true' ? true : false,\r\n      }; //..иммутабельно\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []); //парсим url строку, извлекаем query params, и если они есть иммутабельно меняем данные и диспачим уже параметры из урла, а не из стейта при первой загрузке страницы\r\n\r\n  const onPageChanged = (currentPage: number) => {\r\n    dispatch(requestUsers(currentPage, pageSize, filter));\r\n  };\r\n\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter)); //1 сброс страницы на первую при фильтрации\r\n  }; //add formik term in URL\r\n\r\n  const _follow = (userId: number | null) => {\r\n    dispatch(follow(userId));\r\n  };\r\n\r\n  const _unfollow = (userId: number | null) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Paginator //выносим логику пагинации в отдельный компонент, прокидываем пропсы\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        onPageChanged={onPageChanged}\r\n        currentPage={currentPage}\r\n      />\r\n      {users.map((user) => (\r\n        <div className={styles.wrapper} key={user.id}>\r\n          <User //выносим логику в компонент, прокидываем пропсы\r\n            followingInProgress={followingInProgress}\r\n            follow={_follow}\r\n            unfollow={_unfollow}\r\n            user={user}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Users } from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\nimport { useSelector } from 'react-redux';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\n\r\ntype PropsType = {\r\n  pageTitle: string;\r\n};\r\n\r\nexport const UsersPage: React.FC<PropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  // const isFetching = useSelector((state: AppStateType) => state.usersPage.isFetching);\r\n\r\n  return (\r\n    <>\r\n      <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n","import { instance, BasicResponseType, ResultCodeEnum, ResultCodeForCaptchaEnam } from './api'\r\n\r\n\r\ntype MeResponseDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    // const response = await instance.get<MeResponseType>(`auth/me`);\r\n    const response = await instance.get<BasicResponseType<MeResponseDataType>>(`auth/me`);\r\n    return response.data;\r\n  },\r\n  async login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n    // const response = await instance.post<LoginResponseType>(`auth/login`, {\r\n    const response = await instance.post<BasicResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnam>>(`auth/login`, {\r\n      email: email,\r\n      password: password,\r\n      rememberMe: rememberMe,\r\n      captcha: captcha,\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete<BasicResponseType>(`auth/login`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n//add BasicResponseType generic\r\n\r\n// type MeResponseType = {\r\n//   data: {\r\n//     id: number\r\n//     email: string\r\n//     login: string\r\n//   }\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n// }\r\n\r\n// type LoginResponseType = {\r\n//   resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n//   messages: string[]\r\n//   data: {\r\n//     userId: number\r\n//   }\r\n// }\r\n\r\n// type LogoutResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n\r\n","// import axios from 'axios';\r\nimport { instance } from './api'\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptchaUrl() {\r\n    const response = await instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);\r\n    return response.data;\r\n  },\r\n};","import { ResultCodeEnum, ResultCodeForCaptchaEnam } from '../api/api';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { FormAction, stopSubmit } from 'redux-form';//add @types/redux-form\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Action } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\n// const SET_USER_DATA = 'RWOS/AUTH/SET_USER_DATA'; //add redux-ducks\r\n// const SET_CAPTCHA_URL_SUCCESS = 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS';\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false as boolean, //isAuth флаг того, что юзер залогинен\r\n  captchaUrl: null as string | null, //по наличию капчи в стейте отображаем капчу и поле ввода в форме на странице логина\r\n}; //инициализируем стейт согласно данным из API response\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/AUTH/SET_USER_DATA': {\r\n      return {\r\n        ...state,\r\n        ...action.payload, //в экшене будет сидеть объект data,который мы деструктурируем\r\n      };\r\n    }\r\n    case 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// type ActionsTypes = SetAuthUserDataActionType | SetCaptchaUrlSuccessActionType\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean, captchaUrl: string | null = null) => ({\r\n    type: 'RWOS/AUTH/SET_USER_DATA',\r\n    payload: { userId, email, login, isAuth, captchaUrl },\r\n  } as const), //AC деструктурируем объект data до составляющих userId, email, login, isAuth true, зануляем капчу\r\n  setCaptchaUrlSuccess: (captchaUrl: string | null) => ({\r\n    type: 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS', //\r\n    captchaUrl,\r\n  } as const),\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsTypes | FormAction>//расширяем типами экшенов для redux-form\r\n// type ThunkType = BasicThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>//расширяем типами экшенов для redux-form\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.me();\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    const { id, email, login } = data.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true)); //isAuth true\r\n  }\r\n};//added TS API, ResultCodeEnum\r\n\r\n//TC to login and logout\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (data.resultCode === ResultCodeForCaptchaEnam.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    } //при ответе сервера 10 диспачим санку на получение капчи\r\n    // let action = stopSubmit('login', { email: 'Email is wrong' }); //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('login', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n  }//Fix dispatch: any dispatch(stopSubmit('login', { _error: message }))\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.logout();\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false)); //при логауте зануляем все данные и ставим флаг isAuth false\r\n  }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  dispatch(actions.setCaptchaUrlSuccess(data.url));\r\n}; //получаем капчу с сервера\r\n\r\nexport default authReducer;\r\n","import { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from '../common/FormsControls/FormsControls.module.css';\r\nimport stylesLogin from './Login.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null;\r\n}; //собственные пропсы формы\r\n//InjectedFormProps заинжекченый набор свойств redux-form(handleSubmit, error)\r\n//LoginFormValuesType свойства формы из полей\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.loginFormWrapper}>\r\n      <div>\r\n        <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          placeholder={'Password'}\r\n          name={'password'}\r\n          type={'password'}\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field component={Input} name={'rememberMe'} type={'checkbox'} />\r\n      </div>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      {captchaUrl && ( //по условию наличия в стейте капчи покажем ее на странице формы\r\n        <div>\r\n          <img src={captchaUrl} alt='captcha' />\r\n          <Field placeholder={'captcha'} name={'captcha'} component={Input} validate={[required]} />\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n//handleSubmit выполнит следующие действия\r\n//e.preventDefault\r\n//get all form data and put them to object\r\n//props.onSubmit(formData)\r\n\r\n//unique name for the form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(\r\n  LoginForm,\r\n);\r\n\r\ntype LoginFormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string | null;\r\n};\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { isAuth, captchaUrl } = useSelector(({ auth }: AppStateType) => auth);\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={stylesLogin.loginH1}>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n      <div className={stylesLogin.loginblock}>\r\n        <h2>Данные тестового аккаунта:</h2>\r\n        <p>Email: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nimport { Layout, Menu, Avatar, Row, Col, Button } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport const Header: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { login, isAuth } = useSelector(({ auth }: AppStateType) => auth);\r\n  const { Header } = Layout;\r\n  const _logout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Header className='header'>\r\n      <div className='logo' />\r\n      <Row>\r\n        <Col span={18}>\r\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\r\n            <Menu.Item key='1'>\r\n              <Link to='/users'>Developers</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Col>\r\n        {isAuth ? (\r\n          <>\r\n            <Col span={2}>\r\n              <Avatar\r\n                alt={login || ''}\r\n                style={{ backgroundColor: '#87d068' }}\r\n                icon={<UserOutlined />}\r\n              />\r\n            </Col>\r\n            <Col span={4}>\r\n              <Button onClick={_logout}>Log out</Button>\r\n            </Col>\r\n          </>\r\n        ) : (\r\n          <Col span={6}>\r\n            <Button>\r\n              <Link to={'/Login/'}>Login</Link>\r\n            </Button>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\n","import { getAuthUserData } from './auth-reducer';\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\nconst initialState = {\r\n  initialized: false as boolean,\r\n}; //инициализируем стейт, initialized флаг того, что юзер залогинен(нет)\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/APP/INITIALIZED_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        initialized: true, // isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};//TS редьюсер на входе и на выходе должен принять и вернуть state: InitialStateType\r\n\r\n\r\n//AC\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  initializedSuccess: () => ({\r\n    type: 'RWOS/APP/INITIALIZED_SUCCESS',\r\n  } as const)\r\n}\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\n\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n  let promise = dispatch(getAuthUserData()); //диспачим получение юзерских данных\r\n  //dispatch(somethingelse())//диспачим получение любых других данных\r\n  //и когда промис (в authAPI.me) зарезолвится, мы его здесь получим как результат promise и после этого мы задиспачим AC success\r\n  // promise.then(() => {dispatch(initializedSuccess())})//если промис один\r\n  Promise.all([promise]).then(() => dispatch(actions.initializedSuccess()));\r\n};\r\n\r\nexport default appReducer;\r\n","import React from 'react';\r\nimport Preloader from '../components/common/preloader/Preloader';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<Preloader />}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n};\r\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setings from './components/Setings/Setings';\r\nimport { UsersPage as UsersContainer } from './components/Users/UsersContainer';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\nimport { LoginPage } from './components/Login/LoginPage';\r\nimport { Header } from './components/Header/Header';\r\n// import HeaderContainer from './components/Header/HeaderContainer';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/preloader/Preloader';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { compose } from 'redux';\r\nimport { withSuspense } from './hoc/withSuspense';\r\n// import { BrowserRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages!!!\r\n// import { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import store from './redux/redux-store';\r\n// import { Provider } from 'react-redux';\r\nimport { Layout, Menu, Breadcrumb, Avatar, Row, Col } from 'antd';\r\nimport { UserOutlined, MessageOutlined, NotificationOutlined } from '@ant-design/icons';\r\nimport { Footer } from 'antd/lib/layout/layout';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Content, Sider } = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Ленивая загрузка\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n// const Login = React.lazy(() => import('./components/Login/Login'));\r\n\r\ntype MapStatePropsType = {\r\n  initialized: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer); //единожды при загрузке приложения оборачиваем в HOC withSuspense, и ниже отрисовываем уже обернутую компоненту\r\n\r\nclass App extends React.Component<PropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    console.log('Some error occured');\r\n    // console.error(promiseRejectionEvent);\r\n  }; //Событие unhandledrejection происходит, когда Promise завершён с ошибкой, но на данную ошибку не установлен обработчик.\r\n  // debugger;\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  } //переносим запрос из HeaderC\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <Layout>\r\n        <Header />\r\n        <Layout>\r\n          <Sider width={200} className='site-layout-background'>\r\n            <Menu\r\n              mode='inline'\r\n              defaultSelectedKeys={['1']}\r\n              defaultOpenKeys={['sub1']}\r\n              style={{ height: '100%', borderRight: 0 }}>\r\n              <SubMenu key='sub1' icon={<UserOutlined />} title='My profile'>\r\n                <Menu.Item key='1'>\r\n                  <Link to='/profile'>Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='2'>\r\n                  <Link to='/dialogs'>Messages</Link>\r\n                </Menu.Item>\r\n                {/* <Menu.Item key='3'>option3</Menu.Item>\r\n                <Menu.Item key='4'>option4</Menu.Item> */}\r\n              </SubMenu>\r\n              <SubMenu key='sub2' icon={<MessageOutlined />} title='Developers'>\r\n                <Menu.Item key='5'>\r\n                  <Link to='/users'>Users</Link>\r\n                </Menu.Item>\r\n                {/* <Menu.Item key='6'>option6</Menu.Item>\r\n                <Menu.Item key='7'>option7</Menu.Item>\r\n                <Menu.Item key='8'>option8</Menu.Item> */}\r\n              </SubMenu>\r\n              <SubMenu key='sub3' icon={<NotificationOutlined />} title='Media'>\r\n                <Menu.Item key='9'>\r\n                  <Link to='/news'>News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='10'>\r\n                  <Link to='/music'>Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='11'>\r\n                  <Link to='/setings'>Setings</Link>\r\n                </Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout style={{ padding: '0 24px 24px' }}>\r\n            {/* <Breadcrumb style={{ margin: '16px 0' }}>\r\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n              <Breadcrumb.Item>List</Breadcrumb.Item>\r\n              <Breadcrumb.Item>App</Breadcrumb.Item>\r\n            </Breadcrumb> */}\r\n            <Content\r\n              className='site-layout-background'\r\n              style={{\r\n                padding: 24,\r\n                margin: 0,\r\n                minHeight: 280,\r\n              }}>\r\n              <Suspense fallback={<Preloader />}>\r\n                <Route path='/profile/:userId?'>\r\n                  <ProfileContainer\r\n                  //:userId? опциональный параметр ХОКа withRouter\r\n                  />\r\n                </Route>\r\n                {/* <Route path='/dialogs'>\r\n              <DialogsContainer />//ниже с HOC withSuspense\r\n            </Route> */}\r\n              </Suspense>\r\n              <Route path='/dialogs'>\r\n                <SuspendedDialogs />\r\n              </Route>\r\n              <Route path='/login'>\r\n                <LoginPage />\r\n              </Route>\r\n              <Route path='/users'>\r\n                <UsersContainer pageTitle={'Самураи'} />\r\n              </Route>\r\n              <Route path='/news'>\r\n                <News />\r\n              </Route>\r\n              <Route path='/music'>\r\n                <Music />\r\n              </Route>\r\n              <Route path='/setings'>\r\n                <Setings />\r\n              </Route>\r\n              {/* <Route path='/' exact>\r\n            <Redirect to='/profile' />\r\n          </Route> */}\r\n              <Route exact path='/'>\r\n                {this.props.initialized ? <Redirect to='/profile' /> : <LoginPage />}\r\n              </Route>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>\r\n              developers social network © 2021 Created by chernykh.ru\r\n            </Footer>\r\n          </Layout>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n//  <Route path='/dialogs'//Suspense custom HOC\r\n// render = {() => withSuspense(DialogsContainer)} />\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized, //получаем из стейта флаг\r\n});\r\n\r\n// let AppContainer = compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App)\r\n\r\n// const SamuraiJSApp: React.FC = () => {\r\n//   return (\r\n//   <Router>\r\n//     <Provider store={store}>\r\n//       <AppContainer />\r\n//     </Provider>\r\n//   </Router>)\r\n// }//variant IT-Dimich\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp }),\r\n)(App);\r\n// export default withRouter(connect<MapStatePropsType, MapDispatchPropsType, AppStateType>(mapStateToProps, { initializeApp }))(App);\r\n// export default compose(withRouter, connect(mapStateToProps, { initializeApp })(App));//bug with compose\r\n\r\n// export default SamuraiJSApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { combineReducers, createStore, applyMiddleware, Action } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialog-reducer'; //add ts\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport appReducer from './app-reducer';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n//ключи из стейта, значения соответствующие редьюсеры(ветки нашего глобального стейта)\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;//(globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>//ReturnType утилита создает тип, состоящий из возвращаемого типа функции (самостоятельно определяет тип возвращаемый из <RootReducerType>) и присваиваем его AppStateType\r\n\r\n//Вывод типов из обекта actions, содержащего Action Creators\r\n// type PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n// export type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BasicThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n//A = A extends Action from redux(ActionsTypes)\r\n//R(возвращаемое значение) = Promise<void>//большинство санок нам ничего не возвращает(возвращает промис который ничем не резолвится), поэтому по умолчанию поставим R = Promise<void>\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n//создаем редаксовский стор с помощью функции createStore(cS мы отдаем закомбайненые редьюсеры)\r\n//добавляем промежуточный слой middleware thunk\r\n// let store = createStore(reducers, applyMiddleware(thunk));\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import SamuraiJSApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import { BrowserRouter as Router, Route } from 'react-router-dom';//заменен на HashRouter\r\nimport { Provider } from 'react-redux';\r\n\r\n// ReactDOM.render(<SamuraiJSApp />, document.getElementById('root'),\r\n// );//variant IT-Dimich\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Router>\r\n    {/* <Router basename={process.env.PUBLIC_URL}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3GS1A\",\"wrapper__item\":\"Users_wrapper__item__1cUQX\",\"userPhoto\":\"Users_userPhoto__22rSw\",\"userButton\":\"Users_userButton__1Rd_M\",\"pagination\":\"Users_pagination__9wTpd\",\"selectedPage\":\"Users_selectedPage__rTwP8\",\"preloader\":\"Users_preloader__13i_D\"};","export default __webpack_public_path__ + \"static/media/preloader.0703713f.svg\";","import React from 'react';\r\nimport styles from '../../Users/Users.module.css';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <>\r\n      <img className={styles.preloader} src={preloader} alt='is loading...' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlockWrapper\":\"Paginator_paginationBlockWrapper__35ZIW\",\"paginationBlock\":\"Paginator_paginationBlock__3Lv8U\",\"pagination\":\"Paginator_pagination__1RdNg\",\"selectedPage\":\"Paginator_selectedPage__2m9br\",\"buttonPrev\":\"Paginator_buttonPrev__1vSfq\",\"buttonNext\":\"Paginator_buttonNext__22tii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormWrapper\":\"FormsControls_loginFormWrapper__QJkSz\",\"formControl\":\"FormsControls_formControl__ZczVY\",\"error\":\"FormsControls_error__-uRCD\",\"formSummaryError\":\"FormsControls_formSummaryError__2HC3s\"};"],"sourceRoot":""}