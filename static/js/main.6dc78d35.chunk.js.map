{"version":3,"sources":["api/profile-api.ts","redux/profile-reducer.ts","api/api.ts","assets/images/avataaars.svg","redux/dialog-reducer.ts","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setings/Setings.tsx","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","App.tsx","hoc/withSuspense.tsx","reportWebVitals.js","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","components/Users/Users.module.css","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/News/News.module.css","components/Music/Music.module.css","components/Setings/Setings.module.css","components/Login/Login.module.css","components/Header/Header.module.css"],"names":["profileAPI","userId","instance","get","response","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likeCounter","newPostText","actions","addPostActionCreator","type","setUserProfile","setStatus","savePhotoSuccess","photos","deletePost","postId","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodeEnum","Success","console","log","savePhoto","saveProfile","getState","auth","messages","length","stopSubmit","_error","Promise","reject","profileReducer","state","action","filter","p","ResultCodeForCaptchaEnam","axios","create","withCredentials","baseURL","dialogs","name","addMessage","dialogsReducer","module","exports","Navbar","className","styles","nav","item","to","activeClassName","activeLink","News","wrapper","wrapper__item","Music","Setings","usersAPI","getUsers","currentPage","pageSize","then","follow","post","unfollow","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","map","user","users","totalUsersCount","isFetching","followingInProgress","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","paginationBlockWrapper","paginationBlock","buttonPrev","onClick","disabled","page","event","pagination","selectedPage","buttonNext","User","userPhoto","src","small","avataaars","alt","userButton","some","Users","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","requestUsers","this","pageTitle","Preloader","React","Component","compose","connect","bind","totalCount","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","loginFormWrapper","Field","placeholder","component","Input","validate","required","formSummaryError","CaptchaIsRequired","stylesLogin","loginH1","loginblock","Header","logout","header","HeaderContainer","initialized","appReducer","WrappedComponent","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","Suspense","fallback","App","catchAllUnhandledErrors","e","initializeApp","window","addEventListener","removeEventListener","path","exact","withRouter","app","promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","preloader","FormControl","input","meta","children","hasError","touched","formControl","Textarea","restProps","value","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.6dc78d35.chunk.js","sourcesContent":["// import axios from 'axios';\r\nimport { ProfileType, PhotosType } from '../types/types'\r\nimport { instance, BasicResponseType } from './api'\r\n\r\ntype SavePhotoResponseType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile(userId: number | null) {\r\n    const response = await instance.get<ProfileType>(`profile/${userId}`);\r\n    return response.data;\r\n  },\r\n  async getStatus(userId: number | null) {\r\n    const response = await instance.get<string>(`profile/status/${userId}`);\r\n    return response.data;\r\n  },\r\n  async updateStatus(status: string) {\r\n    const response = await instance.put<BasicResponseType>(`profile/status`, { status: status }); //вторым параметром передаем объект json\r\n    return response.data;\r\n  },\r\n  async savePhoto(photoFile: File) {\r\n    const formData = new FormData(); //Конструктор FormData() создаёт новые объект FormData, если проще - HTML-форму//https://developer.mozilla.org/ru/docs/Web/API/FormData/FormData\r\n    formData.append('image', photoFile); //формируем formData по spec API\r\n    const response = await instance.put<BasicResponseType<SavePhotoResponseType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    }); //вторым параметром передаем formData, а третьим объект со спец заголовками(необязательно, его формирует форма)\r\n    return response.data;\r\n  },\r\n  async saveProfile(profile: ProfileType) {\r\n    const response = await instance.put<BasicResponseType>(`profile`, profile); //вторым параметром передаем объект json из redux-form\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// type ProfileAPIResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// } BasicResponseType\r\n\r\n// type SavePhotoResponseType = {\r\n//   data: {\r\n//     photos: PhotosType\r\n//   }\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n// }\r\n","import { ResultCodeEnum } from '../api/api';\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport {PostType, PhotosType, ProfileType} from '../types/types'\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\n// const ADD_POST = 'RWOS/PROFILE/ADD-POST'; //add redux-ducks\r\n// const SET_USERS_PROFILE = 'RWOS/PROFILE/SET_USERS_PROFILE';\r\n// const SET_STATUS = 'RWOS/PROFILE/SET_STATUS';\r\n// const SAVE_PHOTO_SUCCESS = 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS';\r\n// const DELETE_POST = 'RWOS/PROFILE/DELETE_POST';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likeCounter: 15 },\r\n    { id: 2, message: 'My first react post', likeCounter: 25 },\r\n    { id: 3, message: 'Yo', likeCounter: 5 },\r\n  ] as Array<PostType>,\r\n  newPostText: '' as string | null,\r\n  profile: null as unknown as ProfileType,\r\n  status: '' as string,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/PROFILE/ADD-POST':\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, { id: 4, message: action.newPostText, likeCounter: 0 }], //добавляем новый элемент в массив\r\n      };\r\n    case 'RWOS/PROFILE/DELETE_POST':\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId), //jest test\r\n      };\r\n    case 'RWOS/PROFILE/SET_USERS_PROFILE':\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case 'RWOS/PROFILE/SET_STATUS':\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    case 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS':\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string | null) => ({ type: 'RWOS/PROFILE/ADD-POST', newPostText } as const),\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'RWOS/PROFILE/SET_USERS_PROFILE', profile } as const),  \r\n  setStatus: (status: string) => ({ type: 'RWOS/PROFILE/SET_STATUS', status } as const),  \r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'RWOS/PROFILE/SAVE_PHOTO_SUCCESS', photos } as const),  \r\n  deletePost: (postId: number | null) => ({ type: 'RWOS/PROFILE/DELETE_POST', postId } as const), //jest test  \r\n}\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n// type ThunkType = BasicThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>//расширяем типами экшенов для redux-form\r\ntype ThunkType = BasicThunkType<ActionsTypes | FormAction>//расширяем типами экшенов для redux-form\r\n\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(data));\r\n}; //convert to async/await\r\n\r\n// export const getUserProfile = (userId) => {\r\n//   return (dispatch) => {\r\n//     usersAPI.getProfile(userId).then((data) => {\r\n//       dispatch(setUserProfile(data));\r\n//     });\r\n//   };\r\n// }; //with then\r\n\r\nexport const getStatus = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(data));\r\n}; //convert to async/await\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n      dispatch(actions.setStatus(status)); //после подверждения сервера сетаем себе статус\r\n    }\r\n  } catch (error) {\r\n    console.log('updateStatus error');\r\n  }\r\n}; //test try catch\r\n\r\nexport const savePhoto = (photoFile: File): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(photoFile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n    // dispatch(savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n  }\r\n};\r\n\r\n//TC отправка и получение данных профиля\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId; //в санку помимо диспача приходит стейт целиком, берем getState() и достаем из ветки auth нужный userId\r\n  // console.log(userId);\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getUserProfile(userId)); //диспачим id для получения новых данных с сервера после редатирования профиля\r\n  } else {\r\n    //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('edit-profile', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n    return Promise.reject(message); //решение с отображением ошибки формы\r\n  }\r\n};//Fix dispatch: any dispatch(stopSubmit('edit-profile', { _error: message }))\r\n\r\nexport default profileReducer;\r\n","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  headers: { 'API-KEY': '6e65516f-e614-437d-93bf-9e85e40713b5' },\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n}); //создаем инстанс запроса(с параметрами запроса)\r\n\r\nexport enum ResultCodeEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}//added types for result code API\r\n\r\nexport enum ResultCodeForCaptchaEnam {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type BasicResponseType<D = {}, RC = ResultCodeEnum> = {\r\n  data: D\r\n  messages: string[]\r\n  resultCode: RC\r\n}\r\n\r\n// export type BasicResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// }\r\n","export default __webpack_public_path__ + \"static/media/avataaars.68dca8f1.svg\";","import { InferActionsTypes } from './redux-store';\r\nimport { DialogsType, MessagesType } from '../types/types'\r\n\r\n// export type DialogsType = {\r\n//   id: number | null,\r\n//   name: string | null\r\n// }\r\n// export type MessagesType = {\r\n//   id: number | null,\r\n//   message: string | null\r\n// }\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    {\r\n      id: 1,\r\n      name: 'Andrew',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Dmitry',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Petya',\r\n    },\r\n    { id: 4, name: 'Sasha' },\r\n    { id: 5, name: 'Valera' },\r\n    { id: 6, name: 'Viktor' },\r\n  ] as DialogsType[],\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it?' },\r\n    { id: 3, message: 'I am fine' },\r\n  ] as MessagesType[],\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/DIALOG/ADD-MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 4, message: action.message }],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n//AC\r\nexport const actions = {\r\n  addMessage: (message: string) => ({ type: 'RWOS/DIALOG/ADD-MESSAGE', message } as const),\r\n}\r\n\r\nexport default dialogsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1sCY-\",\"item\":\"Navbar_item__1MKSx\",\"activeLink\":\"Navbar_activeLink__3vO2y\"};","import { NavLink } from 'react-router-dom';\r\nimport styles from './Navbar.module.css';\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <div className={styles.item}>\r\n        <NavLink to='/profile' activeClassName={styles.activeLink}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/dialogs' activeClassName={styles.activeLink}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/news' activeClassName={styles.activeLink}>\r\n          News\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/music' activeClassName={styles.activeLink}>\r\n          Music\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/users' activeClassName={styles.activeLink}>\r\n          Users\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/setings' activeClassName={styles.activeLink}>\r\n          Settings\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import styles from './News.module.css'\r\n\r\nconst News: React.FC = () => (\r\n  <div>\r\n    <p>News</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        News #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        News #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default News","import styles from './Music.module.css'\r\n\r\nconst Music: React.FC = () => (\r\n  <div>\r\n    <p>Music</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        Albums #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n      Albums #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Music","import styles from './Setings.module.css'\r\n\r\nconst Setings: React.FC = () => (\r\n  <div>\r\n    <p>Setings</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Setings","// import axios from 'axios';\r\nimport { UsersType } from '../types/types'\r\nimport { instance, BasicResponseType } from './api'\r\n\r\ntype GetUsersResponseType = {\r\n  items: UsersType[]\r\n  totalCount: number\r\n  error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage: number, pageSize: number | null) {\r\n    return instance //обращаемся уже к инстансу запроса\r\n      .get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then((response) => response.data); //промисом вернем не весь ответ а нужную часть data\r\n  },\r\n  async follow(userId: number) {\r\n    const response = await instance.post<BasicResponseType>(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  async unfollow(userId: number) {\r\n    const response = await instance.delete<BasicResponseType>(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// type FollowUnfollowResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n// }//BasicResponseType\r\n\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n  return items.map((user: any) => {\r\n    if (user[objPropName] === itemId) {\r\n      return { ...user, ...newObjProps };\r\n    }\r\n    return user;\r\n  });\r\n};\r\n//в итоге вернет нам новый массив, в котором заменит, если найдет совпадение по objPropName из объекта с таким itemId, создаст копию объекта и заменит старые свойства деструктуризацией из новых свойств newObjProps\r\n","import { ResultCodeEnum } from '../api/api';\r\nimport { usersAPI} from '../api/users-api';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { UsersType} from '../types/types'\r\nimport { AppStateType, InferActionsTypes, BasicThunkType } from './redux-store';\r\nimport { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UsersType>,\r\n  pageSize: 10 as number,//remove | null\r\n  totalUsersCount: 0 as number,//remove | null\r\n  currentPage: 1 as number,//remove | null\r\n  isFetching: true as boolean,\r\n  followingInProgress: [] as Array<number | null>,//array of users Id\r\n};\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/USERS/FOLLOW' :\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }),\r\n      };\r\n    case 'RWOS/USERS/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }),\r\n      };\r\n    case 'RWOS/USERS/SET_USERS': {\r\n      return {\r\n        ...state,\r\n        users: action.users, //перезатираем массив юзеров\r\n        // users: [...state.users, ...action.users],\r\n      }; //с сервера придут пользователи, мы должны взять старый стейт(сделать копию) и дополнить его новыми пользователями пришедшими из экшна (склеить два массива спред оператором)\r\n    }\r\n    case 'RWOS/USERS/SET_CURRENT_PAGE': {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/SET_TOTAL_USERS_COUNT': {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/TOGGLE_IS_FETCHING': {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    }\r\n    case 'RWOS/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId] //если isF true добавляем в массив id из экшена\r\n          : state.followingInProgress.filter((id) => id !== action.userId), //если isF false фильтрация вернут новый массив\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// type ActionsTypes = InferActionsTypes<typeof actions>\r\n//выносим AC в объект\r\nexport const actions = {\r\n  followSuccess: (userId: number | null) => ({ type: 'RWOS/USERS/FOLLOW', userId } as const), //переименуем из-за thunkCreate\r\n  unfollowSuccess: (userId: number | null) => ({ type: 'RWOS/USERS/UNFOLLOW', userId }) as const, //переименуем из-за thunkCreate\r\n  setUsers: (users: Array<UsersType>) => ({ type: 'RWOS/USERS/SET_USERS', users } as const), //возьмем данные о юзерах с сервера и поместим их потом в стейт\r\n  setCurrentPage: (currentPage: number) => ({ type: 'RWOS/USERS/SET_CURRENT_PAGE', currentPage } as const),//remove | null\r\n  setTotalUsersCount: (totalUsersCount: number) => ({\r\n    type: 'RWOS/USERS/SET_TOTAL_USERS_COUNT',\r\n    totalUsersCount, //когда ключ и значение не одинаковы(специально)\r\n  } as const),//remove | null\r\n  toggleIsFetching: (isFetching: boolean) => ({\r\n    type: 'RWOS/USERS/TOGGLE_IS_FETCHING',\r\n    isFetching,\r\n  } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number | null) => ({\r\n    type: 'RWOS/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n    isFetching,\r\n    userId,\r\n  } as const),\r\n}\r\n\r\n//создаем функции thunk creator, которая создает(возвращает) thunk(dispatch action)\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number | null): ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes> => async (dispatch, getState) => {\r\n  dispatch(actions.setCurrentPage(page)); //from onPageChanged(активная страница)\r\n  dispatch(actions.toggleIsFetching(true)); //запрос ушел preloader виден\r\n  const data = await usersAPI.getUsers(page, pageSize);\r\n  dispatch(actions.toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n  dispatch(actions.setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}; //remove page | null\r\n\r\n//рефакторинг, вынесение дублирующей логики из follow и unfollow в функцию followUnfollowFlow\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number | null, apiMethod: any, actionCreator: (userId: number | null) => ActionsTypes) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await apiMethod(userId);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actionCreator(userId));\r\n  } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId: number | null): ThunkType => async (dispatch) => {\r\n  _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n};//типизируем TC по типу ThunkType\r\n\r\nexport const unfollow = (userId: number | null): ThunkType => async (dispatch) => {\r\n  _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;\r\n","import styles from './Paginator.module.css';\r\nimport React, { useState } from 'react';\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number,\r\n  pageSize: number,\r\n  onPageChanged?: (page: number) => void,//?для теста\r\n  currentPage: number,\r\n  portionSize?: number//'?' необязательный параметр\r\n}//типизируем пропсы и ниже компонент: React.FC<Props>\r\n\r\nconst Paginator: React.FC<PropsType> = ({ totalItemsCount, pageSize, onPageChanged = x => x, currentPage = 1, portionSize = 10 }) => {\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize); //кол-во странииц\r\n  const portionCount = Math.ceil(pagesCount / portionSize); //кол-во порций\r\n  const [portionNumber, setPortionNumber] = useState<number>(Math.ceil(currentPage / portionSize)); //отслеживаем номер порции и его изменение//решение со сбросом порции при смене страницы\r\n  // const [portionNumber, setPortionNumber] = useState(1); //отслеживаем номер порции и его изменение\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //номер левого элемента порции\r\n  const rightPortionPageNumber = portionNumber * portionSize; //номер правого элемента порции\r\n  const pages: number[] = [];\r\n  // const pages: Array<number> = [];\r\n  for (let i = 1; i <= pagesCount; i++) pages.push(i);\r\n\r\n  return (\r\n    <div className={styles.paginationBlockWrapper}>\r\n      <div className={styles.paginationBlock}>\r\n        {portionNumber > 1 ? (\r\n          <button\r\n            className={styles.buttonPrev}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber - 1);\r\n            }}>\r\n            PREV\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>PREV</button>\r\n        )}\r\n        {pages\r\n          .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n          .map((page, id) => {\r\n            return (\r\n              <span\r\n                key={id}\r\n                onClick={(event) => {\r\n                  onPageChanged(page);\r\n                }}\r\n                className={`${styles.pagination} ${\r\n                  currentPage === page ? styles.selectedPage : ''\r\n                }`}>\r\n                {page}\r\n              </span>\r\n            );\r\n          })}\r\n        {portionNumber < portionCount ? (\r\n          <button\r\n            className={styles.buttonNext}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber + 1);\r\n            }}>\r\n            NEXT\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>NEXT</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import styles from './Users.module.css';\r\nimport avataaars from './../../../src/assets/images/avataaars.svg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {UsersType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n  followingInProgress: Array<number | null>,\r\n  user: UsersType,\r\n  follow: (userId: number | null) => void,\r\n  unfollow: (userId: number | null) => void,\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({ followingInProgress, follow, unfollow, user }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              className={styles.userPhoto}\r\n              src={user.photos.small != null ? user.photos.small : avataaars} //добавляем проверку, если с сервера не пришла аватарка, поставить заглушку\r\n              alt='avatar'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div className={styles.userButton}>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        <div>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </div>\r\n        <div>\r\n          {/* <div>{user.location.country}</div>\r\n                <div>{user.location.city}</div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import styles from './Users.module.css';\r\nimport React from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport {UsersType} from '../../types/types'\r\n\r\n\r\ntype PropsType = {\r\n  totalUsersCount: number,\r\n  pageSize: number,\r\n  onPageChanged: (page: number) => void,\r\n  currentPage: number,\r\n  users: Array<UsersType>,\r\n  followingInProgress: Array<number | null>,\r\n  follow: (userId: number | null) => void,\r\n  unfollow: (userId: number | null) => void,\r\n}\r\n\r\nconst Users: React.FC<PropsType> = ({\r\n  totalUsersCount,\r\n  pageSize,\r\n  onPageChanged,\r\n  currentPage,\r\n  users,\r\n  followingInProgress,\r\n  follow,\r\n  unfollow,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Paginator //выносим логику пагинации в отдельный компонент, прокидываем пропсы\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        onPageChanged={onPageChanged}\r\n        currentPage={currentPage}\r\n        />\r\n      {users.map((user) => (\r\n        <div className={styles.wrapper} key={user.id}>\r\n          <User //выносим логику в компонент, прокидываем пропсы\r\n            followingInProgress={followingInProgress}\r\n            follow={follow}\r\n            unfollow={unfollow}\r\n            user={user}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { createSelector } from 'reselect';\r\nimport {AppStateType} from './redux-store'\r\n\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n}); //test reselec\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  follow,\r\n  unfollow,\r\n  requestUsers,\r\n  // setCurrentPage,\r\n  // toggleFollowingProgress,\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\nimport { compose } from 'redux';\r\nimport {\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getCurrentPage,\r\n  getTotalUsersCount,\r\n  getPageSize,\r\n  getUsers,\r\n} from '../../redux/users-selectors';\r\nimport {UsersType} from '../../types/types'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\ntype MapStatePropsType = {\r\n  totalUsersCount: number,\r\n  pageSize: number,\r\n  currentPage: number,\r\n  users: UsersType[],\r\n  followingInProgress: Array<number | null>,\r\n  isFetching: boolean,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  follow: (userId: number | null) => void,\r\n  unfollow: (userId: number | null) => void,\r\n  requestUsers: (currentPage: number, pageSize: number) => void,\r\n  // onPageChanged: (currentPage: number) => void,\r\n  // setCurrentPage: (currentPage: number) => void,\r\n  // toggleFollowingProgress: (isFetching: boolean, userId: number | null) => void,\r\n}\r\n\r\ntype OwnPropsType = {\r\n  pageTitle: string,//\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\n// type PropsType = {\r\n//   pageTitle: string,//\r\n//   totalUsersCount: number,\r\n//   pageSize: number,\r\n//   currentPage: number,\r\n//   users: Array<UsersType>,\r\n//   followingInProgress: Array<number | null>,\r\n//   isFetching: boolean,\r\n//   follow: () => void,\r\n//   unfollow: () => void,\r\n//   onPageChanged: (currentPage: number) => void,\r\n//   requestUsers: (currentPage: number, pageSize: number) => void,\r\n// }\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n  componentDidMount() {\r\n    const {currentPage, pageSize} = this.props\r\n    this.props.requestUsers(currentPage, pageSize);\r\n  }\r\n\r\n  onPageChanged = (currentPage: number) => {\r\n    this.props.requestUsers(currentPage, this.props.pageSize);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2>{this.props.pageTitle}</h2>\r\n        {this.props.isFetching ? (\r\n          <Preloader /> //вынесли компоненту в common/preloader\r\n        ) : null}\r\n        <Users\r\n          totalUsersCount={this.props.totalUsersCount}\r\n          pageSize={this.props.pageSize}\r\n          currentPage={this.props.currentPage}\r\n          users={this.props.users}\r\n          onPageChanged={this.onPageChanged}\r\n          follow={this.props.follow}\r\n          unfollow={this.props.unfollow}\r\n          followingInProgress={this.props.followingInProgress}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  // debugger;\r\n  return {\r\n    users: getUsers(state), //test reselect\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    requestUsers,\r\n    // setCurrentPage,\r\n    // toggleFollowingProgress,\r\n  }),\r\n)(UsersContainer);\r\n","import { instance, BasicResponseType, ResultCodeEnum, ResultCodeForCaptchaEnam } from './api'\r\n\r\n\r\ntype MeResponseDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    // const response = await instance.get<MeResponseType>(`auth/me`);\r\n    const response = await instance.get<BasicResponseType<MeResponseDataType>>(`auth/me`);\r\n    return response.data;\r\n  },\r\n  async login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n    // const response = await instance.post<LoginResponseType>(`auth/login`, {\r\n    const response = await instance.post<BasicResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnam>>(`auth/login`, {\r\n      email: email,\r\n      password: password,\r\n      rememberMe: rememberMe,\r\n      captcha: captcha,\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete<BasicResponseType>(`auth/login`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n//add BasicResponseType generic\r\n\r\n// type MeResponseType = {\r\n//   data: {\r\n//     id: number\r\n//     email: string\r\n//     login: string\r\n//   }\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n// }\r\n\r\n// type LoginResponseType = {\r\n//   resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n//   messages: string[]\r\n//   data: {\r\n//     userId: number\r\n//   }\r\n// }\r\n\r\n// type LogoutResponseType = {\r\n//   resultCode: ResultCodeEnum\r\n//   messages: string[]\r\n//   data: {}\r\n\r\n","// import axios from 'axios';\r\nimport { instance } from './api'\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptchaUrl() {\r\n    const response = await instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);\r\n    return response.data;\r\n  },\r\n};","import { ResultCodeEnum, ResultCodeForCaptchaEnam } from '../api/api';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { FormAction, stopSubmit } from 'redux-form';//add @types/redux-form\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Action } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\n// const SET_USER_DATA = 'RWOS/AUTH/SET_USER_DATA'; //add redux-ducks\r\n// const SET_CAPTCHA_URL_SUCCESS = 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS';\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false as boolean, //isAuth флаг того, что юзер залогинен\r\n  captchaUrl: null as string | null, //по наличию капчи в стейте отображаем капчу и поле ввода в форме на странице логина\r\n}; //инициализируем стейт согласно данным из API response\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/AUTH/SET_USER_DATA': {\r\n      return {\r\n        ...state,\r\n        ...action.payload, //в экшене будет сидеть объект data,который мы деструктурируем\r\n      };\r\n    }\r\n    case 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// type ActionsTypes = SetAuthUserDataActionType | SetCaptchaUrlSuccessActionType\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean, captchaUrl: string | null = null) => ({\r\n    type: 'RWOS/AUTH/SET_USER_DATA',\r\n    payload: { userId, email, login, isAuth, captchaUrl },\r\n  } as const), //AC деструктурируем объект data до составляющих userId, email, login, isAuth true, зануляем капчу\r\n  setCaptchaUrlSuccess: (captchaUrl: string | null) => ({\r\n    type: 'RWOS/AUTH/SET_CAPTCHA_URL_SUCCESS', //\r\n    captchaUrl,\r\n  } as const),\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsTypes | FormAction>//расширяем типами экшенов для redux-form\r\n// type ThunkType = BasicThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>//расширяем типами экшенов для redux-form\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.me();\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    const { id, email, login } = data.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true)); //isAuth true\r\n  }\r\n};//added TS API, ResultCodeEnum\r\n\r\n//TC to login and logout\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha);\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (data.resultCode === ResultCodeForCaptchaEnam.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    } //при ответе сервера 10 диспачим санку на получение капчи\r\n    // let action = stopSubmit('login', { email: 'Email is wrong' }); //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('login', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n  }//Fix dispatch: any dispatch(stopSubmit('login', { _error: message }))\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.logout();\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false)); //при логауте зануляем все данные и ставим флаг isAuth false\r\n  }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  dispatch(actions.setCaptchaUrlSuccess(data.url));\r\n}; //получаем капчу с сервера\r\n\r\nexport default authReducer;\r\n","import { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from '../common/FormsControls/FormsControls.module.css';\r\nimport stylesLogin from './Login.module.css';\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null\r\n}//собственные пропсы формы\r\n//InjectedFormProps заинжекченый набор свойств redux-form(handleSubmit, error)\r\n//LoginFormValuesType свойства формы из полей\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.loginFormWrapper}>\r\n      <div>\r\n        <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          placeholder={'Password'}\r\n          name={'password'}\r\n          type={'password'}\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field component={Input} name={'rememberMe'} type={'checkbox'} />\r\n      </div>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      {captchaUrl && ( //по условию наличия в стейте капчи покажем ее на странице формы\r\n        <div>\r\n          <img src={captchaUrl} alt='captcha' />\r\n          <Field placeholder={'captcha'} name={'captcha'} component={Input} validate={[required]} />\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n//handleSubmit выполнит следующие действия\r\n//e.preventDefault\r\n//get all form data and put them to object\r\n//props.onSubmit(formData)\r\n\r\n//unique name for the form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm);\r\n\r\ntype LoginFormValuesType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\n\r\n// type LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>//ключи для кастомных функций\r\n\r\ntype PropsType = {\r\n  captchaUrl: string | null\r\n  isAuth: boolean\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void,\r\n}\r\n\r\nconst Login: React.FC<PropsType> = ({login, isAuth, captchaUrl}) => {\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={stylesLogin.loginH1}>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n      <div className={stylesLogin.loginblock}>\r\n        <h2>Данные тестового аккаунта:</h2>\r\n        <p>Email: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import styles from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n  isAuth: boolean,\r\n  login: string | null,\r\n  logout: () => void,\r\n}\r\n\r\nconst Header: React.FC<PropsType> = ({isAuth, login, logout}) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <div>\r\n      </div>\r\n      <div className={styles.login}>\r\n        {isAuth ? (\r\n          <div>\r\n            {login} <button onClick={logout}>Log out</button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to={'/Login/'}>Login</NavLink>\r\n        )}\r\n      </div>\r\n    </header> //isAuth true - покажем логин, иначе ссылку на залогинивание\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean,\r\n  login: string | null,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  logout: () => void,\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n  render() {\r\n    return <Header {...this.props} />; //пробрасываем все пропсы ниже в целевую компоненту\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  login: state.auth.login, //логин покажем после авторизации\r\n  isAuth: state.auth.isAuth, //флаг авторизации\r\n});\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, { logout })(HeaderContainer);\r\n","import { getAuthUserData } from './auth-reducer';\r\nimport { InferActionsTypes, BasicThunkType } from './redux-store';\r\n// import { Dispatch } from 'redux';\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\nconst initialState = {\r\n  initialized: false as boolean,\r\n}; //инициализируем стейт, initialized флаг того, что юзер залогинен(нет)\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'RWOS/APP/INITIALIZED_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        initialized: true, // isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};//TS редьюсер на входе и на выходе должен принять и вернуть state: InitialStateType\r\n\r\n\r\n//AC\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n  initializedSuccess: () => ({\r\n    type: 'RWOS/APP/INITIALIZED_SUCCESS',\r\n  } as const)\r\n}\r\n\r\n//TC\r\n// type GetStateType = () => AppStateType//создаем \"псевдоним\" типа для getState\r\n// type DispatchType = Dispatch<ActionsTypes>//создаем \"псевдоним\" типа для dispatch\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\ntype ThunkType = BasicThunkType<ActionsTypes>\r\n\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n  let promise = dispatch(getAuthUserData()); //диспачим получение юзерских данных\r\n  //dispatch(somethingelse())//диспачим получение любых других данных\r\n  //и когда промис (в authAPI.me) зарезолвится, мы его здесь получим как результат promise и после этого мы задиспачим AC success\r\n  // promise.then(() => {dispatch(initializedSuccess())})//если промис один\r\n  Promise.all([promise]).then(() => dispatch(actions.initializedSuccess()));\r\n};\r\n\r\nexport default appReducer;\r\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setings from './components/Setings/Setings';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\nimport Login from './components/Login/Login';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/preloader/Preloader';\r\nimport { AppStateType } from './redux/redux-store'\r\nimport { compose } from 'redux';\r\nimport { withSuspense } from './hoc/withSuspense'\r\n// import { BrowserRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages!!!\r\n// import { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import store from './redux/redux-store';\r\n// import { Provider } from 'react-redux';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Ленивая загрузка\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n// const Login = React.lazy(() => import('./components/Login/Login'));\r\n\r\ntype MapStatePropsType = {\r\n  initialized: boolean,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  initializeApp: () => void,\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)//единожды при загрузке приложения оборачиваем в HOC withSuspense, и ниже отрисовываем уже обернутую компоненту\r\n\r\nclass App extends React.Component<PropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    console.log('Some error occured');\r\n    // console.error(promiseRejectionEvent);\r\n  }; //Событие unhandledrejection происходит, когда Promise завершён с ошибкой, но на данную ошибку не установлен обработчик.\r\n  // debugger;\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  } //переносим запрос из HeaderC\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className='app-wrapper-content'>\r\n          <Suspense fallback={<Preloader />}>\r\n            <Route path='/profile/:userId?'>\r\n              <ProfileContainer\r\n              //:userId? опциональный параметр ХОКа withRouter\r\n              />\r\n            </Route>\r\n            {/* <Route path='/dialogs'>\r\n              <DialogsContainer />//ниже с HOC withSuspense\r\n            </Route> */}\r\n          </Suspense>\r\n          <Route path='/dialogs'>\r\n            <SuspendedDialogs />\r\n          </Route>\r\n          <Route path='/login'>\r\n            <Login />\r\n          </Route>\r\n          <Route path='/users'>\r\n            <UsersContainer pageTitle={'Самураи'} />\r\n          </Route>\r\n          <Route path='/news'>\r\n            <News />\r\n          </Route>\r\n          <Route path='/music'>\r\n            <Music />\r\n          </Route>\r\n          <Route path='/setings'>\r\n            <Setings />\r\n          </Route>\r\n          {/* <Route path='/' exact>\r\n            <Redirect to='/profile' />\r\n          </Route> */}\r\n          <Route exact path='/'>\r\n            {this.props.initialized ? <Redirect to='/profile' /> : <Login />}\r\n          </Route>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//  <Route path='/dialogs'//Suspense custom HOC\r\n// render = {() => withSuspense(DialogsContainer)} /> \r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized, //получаем из стейта флаг\r\n});\r\n\r\n// let AppContainer = compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App)\r\n\r\n// const SamuraiJSApp: React.FC = () => {\r\n//   return (\r\n//   <Router>\r\n//     <Provider store={store}>\r\n//       <AppContainer />\r\n//     </Provider>\r\n//   </Router>)\r\n// }//variant IT-Dimich\r\n\r\nexport default compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App)\r\n// export default withRouter(connect<MapStatePropsType, MapDispatchPropsType, AppStateType>(mapStateToProps, { initializeApp }))(App);\r\n// export default compose(withRouter, connect(mapStateToProps, { initializeApp })(App));//bug with compose\r\n\r\n// export default SamuraiJSApp\r\n","import React from 'react';\r\nimport Preloader from '../components/common/preloader/Preloader';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<Preloader />}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { combineReducers, createStore, applyMiddleware, Action } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialog-reducer'; //add ts\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport appReducer from './app-reducer';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n//ключи из стейта, значения соответствующие редьюсеры(ветки нашего глобального стейта)\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;//(globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>//ReturnType утилита создает тип, состоящий из возвращаемого типа функции (самостоятельно определяет тип возвращаемый из <RootReducerType>) и присваиваем его AppStateType\r\n\r\n//Вывод типов из обекта actions, содержащего Action Creators\r\n// type PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n// export type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BasicThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n//A = A extends Action from redux(ActionsTypes)\r\n//R(возвращаемое значение) = Promise<void>//большинство санок нам ничего не возвращает(возвращает промис который ничем не резолвится), поэтому по умолчанию поставим R = Promise<void>\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n//создаем редаксовский стор с помощью функции createStore(cS мы отдаем закомбайненые редьюсеры)\r\n//добавляем промежуточный слой middleware thunk\r\n// let store = createStore(reducers, applyMiddleware(thunk));\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import SamuraiJSApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import { BrowserRouter as Router, Route } from 'react-router-dom';//заменен на HashRouter\r\nimport { Provider } from 'react-redux';\r\n\r\n// ReactDOM.render(<SamuraiJSApp />, document.getElementById('root'),\r\n// );//variant IT-Dimich\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Router>\r\n    {/* <Router basename={process.env.PUBLIC_URL}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3GS1A\",\"wrapper__item\":\"Users_wrapper__item__1cUQX\",\"userPhoto\":\"Users_userPhoto__22rSw\",\"userButton\":\"Users_userButton__1Rd_M\",\"pagination\":\"Users_pagination__9wTpd\",\"selectedPage\":\"Users_selectedPage__rTwP8\",\"preloader\":\"Users_preloader__13i_D\"};","export default __webpack_public_path__ + \"static/media/preloader.0703713f.svg\";","import React from 'react';\r\nimport styles from '../../Users/Users.module.css';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <>\r\n      <img className={styles.preloader} src={preloader} alt='is loading...' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlockWrapper\":\"Paginator_paginationBlockWrapper__35ZIW\",\"paginationBlock\":\"Paginator_paginationBlock__3Lv8U\",\"pagination\":\"Paginator_pagination__1RdNg\",\"selectedPage\":\"Paginator_selectedPage__2m9br\",\"buttonPrev\":\"Paginator_buttonPrev__1vSfq\",\"buttonNext\":\"Paginator_buttonNext__22tii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormWrapper\":\"FormsControls_loginFormWrapper__QJkSz\",\"formControl\":\"FormsControls_formControl__ZczVY\",\"error\":\"FormsControls_error__-uRCD\",\"formSummaryError\":\"FormsControls_formSummaryError__2HC3s\"};","import { WrappedFieldProps, WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\r\nimport styles from './FormsControls.module.css';\r\n\r\ntype FormControlPropsType = {\r\n  input: WrappedFieldInputProps\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ input, meta, children, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"News_wrapper__3YHyz\",\"wrapper__item\":\"News_wrapper__item__1eIyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Music_wrapper___hSbD\",\"wrapper__item\":\"Music_wrapper__item__267UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Setings_wrapper__uTzoH\",\"wrapper__item\":\"Setings_wrapper__item__1F9W6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginH1\":\"Login_loginH1__21Npf\",\"loginblock\":\"Login_loginblock__34CEy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2IFrk\",\"login\":\"Header_login__6U0if\"};"],"sourceRoot":""}