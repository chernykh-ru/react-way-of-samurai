{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","styles","dialog","avatar","src","avataaars","alt","to","id","activeClassName","activeLink","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsElements","dialogs","map","i","messagesElements","messages","m","isAuth","dialogsItems","messagesUser","value","addMessage","newMessageText","mapStateToPropsForRedirect","state","auth","compose","connect","dialogsPage","dispatch","addMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,cAAgB,+BAA+B,OAAS,wBAAwB,aAAe,8BAA8B,eAAiB,gCAAgC,QAAU,2B,uGCoB1XC,EAjBI,SAACC,GAGlB,OACE,sBAAKC,UAAWC,IAAOC,OAAvB,UACE,qBACEF,UAAWC,IAAOE,OAClBC,IAAqB,MAAhBL,EAAMI,OAAiBJ,EAAMI,OAASE,IAC3CC,IAAI,WAEN,cAAC,IAAD,CAASC,GAAI,YAAcR,EAAMS,GAAIC,gBAAiBR,IAAOS,WAA7D,SACGX,EAAMY,WCTAC,EAJC,SAACb,GACf,OAAO,qBAAKC,UAAWC,IAAOY,QAAvB,SAAiCd,EAAMc,W,iDCC1CC,EAAcC,YAAiB,I,SCQ/BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EDNE,SAAClB,GAC7B,IAAQoB,EAAiBpB,EAAjBoB,aACR,OACE,uBAAMC,SAAUD,EAAhB,UACE,8BACE,cAACE,EAAA,EAAD,CACEC,UAAWC,IACXZ,KAAM,iBACNa,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAGzB,8BACE,yDCyBOa,EA9BC,SAAC5B,GAGf,IAAM6B,EAAkB7B,EAAM8B,QAAQC,KAAI,SAAC5B,EAAQ6B,GAAT,OACxC,cAAC,EAAD,CAAoBpB,KAAMT,EAAOS,KAAMH,GAAIN,EAAOM,GAAIL,OAAQD,EAAOC,QAApD4B,MAGbC,EAAmBjC,EAAMkC,SAASH,KAAI,SAACI,EAAGH,GAAJ,OAC1C,cAAC,EAAD,CAAiBlB,QAASqB,EAAErB,QAASL,GAAI0B,EAAE1B,IAA7BuB,MAShB,OAAKhC,EAAMoC,OAGT,sBAAKnC,UAAWC,IAAO4B,QAAvB,UACE,qBAAK7B,UAAWC,IAAOmC,aAAvB,SAAsCR,IACtC,sBAAK5B,UAAWC,IAAOgC,SAAvB,UACE,qBAAKjC,UAAWC,IAAOoC,aAAvB,SAAsCL,IACtC,cAAChB,EAAD,CAAqBI,SAZP,SAACkB,GAEnBvC,EAAMwC,WAAWD,EAAME,yBAGC,cAAC,IAAD,CAAUjC,GAAI,Y,uCC3BtCkC,EAA6B,SAACC,GAAD,MAAY,CAC3CP,OAAQO,EAAMC,KAAKR,S,QC2CNS,4BAAQC,aAtCD,SAACH,GACrB,MAAO,CACLb,QAASa,EAAMI,YAAYjB,QAC3BI,SAAUS,EAAMI,YAAYb,SAC5BO,eAAgBE,EAAMI,YAAYN,mBAOb,SAACO,GACxB,MAAO,CACLR,WAAY,SAAC1B,GACXkC,EAASC,YAAwBnC,UDhBP,SAACoC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAKpD,MAAMoC,OAET,cAACc,EAAD,eAAeE,KAAKpD,QAFI,cAAC,IAAD,CAAUQ,GAAI,eAHJ,GACb6C,IAAMH,WAWtC,OAFqCJ,YAAQJ,EAARI,CAAoCK,KC8B5DN,CAAwEjB","file":"static/js/4.0f2330ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2k5OF\",\"dialogsItems\":\"Dialogs_dialogsItems__1XTni\",\"dialog\":\"Dialogs_dialog__aU1X5\",\"activeLink\":\"Dialogs_activeLink__2ES73\",\"messages\":\"Dialogs_messages__2gINe\",\"avatarWrapper\":\"Dialogs_avatarWrapper__WbZwe\",\"avatar\":\"Dialogs_avatar__2Onne\",\"messagesUser\":\"Dialogs_messagesUser__2OOnJ\",\"messagesFriend\":\"Dialogs_messagesFriend__3wPpz\",\"message\":\"Dialogs_message__2DoC3\"};","import { NavLink } from 'react-router-dom';\r\nimport styles from './../Dialogs.module.css';\r\nimport avataaars from './../../../assets/images/avataaars.svg';\r\n\r\nconst DialogItem = (props) => {\r\n  // debugger\r\n\r\n  return (\r\n    <div className={styles.dialog}>\r\n      <img\r\n        className={styles.avatar}\r\n        src={props.avatar != null ? props.avatar : avataaars}\r\n        alt='avatar'\r\n      />\r\n      <NavLink to={'/dialogs/' + props.id} activeClassName={styles.activeLink}>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import styles from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n  return <div className={styles.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import { Field } from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMessageForm = (props) => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={'newMessageText'}\r\n          placeholder={'Enter your message'}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add message</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","// import { NavLink } from 'react-router-dom';\r\nimport styles from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router';\r\n// import { Field, reduxForm } from 'redux-form';\r\n// import { Textarea } from '../common/FormsControls/FormsControls';\r\n// import { required, maxLengthCreator } from '../../utils/validators/validators';\r\nimport { AddMessageForm } from './AddMessageForm/AddMessageForm';\r\nimport { reduxForm } from 'redux-form';\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n\r\nconst Dialogs = (props) => {\r\n  // debugger;\r\n\r\n  const dialogsElements = props.dialogs.map((dialog, i) => (\r\n    <DialogItem key={i} name={dialog.name} id={dialog.id} avatar={dialog.avatar} />\r\n  ));\r\n\r\n  const messagesElements = props.messages.map((m, i) => (\r\n    <Message key={i} message={m.message} id={m.id} />\r\n  ));\r\n\r\n  //в атрибуте value придут свойства как имена полей name у field\r\n  let addNewMassage = (value) => {\r\n    // console.log(value.newMessageText);\r\n    props.addMessage(value.newMessageText);\r\n  }; //add redux-form//передаем в колбэк значение поля ввода и далее диспачим его в стейт\r\n\r\n  if (!props.isAuth) return <Redirect to={'/login'} />; //если пользователь не залогинен(пришедший в пропсах isAuth === false) то закрываем ему доступ к dialogs и перенаправляем на страницу логина\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogsItems}>{dialogsElements}</div>\r\n      <div className={styles.messages}>\r\n        <div className={styles.messagesUser}>{messagesElements}</div>\r\n        <AddMessageFormRedux onSubmit={addNewMassage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth, //вытаскиваем из стейта инфу залогинен или нет\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={'/login'} />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  //конненктим к стору RedirectComponent которую создали внутри ХОКа, и возвращаем ее наружу\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n\r\n//те вызывая хок withAuthRedirect происходит двойное оборачивание(две конт комп одна в другой) коннект оборачивает редирект, а внутри будет сидеть целевая компонента\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  addMessageActionCreator,\r\n  // updateNewMessageTextActionCreator,//add redux-form\r\n} from '../../redux/dialog-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n//connect в mstp отдаст стейт\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    newMessageText: state.dialogsPage.newMessageText,\r\n    // isAuth: state.auth.isAuth, //вытаскиваем из стейта инфу залогинен или нет\r\n  };\r\n};\r\n\r\n//колбэки\r\n//connect в mdtp засунет store.dispatch.bind(store)\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (message) => {\r\n      dispatch(addMessageActionCreator(message));\r\n    }, //диспачим сообщение из redux-form //мы диспатчем не экшнкриэйтор, ЭК мы запускаем, он возвращает нам экшн(это объект у которого есть минимум тип) и мы диспатчем это вернувшийся экшн\r\n    // messageChange: (text) => {\r\n    //   dispatch(updateNewMessageTextActionCreator(text));\r\n    // },//add redux-form\r\n  };\r\n};\r\n\r\n//вызываем HOC с нужным параметром(передаем ему нужную целевую компоненту) получаем ответ AuthRedirectComponent и этот ответ мы закидываем целевой компонентой в коннект\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);//add compose\r\n// (props) => {\r\n//   if (!this.props.isAuth) return <Redirect to={'/login'} />;\r\n//   return <Dialogs {...props} />; //прокидываем все пропсы в целевую компоненту\r\n// };\r\n\r\n//connect from react-redux\r\n//двойной вызов ()() -  вызываем функцию connect, она возвращает другую функцию и мы вызываем другую функцию, которую нам вернул предыдущий вызов\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);//add compose\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\n//\r\n// export default DialogsContainer;//compose\r\n\r\n//оборачиваем compose (каждая функция примет один параметр, его возвращенное взначение будет передано вышестоящей(слева) функции как аргумент), выполнение идет справа налево(снизу вверх)\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}