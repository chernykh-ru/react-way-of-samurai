{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","assets/images/avataaars.png","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","useEffect","onChange","e","target","value","onBlur","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","profileFormWrapper","Field","placeholder","name","component","Input","type","Textarea","Object","keys","contacts","map","key","contactsWrapper","stylesForm","formSummaryError","ProfileData","isOwner","fullName","aboutMe","userId","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","goToEditMode","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","userPhoto","src","photos","large","avataaars","alt","inputWrapper","files","length","id","inputFile","htmlFor","inputFileButton","inputFileButtonText","statusBlock","dataWrapper","initialValues","formData","then","Post","props","item","width","height","message","like","likeCounter","maxLength30","maxLengthCreator","AddPostFormRedux","postBlock","validate","required","MyPosts","React","memo","posts","addPost","postsElements","reverse","p","i","postsBlock","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","Number","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.bf11d347.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1NNXR\",\"userPhoto\":\"ProfileInfo_userPhoto__yWMww\",\"statusBlock\":\"ProfileInfo_statusBlock__3SAiq\",\"inputWrapper\":\"ProfileInfo_inputWrapper__1ARM0\",\"inputFile\":\"ProfileInfo_inputFile__26GYr\",\"inputFileButton\":\"ProfileInfo_inputFileButton__ONqPO\",\"inputFileButtonText\":\"ProfileInfo_inputFileButtonText__3PLiH\",\"contactsWrapper\":\"ProfileInfo_contactsWrapper__2x99X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__tewBo\",\"like\":\"Post_like__uZX4v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1x4Hf\",\"postBlock\":\"MyPosts_postBlock__1zPAp\",\"posts\":\"MyPosts_posts__2Xfo7\"};","export default __webpack_public_path__ + \"static/media/avataaars.4186f5f3.png\";","import React, { useState, useEffect, ChangeEvent } from 'react';\r\n\r\ntype PropsType ={\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = ({status, updateStatus }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [localStatus, setLocalStatus] = useState(status);\r\n  // const [editMode, setEditMode] = useState<boolean>(false);\r\n  // const [localStatus, setLocalStatus] = useState<string | null>(status);\r\n\r\n  useEffect(() => {\r\n    setLocalStatus(status);\r\n  }, [status]); //принимает зависимость от статуса прищедшего в пропсах и синхронизирует статусы в ЛС и ГС\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    // setStatus(props.status); //сетаем статус из пропсов, чтобы инпут не обнулялся при переходе с других страниц\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(localStatus); //TC передаем статус(текущее значение поля инпута - сидящее в 'локальном' стейте)\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setLocalStatus(e.target.value); //сетаем в ЛС хука текущее значение поля инпута\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode ? (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>{status || '-----'}</span>\r\n        </div> //копия из ГС(пропсы)\r\n      ) : (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            autoFocus={true}\r\n            value={localStatus}></input>\r\n        </div> //вначале копия из ЛС, во время изменения сохранение в локальном стейте обработчик onChange, после потери фокуса deactivateEditMode отпраялем данные на сервер, после ответа сервера меняется ГС и рендер статуса\r\n      )}\r\n    </div> //по условию показываем или статус или поле редактирования\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import styles from './ProfileInfo.module.css';\r\nimport stylesForm from './../../common/FormsControls/FormsControls.module.css';\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { ProfileType } from '../../../types/types'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType,\r\n}//собственные пропсы формы\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.profileFormWrapper}>\r\n      <div>\r\n        <p>Full name: </p>\r\n        <Field placeholder={'Full name'} name={'fullName'} component={Input} />\r\n      </div>\r\n      <div>\r\n        <p>About me:</p>\r\n        <Field placeholder={'About me'} name={'aboutMe'} component={Input} />\r\n      </div>\r\n      <div>\r\n        <p>Looking for a job:</p>\r\n        <Field name={'lookingForAJob'} component={Input} type={'checkbox'} />\r\n      </div>\r\n      <div>\r\n        <p>About skils: </p>\r\n        <Field\r\n          placeholder={'about skills'}\r\n          name={'lookingForAJobDescription'}\r\n          component={Textarea}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>Contacts: </b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          //Метод Object.keys возвращает массив строковых элементов, соответствующих именам перечисляемых свойств, после мапим массив передавая в компонент ключ-значение\r\n          return (\r\n            <div key={key} className={styles.contactsWrapper}>\r\n              {key}: {<Field placeholder={key} name={'contacts.' + key} component={Input} />}\r\n            </div>\r\n          ); //обратимся к profile.contacts и прочитаем свойство по ключу[key](наподобие точечной нотации)\r\n        })}\r\n      </div>\r\n      {error && <div className={stylesForm.formSummaryError}>{error}</div>}\r\n      <button>Отправить</button>\r\n    </form>\r\n  );\r\n};\r\n\r\n// export type ProfileFormValuesType = {\r\n//   fullName: string | null,\r\n//   aboutMe: string | null,\r\n//   lookingForAJob: boolean,\r\n//   lookingForAJobDescription: string | null,\r\n// }\r\n\r\n//unique name form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;\r\n","import Preloader from '../../common/preloader/Preloader';\r\nimport styles from './ProfileInfo.module.css';\r\nimport avataaars from '../../../assets/images/avataaars.png';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'; //следить за переименованием из FC в CC\r\nimport React, { useState, ChangeEvent } from 'react';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\nimport { ProfileType, ContactsType } from '../../../types/types';\r\n// import { Input } from 'antd';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (photoFile: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  // if (props.profile === null || props.profile === undefined)\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    //todo: remove then\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false); //при успешном без ошибоксабмите убираем режим редактирования\r\n    });\r\n    // console.log(formData);\r\n  };\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // debugger;\r\n    if (e.target.files?.length) {\r\n      //?необязательный(в данном случае если он есть не null)\r\n      savePhoto(e.target.files[0]);\r\n    } //проверяем что файлы прицепились и повесили на обработчик инпута колбэк TC\r\n  };\r\n  // debugger;\r\n  return (\r\n    <div>\r\n      <div className={styles.descriptionBlock}>\r\n        <img\r\n          className={styles.userPhoto}\r\n          src={profile.photos.large != null ? profile.photos.large : avataaars}\r\n          alt='user avatar'\r\n        />\r\n\r\n        {/* <div>{isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}</div> */}\r\n        <div className={styles.inputWrapper}>\r\n          {isOwner ? (\r\n            <div>\r\n              {/* <Input\r\n                type={'file'}\r\n                size='small'\r\n                onChange={onMainPhotoSelected}\r\n                name='file'\r\n                allowClear\r\n                placeholder='input with clear icon'\r\n              /> */}\r\n              <input\r\n                type={'file'}\r\n                onChange={onMainPhotoSelected}\r\n                name='file'\r\n                id='input__file'\r\n                className={styles.inputFile}\r\n              />\r\n              <label htmlFor='input__file' className={styles.inputFileButton}>\r\n                <span className={styles.inputFileButtonText}>Обновите аватар</span>\r\n              </label>\r\n            </div> //инпут спрятан за лейбл и стилизован под кнопку\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n        <div className={styles.statusBlock}>\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n        <div className={styles.dataWrapper}>\r\n          {!editMode ? (\r\n            <ProfileData profile={profile} isOwner={isOwner} setEditMode={setEditMode} />\r\n          ) : (\r\n            <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataOwnPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  setEditMode: (arg: boolean) => void;\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataOwnPropsType> = ({ profile, isOwner, setEditMode }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>Full name: {profile.fullName}</p>\r\n      </div>\r\n      <div>\r\n        <p>About me: {profile.aboutMe}</p>\r\n      </div>\r\n      <div>\r\n        <p>User id: {profile.userId}</p>\r\n      </div>\r\n      <div>\r\n        <p>Looking for a job: {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n        {profile.lookingForAJob && (\r\n          <div>\r\n            <p>My skills: {profile.lookingForAJobDescription}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>Contacts: </b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          //Метод Object.keys возвращает массив строковых элементов, соответствующих именам перечисляемых свойств, после мапим массив передавая в компонент ключ-значение\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}\r\n            />\r\n          ); //обратимся к profile.contacts и прочитаем свойство по ключу[key](наподобие точечной нотации)\r\n        })}\r\n      </div>\r\n      <div>\r\n        {isOwner && <button onClick={(goToEditMode) => setEditMode(true)}>Edit profile</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string | null;\r\n  contactValue: string | null;\r\n};\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={styles.contactsWrapper}>\r\n      {contactValue && (\r\n        <p>\r\n          {contactTitle}: {contactValue}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import styles from './Post.module.css';\r\n\r\ntype PropsType = {\r\n  message: string | null,\r\n  likeCounter: number | null\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => (\r\n  <div className={styles.item}>\r\n    <img\r\n      src='https://e7.pngegg.com/pngimages/57/256/png-clipart-bender-philip-j-fry-computer-icons-leela-bender-smiley-cartoon.png'\r\n      width='60'\r\n      height='60'\r\n      alt='avatar'\r\n    />\r\n    <p>{props.message}</p>\r\n    <div className={styles.like}>\r\n      <img\r\n        src='https://w7.pngwing.com/pngs/49/109/png-transparent-facebook-like-button-giphy-social-network-advertising-facebook-text-hand-rectangle-thumbnail.png'\r\n        width='15'\r\n        height='15'\r\n        alt='like'\r\n      />\r\n      <span>{props.likeCounter}</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Post;\r\n","import Post from './Post/Post';\r\nimport styles from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport {PostType} from '../../../types/types'\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\ntype AddPostOwnProps = {\r\n}//для дальнейшего использования\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostValuesType & AddPostOwnProps> & AddPostOwnProps> = ({ handleSubmit}) => {\r\n  // const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.postBlock}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={'newPostText'}\r\n          placeholder={'Enter your post text'}\r\n          validate={[required, maxLength30]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\ntype AddPostValuesType = {\r\n  newPostText: string | null\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostValuesType>({ form: 'postAddPostForm' })(AddPostForm);\r\n\r\nexport type MapStatePropsType = {\r\n  posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  addPost: (newPostText: string | null) => void,\r\n\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst MyPosts: React.FC<PropsType> = React.memo(({posts, addPost}) => {\r\n  // debugger;\r\n  const postsElements = [...posts] //иммутабельность - меняем отображение постов на странице не затрагивая исходные данные, а делая копию и ее переворачивая(новые посты сверху)\r\n    .reverse()\r\n    .map((p, i) => <Post key={i} message={p.message} likeCounter={p.likeCounter} />);\r\n\r\n  const addNewPost = (value: AddPostValuesType) => {\r\n    addPost(value.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostFormRedux onSubmit={addNewPost} />\r\n      <div className={styles.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n}); //обернули ХОКом мемо, тест, решает проблему с лишними рендерами при неизменившихся пропсах и стейте\r\n\r\nexport default MyPosts;\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport MyPosts, {MapStatePropsType, MapDispatchPropsType} from './MyPosts';\r\nimport {AppStateType} from '../../../redux/redux-store'\r\n\r\n\r\n// type MapStatePropsType = {\r\n//   posts: PostType[]\r\n//   newPostText: string | null\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,//переделано на redux-form\r\n  }\r\n};\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     addPost: (newPostText) => {\r\n//       dispatch(actions.addPostActionCreator(newPostText));\r\n//     },\r\n//   };\r\n// };//используем сокращенный синтаксис в mDTP\r\n\r\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType,\r\n  status: string,\r\n  updateStatus: (status: string) => void,\r\n  isOwner: boolean,\r\n  savePhoto: (photoFile: File) => void,\r\n  saveProfile: (profile: ProfileType) => Promise<any>,\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer\r\n      // store={props.store}\r\n      // posts={props.profilePage.posts}\r\n      // dispatch={props.dispatch}\r\n      // newPostText={props.profilePage.newPostText}\r\n      // updateNewPostText={props.updateNewPostText}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store'\r\nimport { ProfileType} from '../../types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>//автоматически выводим типы из mSTP\r\n\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number | null) => void,\r\n  getStatus: (userId: number | null) => void,\r\n  updateStatus: (status: string) => void,\r\n  savePhoto: (photoFile: File) => void,\r\n  saveProfile: (profile: ProfileType) => Promise<any>,\r\n  // saveProfile: (profile: ProfileType) => void,\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string,\r\n}//HOC withRouter RouteComponentProps<PathParamsType>\r\n\r\nexport type PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = Number(this.props.match.params.userId); //объявляем переменную userId которой присваиваем значение из пропсов(которые появились там после оборачивания ХОКом withRouter)//userId: number | null = +приводим строку к числу\r\n    // let userId = this.props.match.params.userId || 20627;\r\n    if (!userId) {\r\n      userId = this.props.autorizedUserId;\r\n      // userId = 20627;//проверка что userId не null или undefined\r\n      if (!userId) {\r\n        this.props.history.push('/login');\r\n      } //если и в autorizedUserId нет userId тогда переадресация на Логин встроенным методом withRouter\r\n    }\r\n    this.props.getUserProfile(userId); //TC получения профиля\r\n    this.props.getStatus(userId); //TC получения статуса\r\n    // if (!userId) {\r\n    //   console.error(\"ID should exist in URI params or in state ('autorizedUserId')\")\r\n    // } else {\r\n    //   this.props.getUserProfile(userId); //TC получения профиля\r\n    //   this.props.getStatus(userId); //TC получения статуса\r\n    // }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log('auth', this.props.autorizedUserId);\r\n    // console.log('params', Number(this.props.match.params.userId));\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile(); //сравниваем текущие пропсы userId с прошлыми\r\n    }\r\n  } //с условием избегаем зациклености ререндеров при получении пропсов\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={\r\n          !this.props.match.params.userId ||\r\n          Number(this.props.match.params.userId) === this.props.autorizedUserId\r\n        } //если в строке URL есть Id, значит мы на чужой странице, если нет - на своей и можно будет загрузить аватар или проверим если Id это Id авторизированого юзера то тоже можно загрузить аватар\r\n        savePhoto={this.props.savePhoto}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        saveProfile={this.props.saveProfile} //TC сохранение данных профиля из redux-form\r\n      />\r\n    );\r\n  }\r\n}\r\n//profile={this.props.profile} выше передавать не обязательно, мы уже передаем все пропсы целиком через {...this.props}, сделано для наглядности\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  autorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\n//connect<MapPropsType, DispatchPropsType, RouteComponentProps<PathParamsType>, AppStateType>\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}