{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Setings/Setings.jsx","utils/object-helpers.js","redux/users-reducer.js","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","redux/app-reducer.js","App.js","reportWebVitals.js","redux/sidebar-reducer.js","redux/redux-store.js","index.js","components/common/Paginator/Paginator.module.css","redux/auth-reducer.js","assets/images/preloader.svg","components/common/preloader/Preloader.jsx","components/News/News.module.css","components/Music/Music.module.css","components/Setings/Setings.module.css","components/Header/Header.module.css","redux/profile-reducer.js","assets/images/avataaars.svg","redux/dialog-reducer.js","api/api.js"],"names":["module","exports","Navbar","className","styles","nav","item","to","activeClassName","activeLink","News","wrapper","wrapper__item","Music","Setings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","user","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","userId","type","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","state","action","followed","count","filter","id","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","paginationBlockWrapper","paginationBlock","buttonPrev","onClick","disabled","page","event","pagination","selectedPage","buttonNext","User","follow","unfollow","userPhoto","src","photos","small","avataaars","alt","userButton","some","name","status","Users","getUsers","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","requestUsers","this","Preloader","React","Component","compose","connect","usersAPI","bind","data","totalCount","Header","header","login","isAuth","logout","HeaderContainer","auth","INITIALIZED_SUCCESS","initialized","appReducer","DialogsContainer","lazy","ProfileContainer","Login","App","initializeApp","fallback","path","withRouter","app","promise","getAuthUserData","Promise","all","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","sidebar","authReducer","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","SET_USER_DATA","SET_USER_LOGIN_DATA","email","setAuthUserData","payload","authAPI","me","password","rememberMe","message","messages","length","stopSubmit","_error","preloader","ADD_POST","SET_USERS_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","DELETE_POST","posts","likeCounter","newPostText","profile","addPostActionCreator","setStatus","getUserProfile","getProfile","getStatus","profileAPI","updateStatus","savePhoto","file","saveProfile","getState","reject","p","postId","ADD_MESSAGE","dialogs","addMessageActionCreator","instance","axios","create","withCredentials","headers","baseURL","get","response","delete","post","console","warn","put","photoFile","formData","FormData","append"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,+DCArFD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,cAAgB,6BAA6B,UAAY,yBAAyB,WAAa,0BAA0B,WAAa,0BAA0B,aAAe,4BAA4B,UAAY,2B,+JC6C3PC,EA1CA,WAKb,OACE,sBAAKC,UAAWC,IAAOC,IAAvB,UACE,qBAAKF,UAAWC,IAAOE,KAAvB,SACE,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAOK,WAA/C,uBAIF,qBAAKN,UAAWC,IAAOE,KAAvB,SACE,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAOK,WAA/C,wBAIF,qBAAKN,UAAWC,IAAOE,KAAvB,SACE,cAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBJ,IAAOK,WAA5C,oBAIF,qBAAKN,UAAWC,IAAOE,KAAvB,SACE,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAOK,WAA7C,qBAIF,qBAAKN,UAAWC,IAAOE,KAAvB,SACE,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAOK,WAA7C,qBAKF,qBAAKN,UAAWC,IAAOE,KAAvB,SACE,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAOK,WAA/C,4B,iBCtBOC,EAdF,kBACX,gCACE,qCACA,sBAAKP,UAAWC,IAAOO,QAAvB,UACE,qBAAKR,UAAWC,IAAOQ,cAAvB,qBAGA,qBAAKT,UAAWC,IAAOQ,cAAvB,4B,iBCOSC,EAdD,kBACZ,gCACE,sCACA,sBAAKV,UAAWC,IAAOO,QAAvB,UACE,qBAAKR,UAAWC,IAAOQ,cAAvB,uBAGA,qBAAKT,UAAWC,IAAOQ,cAAvB,8B,iBCOSE,EAdC,kBACd,gCACE,wCACA,sBAAKX,UAAWC,IAAOO,QAAvB,UACE,qBAAKR,UAAWC,IAAOQ,cAAvB,mCAGA,qBAAKT,UAAWC,IAAOQ,cAAvB,0C,qDCTOG,EAAsB,SAACC,EAAOC,EAAQC,EAAaC,GAC9D,OAAOH,EAAMI,KAAI,SAACC,GAChB,OAAIA,EAAKH,KAAiBD,EACjB,2BAAKI,GAASF,GAEhBE,MCHLC,EAAS,8BACTC,EAAW,gCACXC,EAAY,iCACZC,EAAmB,wCACnBC,EAAwB,6CACxBC,EAAqB,0CACrBC,EAA+B,oDAEjCC,EAAe,CACjBC,MAAO,GACPC,SAAU,GACVC,gBAAiB,EACjBC,YAAa,EACbC,YAAY,EACZC,oBAAqB,IAgFVC,EAAgB,SAACC,GAAD,MAAa,CAAEC,KAAMhB,EAAQe,WAC7CE,EAAkB,SAACF,GAAD,MAAa,CAAEC,KAAMf,EAAUc,WAEjDG,EAAiB,SAACP,GAAD,MAAkB,CAAEK,KAAMb,EAAkBQ,gBAK7DQ,EAAmB,SAACP,GAAD,MAAiB,CAC/CI,KAAMX,EACNO,eAEWQ,EAA0B,SAACR,EAAYG,GAAb,MAAyB,CAC9DC,KAAMV,EACNM,aACAG,WA4BWM,EAAkB,uCAAG,WAAOC,EAAUP,EAAQQ,EAAWC,GAApC,SAAAC,EAAA,6DAChCH,EAASF,GAAwB,EAAML,IADP,SAEbQ,EAAUR,GAFG,OAGR,IAHQ,OAGvBW,YACPJ,EAASE,EAAcT,IAEzBO,EAASF,GAAwB,EAAOL,IANR,2CAAH,4DAmChBY,EA3JM,WAAmC,IAAlCC,EAAiC,uDAAzBrB,EAAcsB,EAAW,uCACrD,OAAQA,EAAOb,MAGb,KAAKhB,EACH,OAAO,2BACF4B,GADL,IAEEpB,MAAOf,EAAoBmC,EAAMpB,MAAOqB,EAAOd,OAAQ,KAAM,CAAEe,UAAU,MAE7E,KAAK7B,EACH,OAAO,2BACF2B,GADL,IAEEpB,MAAOf,EAAoBmC,EAAMpB,MAAOqB,EAAOd,OAAQ,KAAM,CAAEe,UAAU,MAyB7E,KAAK5B,EACH,OAAO,2BACF0B,GADL,IAEEpB,MAAOqB,EAAOrB,QAIlB,KAAKL,EACH,OAAO,2BACFyB,GADL,IAEEjB,YAAakB,EAAOlB,cAGxB,KAAKP,EACH,OAAO,2BACFwB,GADL,IAEElB,gBAAiBmB,EAAOE,QAG5B,KAAK1B,EACH,OAAO,2BACFuB,GADL,IAEEhB,WAAYiB,EAAOjB,aAGvB,KAAKN,EACH,OAAO,2BACFsB,GADL,IAEEf,oBAAqBgB,EAAOjB,WAAP,sBACbgB,EAAMf,qBADO,CACcgB,EAAOd,SACtCa,EAAMf,oBAAoBmB,QAAO,SAACC,GAAD,OAAQA,IAAOJ,EAAOd,YAG/D,QACE,OAAOa,I,kDCfEM,GAxEG,SAAC,GAQjB,IARkG,IAA/EC,EAA8E,EAA9EA,gBAAiB1B,EAA6D,EAA7DA,SAAU2B,EAAmD,EAAnDA,cAAezB,EAAoC,EAApCA,YAAoC,IAAvB0B,mBAAuB,MAAT,GAAS,EAC3FC,EAAaC,KAAKC,KAAKL,EAAkB1B,GACzCgC,EAAeF,KAAKC,KAAKF,EAAaD,GAC5C,EAA0CK,mBAASH,KAAKC,KAAK7B,EAAc0B,IAA3E,mBAAOM,EAAP,KAAsBC,EAAtB,KAEMC,GAAyBF,EAAgB,GAAKN,EAAc,EAC5DS,EAAyBH,EAAgBN,EACzCU,EAAQ,GACLC,EAAI,EAAGA,GAAKV,EAAYU,IAAKD,EAAME,KAAKD,GAMjD,OACE,qBAAKnE,UAAWC,IAAOoE,uBAAvB,SACE,sBAAKrE,UAAWC,IAAOqE,gBAAvB,UACGR,EAAgB,EACf,wBACE9D,UAAWC,IAAOsE,WAClBC,QAAS,WACPT,EAAiBD,EAAgB,IAHrC,kBAQA,wBAAQW,UAAU,EAAlB,kBAEDP,EACEf,QAAO,SAACuB,GAAD,OAAUA,GAAQV,GAAyBU,GAAQT,KAC1DhD,KAAI,SAACyD,EAAMtB,GACV,OACE,sBAEEoB,QAAS,SAACG,GACRpB,EAAcmB,IAEhB1E,UAAS,UAAKC,IAAO2E,WAAZ,YACP9C,IAAgB4C,EAAOzE,IAAO4E,aAAe,IANjD,SAQGH,GAPItB,MAuBZU,EAAgBF,EACf,wBACE5D,UAAWC,IAAO6E,WAClBN,QAAS,WACPT,EAAiBD,EAAgB,IAHrC,kBAQA,wBAAQW,UAAU,EAAlB,wB,SCjBKM,GA/CF,SAAC,GAAqD,IAAnD/C,EAAkD,EAAlDA,oBAAqBgD,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,SAAU/D,EAAW,EAAXA,KACrD,OACE,gCACE,gCACE,8BACE,cAAC,IAAD,CAASd,GAAI,YAAcc,EAAKkC,GAAhC,SACE,qBACEpD,UAAWC,IAAOiF,UAClBC,IAA0B,MAArBjE,EAAKkE,OAAOC,MAAgBnE,EAAKkE,OAAOC,MAAQC,KACrDC,IAAI,eAIV,qBAAKvF,UAAWC,IAAOuF,WAAvB,SACGtE,EAAK+B,SACJ,wBACEwB,SAAUzC,EAAoByD,MAAK,SAACrC,GAAD,OAAQA,IAAOlC,EAAKkC,MACvDoB,QAAS,WACPS,EAAS/D,EAAKkC,KAHlB,sBAQA,wBACEqB,SAAUzC,EAAoByD,MAAK,SAACrC,GAAD,OAAQA,IAAOlC,EAAKkC,MACvDoB,QAAS,WACPQ,EAAO9D,EAAKkC,KAHhB,yBAUN,sBAAKpD,UAAWC,IAAOQ,cAAvB,UACE,gCACE,8BAAMS,EAAKwE,OACX,8BAAMxE,EAAKyE,YAEb,+B,kHCJOC,GAjCD,SAAC,GAUR,IATL/D,EASI,EATJA,gBACAD,EAQI,EARJA,SACA2B,EAOI,EAPJA,cACAzB,EAMI,EANJA,YACAH,EAKI,EALJA,MACAK,EAII,EAJJA,oBACAgD,EAGI,EAHJA,OACAC,EAEI,EAFJA,SAEI,kBACJ,OACE,gCACE,cAAC,GAAD,CACE3B,gBAAiBzB,EACjBD,SAAUA,EACV2B,cAAeA,EACfzB,YAAaA,IAEdH,EAAMV,KAAI,SAACC,GAAD,OACT,qBAAKlB,UAAWC,IAAOO,QAAvB,SACE,cAAC,GAAD,CACEwB,oBAAqBA,EACrBgD,OAAQA,EACRC,SAAUA,EACV/D,KAAMA,KAL2BA,EAAKkC,W,2BCpBrCyC,GAAWC,cAHC,SAAC/C,GACxB,OAAOA,EAAMgD,UAAUpE,SAEgC,SAACA,GACxD,OAAOA,EAAMwB,QAAO,SAAC6C,GAAD,OAAO,QAGhBC,GAAc,SAAClD,GAC1B,OAAOA,EAAMgD,UAAUnE,UAEZsE,GAAqB,SAACnD,GACjC,OAAOA,EAAMgD,UAAUlE,iBAEZsE,GAAiB,SAACpD,GAC7B,OAAOA,EAAMgD,UAAUjE,aAEZsE,GAAgB,SAACrD,GAC5B,OAAOA,EAAMgD,UAAUhE,YAEZsE,GAAyB,SAACtD,GACrC,OAAOA,EAAMgD,UAAU/D,qBCEnBsE,G,4MAUJ/C,cAAgB,SAACzB,GACf,EAAKyE,MAAMC,aAAa1E,EAAa,EAAKyE,MAAM3E,W,uDALlD,WACE6E,KAAKF,MAAMC,aAAaC,KAAKF,MAAMzE,YAAa2E,KAAKF,MAAM3E,Y,oBAO7D,WACE,OACE,qCACG6E,KAAKF,MAAMxE,WACV,cAAC2E,GAAA,EAAD,IACE,KACJ,cAAC,GAAD,CACE7E,gBAAiB4E,KAAKF,MAAM1E,gBAC5BD,SAAU6E,KAAKF,MAAM3E,SACrBE,YAAa2E,KAAKF,MAAMzE,YACxBH,MAAO8E,KAAKF,MAAM5E,MAClB4B,cAAekD,KAAKlD,cACpByB,OAAQyB,KAAKF,MAAMvB,OACnBC,SAAUwB,KAAKF,MAAMtB,SACrBjD,oBAAqByE,KAAKF,MAAMvE,6B,GA5Bb2E,IAAMC,WAyFpBC,sBACbC,aA1CoB,SAAC/D,GAErB,MAAO,CACLpB,MAAOkE,GAAS9C,GAChBnB,SAAUqE,GAAYlD,GACtBlB,gBAAiBqE,GAAmBnD,GACpCjB,YAAaqE,GAAepD,GAC5BhB,WAAYqE,GAAcrD,GAC1Bf,oBAAqBqE,GAAuBtD,MAkCrB,CACvBiC,OLiCkB,SAAC9C,GAAD,8CAAY,WAAOO,GAAP,SAAAG,EAAA,sDAGhCJ,EAAmBC,EAAUP,EAAQ6E,IAAS/B,OAAOgC,KAAKD,KAAW9E,GAHrC,2CAAZ,uDKhClBgD,SL6CoB,SAAC/C,GAAD,8CAAY,WAAOO,GAAP,SAAAG,EAAA,sDAGlCJ,EAAmBC,EAAUP,EAAQ6E,IAAS9B,SAAS+B,KAAKD,KAAW3E,GAHrC,2CAAZ,uDK5CpBC,iBACAE,0BACAiE,aLHwB,SAAC9B,EAAM9C,GAAP,8CAAoB,WAAOa,GAAP,eAAAG,EAAA,6DAC9CH,EAASJ,EAAeqC,IACxBjC,EAASH,GAAiB,IAFoB,SAG3ByE,IAASlB,SAASnB,EAAM9C,GAHG,OAGxCqF,EAHwC,OAI9CxE,EAASH,GAAiB,IAC1BG,GAvBuBd,EAuBLsF,EAAKpG,MAvBW,CAAEsB,KAAMd,EAAWM,WAwBrDc,GAtBiCZ,EAsBLoF,EAAKC,WAtBqB,CACtD/E,KAAMZ,EACN2B,MAAOrB,KAcuC,iCAhBd,IAACA,EAFVF,IAkBuB,OAApB,yDKHbkF,CAQbP,I,oBC9Faa,GAxBA,SAACZ,GACd,OACE,yBAAQvG,UAAWC,KAAOmH,OAA1B,UACE,wBAQA,qBAAKpH,UAAWC,KAAOoH,MAAvB,SACGd,EAAMe,OACL,gCACGf,EAAMc,MADT,IACgB,wBAAQ7C,QAAS+B,EAAMgB,OAAvB,wBAGhB,cAAC,IAAD,CAASnH,GAAI,UAAb,yB,SCfJoH,G,4JAIJ,WACE,OAAO,cAAC,GAAD,eAAYf,KAAKF,Y,GALEI,IAAMC,WAcrBE,gBALO,SAAC/D,GAAD,MAAY,CAChCsE,MAAOtE,EAAM0E,KAAKJ,MAClBC,OAAQvE,EAAM0E,KAAKH,UAGmB,CAAEC,aAA3BT,CAAqCU,I,QClB9CE,GAAsB,sBAExBhG,GAAe,CACjBiG,aAAa,GA8BAC,GA3BI,WAAmC,IAAlC7E,EAAiC,uDAAzBrB,GAAcsB,EAAW,uCACnD,OAAQA,EAAOb,OACRuF,GACI,2BACF3E,GADL,IAEE4E,aAAa,IAIR5E,GCKP8E,GAAmBlB,IAAMmB,MAAK,kBAAM,uDACpCC,GAAmBpB,IAAMmB,MAAK,kBAAM,uDACpCE,GAAQrB,IAAMmB,MAAK,kBAAM,uDAEzBG,G,uKAEJ,WACExB,KAAKF,MAAM2B,kB,oBAGb,WACE,OAAKzB,KAAKF,MAAMoB,YAId,sBAAK3H,UAAU,cAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACE,eAAC,WAAD,CAAUmI,SAAU,cAACzB,GAAA,EAAD,IAApB,UACE,cAAC,KAAD,CAAO0B,KAAK,oBAAZ,SACE,cAACL,GAAD,MAIF,cAAC,KAAD,CAAOK,KAAK,WAAZ,SACE,cAACP,GAAD,MAEF,cAAC,KAAD,CAAOO,KAAK,SAAZ,SACE,cAACJ,GAAD,SAIJ,cAAC,KAAD,CAAOI,KAAK,SAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,EAAD,YA/BC,cAAC1B,GAAA,EAAD,Q,GARKC,IAAMC,WAmDTyB,gBAAWvB,aAJJ,SAAC/D,GAAD,MAAY,CAChC4E,YAAa5E,EAAMuF,IAAIX,eAG0B,CAAEO,cDlDxB,kBAAM,SAACzF,GAClC,IAAI8F,EAAU9F,EAAS+F,gBAIvBC,QAAQC,IAAI,CAACH,IAAUI,MAAK,kBAAMlG,EAVK,CACvCN,KAAMuF,WCsDkBZ,CAA4CmB,KChEvDW,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBH,MAAK,YAAkD,IAA/CI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,2BCPVnH,GAAe,GAMJ0H,GAJQ,WAAmC,IAAlCrG,EAAiC,uDAAzBrB,GAC9B,OAAOqB,G,kBCSLsG,GAAWC,2BAAgB,CAC7BC,YAAaC,KACbC,YAAaC,KACbC,QAASP,GACTrD,UAAWjD,EACX2E,KAAMmC,KACNC,KAAMC,KACNxB,IAAKV,KAQQmC,GAFHC,uBAAYX,GAAUY,+BAAoBC,2BAAgBC,QCftEC,IAASC,OAEP,cAAC,IAAD,UAEE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,GAAD,QAIJO,SAASC,eAAe,SAM1B3B,M,mBCxBA/I,EAAOC,QAAU,CAAC,uBAAyB,0CAA0C,gBAAkB,mCAAmC,WAAa,8BAA8B,aAAe,gCAAgC,WAAa,8BAA8B,WAAa,gC,uLCCtR0K,EAAgB,oCAChBC,EAAsB,0CAExB/I,EAAe,CACjBQ,OAAQ,KACRwI,MAAO,KACPrD,MAAO,KACPC,QAAQ,GAuBGqD,EAAkB,SAACzI,EAAQwI,EAAOrD,EAAOC,GAAvB,MAAmC,CAChEnF,KAAMqI,EACNI,QAAS,CAAE1I,SAAQwI,QAAOrD,QAAOC,YAKtBkB,EAAkB,yDAAM,WAAO/F,GAAP,uBAAAG,EAAA,sEAChBiI,IAAQC,KADQ,OAEX,KADlB7D,EAD6B,QAE1BpE,aAAmB,EACCoE,EAAKA,KAA1B7D,EADmB,EACnBA,GAAIsH,EADe,EACfA,MAAOrD,EADQ,EACRA,MACjB5E,EAASkI,EAAgBvH,EAAIsH,EAAOrD,GAAO,KAJV,2CAAN,uDASlBA,EAAQ,SAACqD,EAAOK,EAAUC,GAAlB,8CAAiC,WAAOvI,GAAP,iBAAAG,EAAA,sEACjCiI,IAAQxD,MAAMqD,EAAOK,EAAUC,GADE,OAE5B,KADlB/D,EAD8C,QAE3CpE,WACPJ,EAAS+F,MAGLyC,EAAUhE,EAAKiE,SAASC,OAAS,EAAIlE,EAAKiE,SAAS,GAAK,aAC5DzI,EAAS2I,YAAW,QAAS,CAAEC,OAAQJ,MAPW,2CAAjC,uDAWR1D,EAAS,yDAAM,WAAO9E,GAAP,SAAAG,EAAA,sEACPiI,IAAQtD,SADD,OAEF,IAFE,OAEjB1E,YACPJ,EAASkI,EAAgB,KAAM,KAAM,MAAM,IAHnB,2CAAN,uDAgBPf,IA/DK,WAAmC,IAAlC7G,EAAiC,uDAAzBrB,EAAcsB,EAAW,uCACpD,OAAQA,EAAOb,MACb,KAAKqI,EACH,OAAO,2BACFzH,GACAC,EAAO4H,SAId,KAAKH,EACH,MAAO,CACLnD,QAAQ,GAGZ,QACE,OAAOvE,K,0DC3BE,MAA0B,sC,OCY1B2D,IARG,SAACH,GACjB,OACE,mCACE,qBAAKvG,UAAWC,IAAOqL,UAAWnG,IAAKmG,EAAW/F,IAAI,sB,mBCN5D1F,EAAOC,QAAU,CAAC,QAAU,sBAAsB,cAAgB,8B,mBCAlED,EAAOC,QAAU,CAAC,QAAU,uBAAuB,cAAgB,+B,mBCAnED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,iC,mBCArED,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,qSCCpDyL,EAAW,kCACXC,EAAoB,2CACpBC,EAAa,oCACbC,EAAqB,4CACrBC,EAAc,qCAGhBjK,EAAe,CACjBkK,MAAO,CACL,CAAExI,GAAI,EAAG6H,QAAS,mBAAoBY,YAAa,IACnD,CAAEzI,GAAI,EAAG6H,QAAS,sBAAuBY,YAAa,IACtD,CAAEzI,GAAI,EAAG6H,QAAS,KAAMY,YAAa,IAEvCC,YAAa,GACbC,QAAS,KACTpG,OAAQ,IAyCGqG,EAAuB,SAACF,GAAD,MAAkB,CAAE3J,KAAMoJ,EAAUO,gBAI3DG,EAAY,SAACtG,GAAD,MAAa,CAAExD,KAAMsJ,EAAY9F,WAS7CuG,EAAiB,SAAChK,GAAD,8CAAY,WAAOO,GAAP,eAAAG,EAAA,sEACrBmE,IAASoF,WAAWjK,GADC,OAClC+E,EADkC,OAExCxE,EAb0C,CAAEN,KAAMqJ,EAAmBO,QAa7C9E,IAFgB,2CAAZ,uDAajBmF,EAAY,SAAClK,GAAD,8CAAY,WAAOO,GAAP,eAAAG,EAAA,sEAChByJ,IAAWD,UAAUlK,GADL,OAC7B+E,EAD6B,OAEnCxE,EAASwJ,EAAUhF,IAFgB,2CAAZ,uDAKZqF,EAAe,SAAC3G,GAAD,8CAAY,WAAOlD,GAAP,SAAAG,EAAA,sEACnByJ,IAAWC,aAAa3G,GADL,OAEd,IAFc,OAE7B9C,YACPJ,EAASwJ,EAAUtG,IAHiB,2CAAZ,uDAOf4G,EAAY,SAACC,GAAD,8CAAU,WAAO/J,GAAP,eAAAG,EAAA,sEACdyJ,IAAWE,UAAUC,GADP,OAET,KADlBvF,EAD2B,QAExBpE,YACPJ,GAnC6B2C,EAmCH6B,EAAKA,KAAK7B,OAnCK,CAAEjD,KAAMuJ,EAAoBtG,YAgCtC,iCAhCH,IAACA,IAgCE,OAAV,uDAQZqH,EAAc,SAACV,GAAD,8CAAa,WAAOtJ,EAAUiK,GAAjB,mBAAA9J,EAAA,6DAChCV,EAASwK,IAAWjF,KAAKvF,OADO,SAGnBmK,IAAWI,YAAYV,GAHJ,UAId,KADlB9E,EAHgC,QAI7BpE,WAJ6B,gBAKpCJ,EAASyJ,EAAehK,IALY,8BAQhC+I,EAAUhE,EAAKiE,SAASC,OAAS,EAAIlE,EAAKiE,SAAS,GAAK,aAC5DzI,EAAS2I,YAAW,eAAgB,CAAEC,OAAQJ,KATV,kBAU7BxC,QAAQkE,OAAO1B,IAVc,4CAAb,yDAmBZzB,IAvGQ,WAAmC,IAAlCzG,EAAiC,uDAAzBrB,EAAcsB,EAAW,uCACvD,OAAQA,EAAOb,MACb,KAAKoJ,EACH,OAAO,2BACFxI,GADL,IAEE6I,MAAM,GAAD,mBAAM7I,EAAM6I,OAAZ,CAAmB,CAAExI,GAAI,EAAG6H,QAASjI,EAAO8I,iBAErD,KAAKH,EACH,OAAO,2BACF5I,GADL,IAEE6I,MAAO7I,EAAM6I,MAAMzI,QAAO,SAACyJ,GAAD,OAAOA,EAAExJ,KAAOJ,EAAO6J,YAErD,KAAKrB,EACH,OAAO,2BACFzI,GADL,IAEEgJ,QAAS/I,EAAO+I,UAEpB,KAAKN,EACH,OAAO,2BACF1I,GADL,IAEE4C,OAAQ3C,EAAO2C,SAEnB,KAAK+F,EACH,OAAO,2BACF3I,GADL,IAEEgJ,QAAQ,2BAAMhJ,EAAMgJ,SAAb,IAAsB3G,OAAQpC,EAAOoC,WAOhD,QACE,OAAOrC,K,gCCrDE,QAA0B,uC,qFCAnC+J,EAAc,oCAGhBpL,EAAe,CACjBqL,QAAS,CACP,CACE3J,GAAI,EACJsC,KAAM,UAGR,CACEtC,GAAI,EACJsC,KAAM,UAGR,CACEtC,GAAI,EACJsC,KAAM,SAGR,CAAEtC,GAAI,EAAGsC,KAAM,SACf,CAAEtC,GAAI,EAAGsC,KAAM,UACf,CAAEtC,GAAI,EAAGsC,KAAM,WAEjBwF,SAAU,CACR,CAAE9H,GAAI,EAAG6H,QAAS,MAClB,CAAE7H,GAAI,EAAG6H,QAAS,mBAClB,CAAE7H,GAAI,EAAG6H,QAAS,eAgCT+B,EAA0B,SAAC/B,GAAD,MAAc,CAAE9I,KAAM2K,EAAa7B,YAkB3DvB,IA7CQ,WAAmC,IAAlC3G,EAAiC,uDAAzBrB,EAAcsB,EAAW,uCAEvD,OAAQA,EAAOb,OACR2K,EAOI,2BACF/J,GADL,IAGEmI,SAAS,GAAD,mBAAMnI,EAAMmI,UAAZ,CAAsB,CAAE9H,GAAI,EAAG6H,QAASjI,EAAOiI,aASlDlI,I,wKCpDPkK,E,OAAWC,EAAMC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,CAAE,UAAW,wCACtBC,QAAS,kDAGEvG,EAAW,CACtBlB,SADsB,SACb/D,EAAaF,GACpB,OAAOqL,EACJM,IADI,qBACczL,EADd,kBACmCF,IACvC+G,MAAK,SAAC6E,GAAD,OAAcA,EAASvG,SAE3BhC,SANgB,SAMP/C,GAAS,OAAD,0HACE+K,EAASQ,OAAT,iBAA0BvL,IAD5B,cACfsL,EADe,yBAEdA,EAASvG,MAFK,8CAIjBjC,OAVgB,SAUT9C,GAAS,OAAD,0HACI+K,EAASS,KAAT,iBAAwBxL,IAD5B,cACbsL,EADa,yBAEZA,EAASvG,MAFG,8CAIfkF,WAdgB,SAcLjK,GAAS,OAAD,2GACvByL,QAAQC,KAAK,iDADU,kBAEhBvB,EAAWF,WAAWjK,IAFN,+CAMdmK,EAAa,CAClBF,WADkB,SACPjK,GAAS,OAAD,0HACA+K,EAASM,IAAT,kBAAwBrL,IADxB,cACjBsL,EADiB,yBAEhBA,EAASvG,MAFO,8CAInBmF,UALkB,SAKRlK,GAAS,OAAD,0HACC+K,EAASM,IAAT,yBAA+BrL,IADhC,cAChBsL,EADgB,yBAEfA,EAASvG,MAFM,8CAIlBqF,aATkB,SASL3G,GAAS,OAAD,0HACFsH,EAASY,IAAT,iBAA+B,CAAElI,OAAQA,IADvC,cACnB6H,EADmB,yBAElBA,EAASvG,MAFS,8CAIrBsF,UAbkB,SAaRuB,GAAY,OAAD,mHACnBC,EAAW,IAAIC,UACZC,OAAO,QAASH,GAFA,SAGFb,EAASY,IAAT,gBAA8BE,EAAU,CAC7DV,QAAS,CACP,eAAgB,yBALK,cAGnBG,EAHmB,yBAQlBA,EAASvG,MARS,8CAUrBwF,YAvBkB,SAuBNV,GAAU,OAAD,0HACFkB,EAASY,IAAT,UAAwB9B,GADtB,cACnByB,EADmB,yBAElBA,EAASvG,MAFS,+CAwBhB4D,EAAU,CACfC,GADe,WACT,OAAD,0HACcmC,EAASM,IAAT,WADd,cACHC,EADG,yBAEFA,EAASvG,MAFP,8CAILI,MALe,SAKTqD,EAAOK,GAA+B,IAAD,sIAApBC,EAAoB,yCACxBiC,EAASS,KAAT,aAA4B,CACjDhD,MAAOA,EACPK,SAAUA,EACVC,WAAYA,IAJiC,cACzCwC,EADyC,yBAMxCA,EAASvG,MAN+B,8CAQ3CM,OAbe,WAaL,OAAD,0HACU0F,EAASQ,OAAT,cADV,cACPD,EADO,yBAENA,EAASvG,MAFH,iD","file":"static/js/main.975687dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1sCY-\",\"item\":\"Navbar_item__1MKSx\",\"activeLink\":\"Navbar_activeLink__3vO2y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3GS1A\",\"wrapper__item\":\"Users_wrapper__item__1cUQX\",\"userPhoto\":\"Users_userPhoto__22rSw\",\"userButton\":\"Users_userButton__1Rd_M\",\"pagination\":\"Users_pagination__9wTpd\",\"selectedPage\":\"Users_selectedPage__rTwP8\",\"preloader\":\"Users_preloader__13i_D\"};","import { NavLink } from 'react-router-dom';\r\nimport styles from './Navbar.module.css';\r\n// import DialogItem from './../Dialogs/DialogItem/DialogItem';\r\n\r\nconst Navbar = () => {\r\n  // debugger\r\n\r\n  // const dialogsElements = props.state.dialogsData.map((dialog, i) => <DialogItem key={i} name={dialog.name} id={dialog.id} avatar={dialog.avatar}/>)\r\n\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <div className={styles.item}>\r\n        <NavLink to='/profile' activeClassName={styles.activeLink}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/dialogs' activeClassName={styles.activeLink}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/news' activeClassName={styles.activeLink}>\r\n          News\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/music' activeClassName={styles.activeLink}>\r\n          Music\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/users' activeClassName={styles.activeLink}>\r\n          Users\r\n        </NavLink>\r\n        {/* { dialogsElements } */}\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/setings' activeClassName={styles.activeLink}>\r\n          Settings\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import styles from './News.module.css'\r\n\r\nconst News = () => (\r\n  <div>\r\n    <p>News</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        News #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        News #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default News","import styles from './Music.module.css'\r\n\r\nconst Music = () => (\r\n  <div>\r\n    <p>Music</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        Albums #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n      Albums #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Music","import styles from './Setings.module.css'\r\n\r\nconst Setings = () => (\r\n  <div>\r\n    <p>Setings</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Setings","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n  return items.map((user) => {\r\n    if (user[objPropName] === itemId) {\r\n      return { ...user, ...newObjProps };\r\n    }\r\n    return user;\r\n  });\r\n};\r\n//в итоге вернет нам новый массив, в котором заменит, если найдет совпадение по objPropName из объекта с таким itemId, создаст копию объекта и заменит старые свойства деструктуризацией из новых свойств newObjProps\r\n","import { usersAPI } from '../api/api';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nconst FOLLOW = 'WAY-OF-SAMURAI/USERS/FOLLOW'; //add redux-ducks\r\nconst UNFOLLOW = 'WAY-OF-SAMURAI/USERS/UNFOLLOW';\r\nconst SET_USERS = 'WAY-OF-SAMURAI/USERS/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'WAY-OF-SAMURAI/USERS/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'WAY-OF-SAMURAI/USERS/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'WAY-OF-SAMURAI/USERS/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'WAY-OF-SAMURAI/USERS/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    //======\r\n    //рефакторинг, вынесение дублирующей логики из follow и unfollow во вспомогутальную функцию updateObjectInArray из утилит\r\n    case FOLLOW:\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }),\r\n      };\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }),\r\n      };\r\n    //рефакторинг, вынесение дублирующей логики из follow и unfollow во вспомогутальную функцию updateObjectInArray из утилит\r\n    //=====\r\n\r\n    // case FOLLOW:\r\n    //   return {\r\n    //     ...state, //создаем копию стейта(работать можем только с копией)\r\n    //     users: state.users.map((user) => {\r\n    //       if (user.id === action.userId) {\r\n    //         return { ...user, followed: true };\r\n    //       } //мапим массив юзеров(если id юзера совпадает с id пришедшим из AC) то возвращаем в глубокую копию новый объект с добавленным статусом followed true у юзера\r\n    //       return user; //если id не совпадает, возвращаем тот же самый объект юзер\r\n    //     }),\r\n    //   };\r\n    // case UNFOLLOW:\r\n    //   return {\r\n    //     ...state, //создаем копию стейта(работать можем только с копией)\r\n    //     users: state.users.map((user) => {\r\n    //       if (user.id === action.userId) {\r\n    //         return { ...user, followed: false };\r\n    //       } //мапим массив юзеров(если id юзера совпадает с id пришедшим из AC) то возвращаем в глубокую копию новый объект с измененным статусом followed false у юзера\r\n    //       return user; //если id не совпадает, возвращаем тот же самый объект юзер\r\n    //     }),\r\n    //   };\r\n    case SET_USERS: {\r\n      return {\r\n        ...state,\r\n        users: action.users, //перезатираем массив юзеров\r\n        // users: [...state.users, ...action.users],\r\n      }; //с сервера придут пользователи, мы должны взять старый стейт(сделать копию) и дополнить его новыми пользователями пришедшими из экшна (склеить два массива спред оператором)\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      };\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId] //если isF true добавляем в массив id из экшена\r\n          : state.followingInProgress.filter((id) => id !== action.userId), //если isF false фильтрация вернут новый массив\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//создаем функции action creator, которая создает(возвращает) объект действие {action}\r\n//переименовываем AC без окончания AC(хак с mdtp )\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId }); //переименуем из-за thunkCreate\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId }); //переименуем из-за thunkCreate\r\nexport const setUsers = (users) => ({ type: SET_USERS, users }); //возьмем данные о юзерах с сервера и поместим их потом в стейт\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\r\nexport const setTotalUsersCount = (totalUsersCount) => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  count: totalUsersCount, //когда ключ и значение не одинаковы(специально)\r\n});\r\nexport const toggleIsFetching = (isFetching) => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n});\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n});\r\n\r\n//создаем функции thunk creator, которая создает(возвращает) thunk(dispatch action)\r\n//переименовываем AC без окончания AC\r\nexport const requestUsers = (page, pageSize) => async (dispatch) => {\r\n  dispatch(setCurrentPage(page)); //from onPageChanged(активная страница)\r\n  dispatch(toggleIsFetching(true)); //запрос ушел preloader виден\r\n  const data = await usersAPI.getUsers(page, pageSize);\r\n  dispatch(toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n  dispatch(setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n  dispatch(setTotalUsersCount(data.totalCount));\r\n}; //convert to async/await\r\n\r\n// export const requestUsers = (page, pageSize) => {\r\n//   // debugger;\r\n//   return (dispatch) => {\r\n//     dispatch(setCurrentPage(page)); //from onPageChanged(активная страница)\r\n//     dispatch(toggleIsFetching(true)); //запрос ушел preloader виден\r\n//     usersAPI.getUsers(page, pageSize).then((data) => {\r\n//       dispatch(toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n//       dispatch(setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n//       dispatch(setTotalUsersCount(data.totalCount));\r\n//     });\r\n//   };\r\n// };//with then\r\n\r\n//рефакторинг, вынесение дублирующей логики из follow и unfollow в функцию followUnfollowFlow\r\nexport const followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n  dispatch(toggleFollowingProgress(true, userId));\r\n  const data = await apiMethod(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actionCreator(userId));\r\n  } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  dispatch(toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId) => async (dispatch) => {\r\n  // const apiMethod = usersAPI.follow.bind(usersAPI);\r\n  // const actionCreator = followSuccess;\r\n  followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n\r\n  // dispatch(toggleFollowingProgress(true, userId));\r\n  // const data = await apiMethod(userId);\r\n  // if (data.resultCode === 0) {\r\n  //   dispatch(actionCreator(userId));\r\n  // } //если подписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  // dispatch(toggleFollowingProgress(false, userId));\r\n}; //convert to async/await\r\n\r\nexport const unfollow = (userId) => async (dispatch) => {\r\n  // const apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n  // const actionCreator = unfollowSuccess;\r\n  followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n\r\n  // dispatch(toggleFollowingProgress(true, userId));\r\n  // const data = await apiMethod(userId);\r\n  // if (data.resultCode === 0) {\r\n  //   dispatch(actionCreator(userId));\r\n  // } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  // dispatch(toggleFollowingProgress(false, userId));\r\n}; //convert to async/await\r\n\r\nexport default usersReducer;\r\n","import styles from './Paginator.module.css';\r\nimport React, { useState } from 'react';\r\n\r\nconst Paginator = ({ totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 10 }) => {\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize); //кол-во странииц\r\n  const portionCount = Math.ceil(pagesCount / portionSize); //кол-во порций\r\n  const [portionNumber, setPortionNumber] = useState(Math.ceil(currentPage / portionSize)); //отслеживаем номер порции и его изменение//решение со сбросом порции при смене страницы\r\n  // const [portionNumber, setPortionNumber] = useState(1); //отслеживаем номер порции и его изменение\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //номер левого элемента порции\r\n  const rightPortionPageNumber = portionNumber * portionSize; //номер правого элемента порции\r\n  const pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) pages.push(i);\r\n  // for (let i = 1; i <= pagesCount; i++)\r\n  //   if (pages.length < 20) {\r\n  //     pages.push(i); //хардкодно ограничили длину пагинации <20 чтобы не рвало экран\r\n  //   }\r\n  // console.log(portionNumber);\r\n  return (\r\n    <div className={styles.paginationBlockWrapper}>\r\n      <div className={styles.paginationBlock}>\r\n        {portionNumber > 1 ? (\r\n          <button\r\n            className={styles.buttonPrev}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber - 1);\r\n            }}>\r\n            PREV\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>PREV</button>\r\n        )}\r\n        {pages\r\n          .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n          .map((page, id) => {\r\n            return (\r\n              <span\r\n                key={id}\r\n                onClick={(event) => {\r\n                  onPageChanged(page);\r\n                }}\r\n                className={`${styles.pagination} ${\r\n                  currentPage === page ? styles.selectedPage : ''\r\n                }`}>\r\n                {page}\r\n              </span>\r\n            );\r\n          })}\r\n        {/* {pages.map((page, id) => {\r\n          return (\r\n            <span\r\n              key={id}\r\n              onClick={(event) => {\r\n                onPageChanged(page);\r\n              }}\r\n              className={`${styles.pagination} ${currentPage === page ? styles.selectedPage : ''}`}>\r\n              {page}\r\n            </span>\r\n          );\r\n        })} */}\r\n        {portionNumber < portionCount ? (\r\n          <button\r\n            className={styles.buttonNext}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber + 1);\r\n            }}>\r\n            NEXT\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>NEXT</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import styles from './Users.module.css';\r\nimport avataaars from './../../../src/assets/images/avataaars.svg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst User = ({ followingInProgress, follow, unfollow, user }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              className={styles.userPhoto}\r\n              src={user.photos.small != null ? user.photos.small : avataaars} //добавляем проверку, если с сервера не пришла аватарка, поставить заглушку\r\n              alt='avatar'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div className={styles.userButton}>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        <div>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </div>\r\n        <div>\r\n          {/* <div>{user.location.country}</div>\r\n                <div>{user.location.city}</div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import styles from './Users.module.css';\r\nimport React from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\n\r\nconst Users = ({\r\n  totalUsersCount,\r\n  pageSize,\r\n  onPageChanged,\r\n  currentPage,\r\n  users,\r\n  followingInProgress,\r\n  follow,\r\n  unfollow,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Paginator //выносим логику пагинации в отдельный компонент, прокидываем пропсы\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        onPageChanged={onPageChanged}\r\n        currentPage={currentPage}\r\n      />\r\n      {users.map((user) => (\r\n        <div className={styles.wrapper} key={user.id}>\r\n          <User //выносим логику в компонент, прокидываем пропсы\r\n            followingInProgress={followingInProgress}\r\n            follow={follow}\r\n            unfollow={unfollow}\r\n            user={user}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getUsersSelector = (state) => {\r\n  return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n}); //test reselec\r\n\r\nexport const getPageSize = (state) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  follow,\r\n  unfollow,\r\n  setCurrentPage,\r\n  toggleFollowingProgress,\r\n  requestUsers,\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\n// import { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport {\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getCurrentPage,\r\n  getTotalUsersCount,\r\n  getPageSize,\r\n  getUsers,\r\n} from '../../redux/users-selectors';\r\n\r\n// import UsersAPIComponent from './UsersAPIComponent';\r\n\r\nclass UsersContainer extends React.Component {\r\n  // debugger;\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // } //если кроме конструктора(супер) ничего нет, можно не писать\r\n\r\n  componentDidMount() {\r\n    this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n  }\r\n\r\n  onPageChanged = (currentPage) => {\r\n    this.props.requestUsers(currentPage, this.props.pageSize);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.isFetching ? (\r\n          <Preloader /> //вынесли компоненту в common/preloader\r\n        ) : null}\r\n        <Users\r\n          totalUsersCount={this.props.totalUsersCount}\r\n          pageSize={this.props.pageSize}\r\n          currentPage={this.props.currentPage}\r\n          users={this.props.users}\r\n          onPageChanged={this.onPageChanged}\r\n          follow={this.props.follow}\r\n          unfollow={this.props.unfollow}\r\n          followingInProgress={this.props.followingInProgress}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n//mstp принимает от connect весь глобальный стейт, и возвращает объект с теми данными которые нам здесь нужны\r\n// let mapStateToProps = (state) => {\r\n//   // debugger;\r\n//   return {\r\n//     users: state.usersPage.users,\r\n//     pageSize: state.usersPage.pageSize,\r\n//     totalUsersCount: state.usersPage.totalUsersCount,\r\n//     currentPage: state.usersPage.currentPage,\r\n//     isFetching: state.usersPage.isFetching,\r\n//     followingInProgress: state.usersPage.followingInProgress,\r\n//   };\r\n// };//add selectors\r\n\r\nlet mapStateToProps = (state) => {\r\n  // debugger;\r\n  return {\r\n    users: getUsers(state), //test reselect\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n  };\r\n};\r\n\r\n//mdtp служит для того, чтобы передавать дочерней компоненте через пропсы колбэки(функции, которые может вызывать презентационная компонента)(назначение колбэков общаться со стором-стейтом)\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     follow: (userId) => {\r\n//       dispatch(followAC(userId));\r\n//     },\r\n//     unfollow: (userId) => {\r\n//       dispatch(unfollowAC(userId));\r\n//     },\r\n//     setUsers: (users) => {\r\n//       dispatch(setUsersAC(users));\r\n//     },\r\n//     setCurrentPage: (currentPage) => {\r\n//       dispatch(setCurrentPageAC(currentPage));\r\n//     },\r\n//     setTotalUsersCount: (totalCount) => {\r\n//       dispatch(setTotalUsersCountAC(totalCount));\r\n//     },\r\n//     toggleIsFetching: (isFetching) => {\r\n//       dispatch(toggleIsFetchingAC(isFetching));\r\n//     },\r\n//   };\r\n// };\r\n\r\n//передаем напряую в mdtp объект с AC (connect подставляет нужные параметры в колбэки которые сам и создает за кадром, после происходит диспатч экшена)\r\n//переименовываем AC без окончания AC, правим импорты, и при совпадении имен ключ: значение, оставляем одно имя в объекте\r\n//mdtp больше не используем, а передаем {объект} вторым параметром в connect\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPage,\r\n    toggleFollowingProgress,\r\n    requestUsers,\r\n  }),\r\n)(UsersContainer);\r\n","import styles from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <div>\r\n        {/* <img\r\n          src='https://freepngimg.com/thumb/logo/69613-litecoin-bitcoin-cryptocurrency-london-bull-logo.png'\r\n          width='40'\r\n          height='40'\r\n          alt='logo'\r\n        /> */}\r\n      </div>\r\n      <div className={styles.login}>\r\n        {props.isAuth ? (\r\n          <div>\r\n            {props.login} <button onClick={props.logout}>Log out</button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to={'/Login/'}>Login</NavLink>\r\n        )}\r\n      </div>\r\n    </header> //isAuth true - покажем логин, иначе ссылку на залогинивание\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n  // componentDidMount() {\r\n  //   this.props.getAuthUserData();\r\n  // }//переносим запрос в App\r\n  render() {\r\n    return <Header {...this.props} />; //пробрасываем все пропсы ниже в целевую компоненту\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  login: state.auth.login, //логин покажем после авторизации\r\n  isAuth: state.auth.isAuth, //флаг авторизации\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer);\r\n","import { getAuthUserData } from './auth-reducer';\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n}; //инициализируем стейт, initialized флаг того, что юзер залогинен(нет)\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        initialized: true, // isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport const initializedSuccess = () => ({\r\n  type: INITIALIZED_SUCCESS,\r\n}); //задиспачив экшен поменяем флаг на true\r\n\r\n//TC\r\nexport const initializeApp = () => (dispatch) => {\r\n  let promise = dispatch(getAuthUserData()); //диспачим получение юзерских данных\r\n  //dispatch(somethingelse())//диспачим получение любых других данных\r\n  //и когда промис (в authAPI.me) зарезолвится, мы его здесь получим как результат promise и после этого мы задиспачим AC success\r\n  // promise.then(() => {dispatch(initializedSuccess())})//если промис один\r\n  Promise.all([promise]).then(() => dispatch(initializedSuccess()));\r\n};\r\n\r\nexport default appReducer;\r\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\n// import Header from './components/Header/Header';\r\nimport Navbar from './components/Navbar/Navbar';\r\n// import Profile from './components/Profile/Profile';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setings from './components/Setings/Setings';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\n// import Login from './components/Login/Login';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\n// import { compose } from 'redux';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/preloader/Preloader';\r\n// import { withSuspense } from './hoc/withSuspense';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Ленивая загрузка\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer')); // Ленивая загрузка\r\nconst Login = React.lazy(() => import('./components/Login/Login')); // Ленивая загрузка\r\n\r\nclass App extends React.Component {\r\n  // debugger;\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  } //переносим запрос из HeaderC\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className='app-wrapper-content'>\r\n          <Suspense fallback={<Preloader />}>\r\n            <Route path='/profile/:userId?'>\r\n              <ProfileContainer\r\n              //:userId? опциональный параметр ХОКа withRouter\r\n              />\r\n            </Route>\r\n            <Route path='/dialogs'>\r\n              <DialogsContainer />\r\n            </Route>\r\n            <Route path='/login'>\r\n              <Login />\r\n            </Route>\r\n          </Suspense>\r\n          {/* <Route path='/login' render={withSuspense(Login)} /> //custom HOC */}\r\n          <Route path='/users'>\r\n            <UsersContainer />\r\n          </Route>\r\n          <Route path='/news'>\r\n            <News />\r\n          </Route>\r\n          <Route path='/music'>\r\n            <Music />\r\n          </Route>\r\n          <Route path='/setings'>\r\n            <Setings />\r\n          </Route>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized, //получаем из стейта флаг\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, { initializeApp })(App));\r\n// export default compose(withRouter, connect(mapStateToProps, { initializeApp })(App));//bug with compose\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialog-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\n//ключи из стейта, значения соответствующие редьюсеры(ветки нашего глобального стейта)\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\n//создаем редаксовский стор с помощью функции createStore(cS мы отдаем закомбайненые редьюсеры)\r\n//добавляем промежуточный слой middleware thunk\r\n// let store = createStore(reducers, applyMiddleware(thunk));\r\nlet store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\n// import { BrowserRouter as Router, Route } from 'react-router-dom';//test HashRouter\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Router>\r\n    {/* <Router basename={process.env.PUBLIC_URL}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlockWrapper\":\"Paginator_paginationBlockWrapper__35ZIW\",\"paginationBlock\":\"Paginator_paginationBlock__3Lv8U\",\"pagination\":\"Paginator_pagination__1RdNg\",\"selectedPage\":\"Paginator_selectedPage__2m9br\",\"buttonPrev\":\"Paginator_buttonPrev__1vSfq\",\"buttonNext\":\"Paginator_buttonNext__22tii\"};","import { authAPI } from '../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\nconst SET_USER_DATA = 'WAY-OF-SAMURAI/AUTH/SET_USER_DATA'; //add redux-ducks\r\nconst SET_USER_LOGIN_DATA = 'WAY-OF-SAMURAI/AUTH/SET_USER_LOGIN_DATA'; //add redux-ducks\r\n\r\nlet initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n}; //инициализируем стейт согласно данным из API response, isAuth флаг того, что юзер залогинен\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload, //в экшене будет сидеть объект data,который мы деструктурируем\r\n        // isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    case SET_USER_LOGIN_DATA: {\r\n      return {\r\n        isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { userId, email, login, isAuth },\r\n}); //AC деструктурируем объект data до составляющих userId, email, login\r\n\r\n//TC\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  const data = await authAPI.me();\r\n  if (data.resultCode === 0) {\r\n    let { id, email, login } = data.data;\r\n    dispatch(setAuthUserData(id, email, login, true)); //isAuth true\r\n  }\r\n}; //convert to async/await\r\n\r\n//TC to login and logout\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n  const data = await authAPI.login(email, password, rememberMe);\r\n  if (data.resultCode === 0) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    // let action = stopSubmit('login', { email: 'Email is wrong' }); //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('login', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n  }\r\n}; //convert to async/await\r\n\r\nexport const logout = () => async (dispatch) => {\r\n  const data = await authAPI.logout();\r\n  if (data.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false)); //при логауте зануляем все данные и ставим флаг isAuth false\r\n  }\r\n}; //convert to async/await\r\n\r\n// export const getAuthUserData = () => (dispatch) => {\r\n//   return authAPI.me().then((data) => {\r\n//     if (data.resultCode === 0) {\r\n//       let { id, email, login } = data.data;\r\n//       dispatch(setAuthUserData(id, email, login, true)); //isAuth true\r\n//     }\r\n//   });\r\n// };//with then\r\n\r\nexport default authReducer;\r\n","export default __webpack_public_path__ + \"static/media/preloader.0703713f.svg\";","import React from 'react';\r\nimport styles from '../../Users/Users.module.css';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader = (props) => {\r\n  return (\r\n    <>\r\n      <img className={styles.preloader} src={preloader} alt='is loading...' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"News_wrapper__3YHyz\",\"wrapper__item\":\"News_wrapper__item__1eIyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Music_wrapper___hSbD\",\"wrapper__item\":\"Music_wrapper__item__267UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Setings_wrapper__uTzoH\",\"wrapper__item\":\"Setings_wrapper__item__1F9W6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2IFrk\",\"login\":\"Header_login__6U0if\"};","import { usersAPI, profileAPI } from '../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\nconst ADD_POST = 'WAY-OF-SAMURAI/PROFILE/ADD-POST'; //add redux-ducks\r\nconst SET_USERS_PROFILE = 'WAY-OF-SAMURAI/PROFILE/SET_USERS_PROFILE';\r\nconst SET_STATUS = 'WAY-OF-SAMURAI/PROFILE/SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'WAY-OF-SAMURAI/PROFILE/SAVE_PHOTO_SUCCESS';\r\nconst DELETE_POST = 'WAY-OF-SAMURAI/PROFILE/DELETE_POST';\r\n// const SAVE_PROFILE_SUCCESS = 'WAY-OF-SAMURAI/PROFILE/SAVE_PROFILE_SUCCESS';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likeCounter: 15 },\r\n    { id: 2, message: 'My first react post', likeCounter: 25 },\r\n    { id: 3, message: 'Yo', likeCounter: 5 },\r\n  ],\r\n  newPostText: '',\r\n  profile: null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, { id: 4, message: action.newPostText }], //добавляем новый элемент в массив\r\n      };\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId), //jest test\r\n      };\r\n    case SET_USERS_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos },\r\n      };\r\n    // case SAVE_PROFILE_SUCCESS:\r\n    //   return {\r\n    //     ...state,\r\n    //     profile: { ...state.profile, photos: action.photos },\r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//создаем функции action creator, которая возвращает объект {action}, после чего переносим их в стейт\r\nexport const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText });\r\n\r\nexport const setUserProfile = (profile) => ({ type: SET_USERS_PROFILE, profile });\r\n\r\nexport const setStatus = (status) => ({ type: SET_STATUS, status });\r\n\r\nexport const savePhotoSuccess = (photos) => ({ type: SAVE_PHOTO_SUCCESS, photos });\r\n\r\nexport const deletePost = (postId) => ({ type: DELETE_POST, postId }); //jest test\r\n\r\n// export const saveProfileSuccess = (payload) => ({ type: SAVE_PROFILE_SUCCESS, payload });\r\n//TC\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n  const data = await usersAPI.getProfile(userId);\r\n  dispatch(setUserProfile(data));\r\n}; //convert to async/await\r\n\r\n// export const getUserProfile = (userId) => {\r\n//   return (dispatch) => {\r\n//     usersAPI.getProfile(userId).then((data) => {\r\n//       dispatch(setUserProfile(data));\r\n//     });\r\n//   };\r\n// }; //with then\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(setStatus(data));\r\n}; //convert to async/await\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n  const data = await profileAPI.updateStatus(status);\r\n  if (data.resultCode === 0) {\r\n    dispatch(setStatus(status)); //после подверждения сервера сетаем себе статус\r\n  }\r\n}; //convert to async/await\r\n\r\nexport const savePhoto = (file) => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(file);\r\n  if (data.resultCode === 0) {\r\n    dispatch(savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n  }\r\n};\r\n\r\n//TC отправка и получение данных профиля\r\nexport const saveProfile = (profile) => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId; //в санку помимо диспача приходит стейт целиком, берем getState() и достаем из ветки auth нужный userId\r\n  // console.log(userId);\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(getUserProfile(userId)); //диспачим id для получения новых данных с сервера после редатирования профиля\r\n  } else {\r\n    //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('edit-profile', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n    return Promise.reject(message); //решение с отображением ошибки формы\r\n  }\r\n};\r\n\r\n// export const getUserProfileData = (userId) => async (dispatch) => {\r\n//   const data = await usersAPI.getProfile(userId);\r\n//   dispatch(setUserProfile(data));\r\n// };\r\n\r\nexport default profileReducer;\r\n","export default __webpack_public_path__ + \"static/media/avataaars.68dca8f1.svg\";","const ADD_MESSAGE = 'WAY-OF-SAMURAI/DIALOG/ADD-MESSAGE'; //add redux-ducks\r\n// const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';//add redux-form\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    {\r\n      id: 1,\r\n      name: 'Andrew',\r\n      // avatar: 'https://author.today/content/2020/02/29/5f7d802fc35d4cbdacea7161f5f45212.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Dmitry',\r\n      // avatar: 'https://i.pinimg.com/originals/9c/77/46/9c7746225873e02d83b9315501b8dd2f.jpg',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Petya',\r\n      // avatar: 'https://i.pinimg.com/originals/5a/f1/dd/5af1ddcde07255e8a999abcc061dd201.png',\r\n    },\r\n    { id: 4, name: 'Sasha' },\r\n    { id: 5, name: 'Valera' },\r\n    { id: 6, name: 'Viktor' },\r\n  ],\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it?' },\r\n    { id: 3, message: 'I am fine' },\r\n  ],\r\n  // newMessageText: '',//add redux-form\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n  // let stateCopy; //объявляем переменную копиистейта\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      // let newMessage = state.newMessageText;//add redux-form\r\n      // stateCopy = {\r\n      //   ...state,\r\n      //   newMessageText: '', //зануляем поле ввода\r\n      //   messages: [...state.messages, { id: 4, message: newMessage }], //спрэдим стейт на нужную глубину и добавляем в конец(пушим) новый элемент массива\r\n      // };\r\n      return {\r\n        ...state,\r\n        // newMessageText: '', //зануляем поле ввода//add redux-form\r\n        messages: [...state.messages, { id: 4, message: action.message }],\r\n      };\r\n    // case UPDATE_NEW_MESSAGE_TEXT:\r\n    //   // stateCopy = {\r\n    //   //   ...state,\r\n    //   //   newMessageText: action.newText,\r\n    //   // };\r\n    //   return { ...state, newMessageText: action.newText };//add redux-form\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//создаем функции action creator для message, которая возвращает объект {action}\r\nexport const addMessageActionCreator = (message) => ({ type: ADD_MESSAGE, message });\r\n\r\n// export const updateNewMessageTextActionCreator = (text) => ({\r\n//   type: UPDATE_NEW_MESSAGE_TEXT,\r\n//   newText: text,\r\n// });//add redux-form\r\n\r\n// const dialogsReducer = (state, action) => {\r\n//   if (action.type === ADD_MESSAGE) {\r\n//     let newMessage = state.newMessageText; //берем значение из стейта\r\n//     state.messages.push({ id: 4, message: newMessage });\r\n//     state.newMessageText = ''; //переносим логику зануление из тупого компонента в функцию стейта\r\n//   } else if (action.type === UPDATE_NEW_MESSAGE_TEXT) {\r\n//     state.newMessageText = action.newText;\r\n//   }\r\n//   return state;\r\n// };\r\n\r\nexport default dialogsReducer;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  headers: { 'API-KEY': '6e65516f-e614-437d-93bf-9e85e40713b5' },\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n}); //создаем инстанс запроса(с параметрами запроса)\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage, pageSize) {\r\n    return instance //обращаемся уже к инстансу запроса\r\n      .get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then((response) => response.data); //промисом вернем не весь ответ а нужную часть data\r\n  },\r\n  async unfollow(userId) {\r\n    const response = await instance.delete(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  async follow(userId) {\r\n    const response = await instance.post(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  async getProfile(userId) {\r\n    console.warn('Obsolete method. Please use profileAPI object');\r\n    return profileAPI.getProfile(userId); //перенаправялем на новый метод с предупреждением\r\n  },\r\n};\r\n\r\nexport const profileAPI = {\r\n  async getProfile(userId) {\r\n    const response = await instance.get(`profile/${userId}`);\r\n    return response.data;\r\n  },\r\n  async getStatus(userId) {\r\n    const response = await instance.get(`profile/status/${userId}`);\r\n    return response.data;\r\n  },\r\n  async updateStatus(status) {\r\n    const response = await instance.put(`profile/status`, { status: status }); //вторым параметром передаем объект json\r\n    return response.data;\r\n  },\r\n  async savePhoto(photoFile) {\r\n    const formData = new FormData(); //Конструктор FormData() создаёт новые объект FormData, если проще - HTML-форму//https://developer.mozilla.org/ru/docs/Web/API/FormData/FormData\r\n    formData.append('image', photoFile); //формируем formData по spec API\r\n    const response = await instance.put(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    }); //вторым параметром передаем formData, а третьим объект со спец заголовками(необязательно, его формирует форма)\r\n    return response.data;\r\n  },\r\n  async saveProfile(profile) {\r\n    const response = await instance.put(`profile`, profile); //вторым параметром передаем объект json из redux-form\r\n    return response.data;\r\n  },\r\n  // async saveProfile(\r\n  //   aboutMe,\r\n  //   contacts = {},\r\n  //   lookingForAJob = false,\r\n  //   lookingForAJobDescription,\r\n  //   fullName,\r\n  //   userId = 20627,\r\n  // ) {\r\n  //   const response = await instance.put(`profile/`, {\r\n  //     aboutMe: aboutMe,\r\n  //     contacts: contacts,\r\n  //     lookingForAJob: lookingForAJob,\r\n  //     lookingForAJobDescription: lookingForAJobDescription,\r\n  //     fullName: fullName,\r\n  //     userId: userId,\r\n  //   });\r\n  //   return response.data;\r\n  // },\r\n};\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    const response = await instance.get(`auth/me`);\r\n    return response.data;\r\n  },\r\n  async login(email, password, rememberMe = false) {\r\n    const response = await instance.post(`auth/login`, {\r\n      email: email,\r\n      password: password,\r\n      rememberMe: rememberMe,\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete(`auth/login`);\r\n    return response.data;\r\n  },\r\n  // login(email, password, rememberMe = false) {\r\n  //   return instance.post(`auth/login`, {\r\n  //     email: email,\r\n  //     password: password,\r\n  //     rememberMe: rememberMe,\r\n  //   });\r\n  // },\r\n  // logout() {\r\n  //   return instance.delete(`auth/login`);\r\n  // },\r\n};\r\n"],"sourceRoot":""}