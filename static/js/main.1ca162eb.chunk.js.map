{"version":3,"sources":["assets/images/avataaars.svg","api/api.js","redux/dialog-reducer.js","components/Navbar/Navbar.module.css","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Setings/Setings.jsx","utils/object-helpers.js","redux/users-reducer.js","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","redux/auth-reducer.js","components/Login/Login.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","redux/app-reducer.js","App.js","reportWebVitals.js","redux/sidebar-reducer.js","redux/redux-store.js","index.js","components/Users/Users.module.css","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","assets/images/preloader.svg","components/common/preloader/Preloader.jsx","utils/validators/validators.js","components/News/News.module.css","components/Music/Music.module.css","components/Setings/Setings.module.css","components/Login/Login.module.css","components/Header/Header.module.css","redux/profile-reducer.js"],"names":["instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollow","userId","delete","follow","post","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","ADD_MESSAGE","initialState","dialogs","id","name","messages","message","addMessageActionCreator","type","dialogsReducer","state","action","module","exports","Navbar","className","styles","nav","item","to","activeClassName","activeLink","News","wrapper","wrapper__item","Music","Setings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","user","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","paginationBlockWrapper","paginationBlock","buttonPrev","onClick","disabled","page","event","pagination","selectedPage","buttonNext","User","userPhoto","src","photos","small","avataaars","alt","userButton","some","Users","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","requestUsers","this","Preloader","React","Component","compose","connect","bind","totalCount","SET_USER_DATA","SET_USER_LOGIN_DATA","SET_CAPTCHA_URL_SUCCESS","isAuth","captchaUrl","setAuthUserData","payload","getAuthUserData","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","loginFormWrapper","Field","placeholder","component","Input","validate","required","formSummaryError","auth","length","stopSubmit","_error","stylesLogin","loginH1","loginblock","Header","header","HeaderContainer","INITIALIZED_SUCCESS","initialized","appReducer","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","promise","console","log","initializeApp","window","addEventListener","removeEventListener","fallback","path","exact","withRouter","app","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","FormControl","input","meta","child","hasError","touched","formControl","children","Textarea","restProps","preloader","value","maxLengthCreator","maxLength","ADD_POST","SET_USERS_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","DELETE_POST","posts","likeCounter","newPostText","addPostActionCreator","setStatus","getUserProfile","file","getState","reject","p","postId"],"mappings":"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","file":"static/js/main.1ca162eb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avataaars.68dca8f1.svg\";","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  headers: { 'API-KEY': '6e65516f-e614-437d-93bf-9e85e40713b5' },\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n}); //создаем инстанс запроса(с параметрами запроса)\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage, pageSize) {\r\n    return instance //обращаемся уже к инстансу запроса\r\n      .get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then((response) => response.data); //промисом вернем не весь ответ а нужную часть data\r\n  },\r\n  async unfollow(userId) {\r\n    const response = await instance.delete(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  async follow(userId) {\r\n    const response = await instance.post(`follow/${userId}`);\r\n    return response.data;\r\n  },\r\n  // async getProfile(userId) {\r\n  //   console.warn('Obsolete method. Please use profileAPI object');\r\n  //   return profileAPI.getProfile(userId); //перенаправялем на новый метод с предупреждением\r\n  // },\r\n};\r\n\r\nexport const profileAPI = {\r\n  async getProfile(userId) {\r\n    const response = await instance.get(`profile/${userId}`);\r\n    return response.data;\r\n  },\r\n  async getStatus(userId) {\r\n    const response = await instance.get(`profile/status/${userId}`);\r\n    return response.data;\r\n  },\r\n  async updateStatus(status) {\r\n    const response = await instance.put(`profile/status`, { status: status }); //вторым параметром передаем объект json\r\n    return response.data;\r\n  },\r\n  async savePhoto(photoFile) {\r\n    const formData = new FormData(); //Конструктор FormData() создаёт новые объект FormData, если проще - HTML-форму//https://developer.mozilla.org/ru/docs/Web/API/FormData/FormData\r\n    formData.append('image', photoFile); //формируем formData по spec API\r\n    const response = await instance.put(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    }); //вторым параметром передаем formData, а третьим объект со спец заголовками(необязательно, его формирует форма)\r\n    return response.data;\r\n  },\r\n  async saveProfile(profile) {\r\n    const response = await instance.put(`profile`, profile); //вторым параметром передаем объект json из redux-form\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    const response = await instance.get(`auth/me`);\r\n    return response.data;\r\n  },\r\n  async login(email, password, rememberMe = false, captcha = null) {\r\n    const response = await instance.post(`auth/login`, {\r\n      email: email,\r\n      password: password,\r\n      rememberMe: rememberMe,\r\n      captcha: captcha,\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete(`auth/login`);\r\n    return response.data;\r\n  },\r\n  // login(email, password, rememberMe = false) {\r\n  //   return instance.post(`auth/login`, {\r\n  //     email: email,\r\n  //     password: password,\r\n  //     rememberMe: rememberMe,\r\n  //   });\r\n  // },\r\n  // logout() {\r\n  //   return instance.delete(`auth/login`);\r\n  // },\r\n};\r\n\r\nexport const securityAPI = {\r\n  async getCaptchaUrl() {\r\n    const response = await instance.get(`security/get-captcha-url`);\r\n    return response.data;\r\n  },\r\n};\r\n","const ADD_MESSAGE = 'WAY-OF-SAMURAI/DIALOG/ADD-MESSAGE'; //add redux-ducks\r\n// const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';//add redux-form\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    {\r\n      id: 1,\r\n      name: 'Andrew',\r\n      // avatar: 'https://author.today/content/2020/02/29/5f7d802fc35d4cbdacea7161f5f45212.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Dmitry',\r\n      // avatar: 'https://i.pinimg.com/originals/9c/77/46/9c7746225873e02d83b9315501b8dd2f.jpg',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Petya',\r\n      // avatar: 'https://i.pinimg.com/originals/5a/f1/dd/5af1ddcde07255e8a999abcc061dd201.png',\r\n    },\r\n    { id: 4, name: 'Sasha' },\r\n    { id: 5, name: 'Valera' },\r\n    { id: 6, name: 'Viktor' },\r\n  ],\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it?' },\r\n    { id: 3, message: 'I am fine' },\r\n  ],\r\n  // newMessageText: '',//add redux-form\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n  // let stateCopy; //объявляем переменную копиистейта\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      // let newMessage = state.newMessageText;//add redux-form\r\n      // stateCopy = {\r\n      //   ...state,\r\n      //   newMessageText: '', //зануляем поле ввода\r\n      //   messages: [...state.messages, { id: 4, message: newMessage }], //спрэдим стейт на нужную глубину и добавляем в конец(пушим) новый элемент массива\r\n      // };\r\n      return {\r\n        ...state,\r\n        // newMessageText: '', //зануляем поле ввода//add redux-form\r\n        messages: [...state.messages, { id: 4, message: action.message }],\r\n      };\r\n    // case UPDATE_NEW_MESSAGE_TEXT:\r\n    //   // stateCopy = {\r\n    //   //   ...state,\r\n    //   //   newMessageText: action.newText,\r\n    //   // };\r\n    //   return { ...state, newMessageText: action.newText };//add redux-form\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//создаем функции action creator для message, которая возвращает объект {action}\r\nexport const addMessageActionCreator = (message) => ({ type: ADD_MESSAGE, message });\r\n\r\n// export const updateNewMessageTextActionCreator = (text) => ({\r\n//   type: UPDATE_NEW_MESSAGE_TEXT,\r\n//   newText: text,\r\n// });//add redux-form\r\n\r\n// const dialogsReducer = (state, action) => {\r\n//   if (action.type === ADD_MESSAGE) {\r\n//     let newMessage = state.newMessageText; //берем значение из стейта\r\n//     state.messages.push({ id: 4, message: newMessage });\r\n//     state.newMessageText = ''; //переносим логику зануление из тупого компонента в функцию стейта\r\n//   } else if (action.type === UPDATE_NEW_MESSAGE_TEXT) {\r\n//     state.newMessageText = action.newText;\r\n//   }\r\n//   return state;\r\n// };\r\n\r\nexport default dialogsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1sCY-\",\"item\":\"Navbar_item__1MKSx\",\"activeLink\":\"Navbar_activeLink__3vO2y\"};","import { NavLink } from 'react-router-dom';\r\nimport styles from './Navbar.module.css';\r\n// import DialogItem from './../Dialogs/DialogItem/DialogItem';\r\n\r\nconst Navbar = () => {\r\n  // debugger\r\n\r\n  // const dialogsElements = props.state.dialogsData.map((dialog, i) => <DialogItem key={i} name={dialog.name} id={dialog.id} avatar={dialog.avatar}/>)\r\n\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <div className={styles.item}>\r\n        <NavLink to='/profile' activeClassName={styles.activeLink}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/dialogs' activeClassName={styles.activeLink}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/news' activeClassName={styles.activeLink}>\r\n          News\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/music' activeClassName={styles.activeLink}>\r\n          Music\r\n        </NavLink>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/users' activeClassName={styles.activeLink}>\r\n          Users\r\n        </NavLink>\r\n        {/* { dialogsElements } */}\r\n      </div>\r\n      <div className={styles.item}>\r\n        <NavLink to='/setings' activeClassName={styles.activeLink}>\r\n          Settings\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import styles from './News.module.css'\r\n\r\nconst News = () => (\r\n  <div>\r\n    <p>News</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        News #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        News #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default News","import styles from './Music.module.css'\r\n\r\nconst Music = () => (\r\n  <div>\r\n    <p>Music</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        Albums #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n      Albums #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Music","import styles from './Setings.module.css'\r\n\r\nconst Setings = () => (\r\n  <div>\r\n    <p>Setings</p>\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #1\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        User setings block #2\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Setings","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n  return items.map((user) => {\r\n    if (user[objPropName] === itemId) {\r\n      return { ...user, ...newObjProps };\r\n    }\r\n    return user;\r\n  });\r\n};\r\n//в итоге вернет нам новый массив, в котором заменит, если найдет совпадение по objPropName из объекта с таким itemId, создаст копию объекта и заменит старые свойства деструктуризацией из новых свойств newObjProps\r\n","import { usersAPI } from '../api/api';\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nconst FOLLOW = 'WAY-OF-SAMURAI/USERS/FOLLOW'; //add redux-ducks\r\nconst UNFOLLOW = 'WAY-OF-SAMURAI/USERS/UNFOLLOW';\r\nconst SET_USERS = 'WAY-OF-SAMURAI/USERS/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'WAY-OF-SAMURAI/USERS/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'WAY-OF-SAMURAI/USERS/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'WAY-OF-SAMURAI/USERS/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'WAY-OF-SAMURAI/USERS/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    //======\r\n    //рефакторинг, вынесение дублирующей логики из follow и unfollow во вспомогутальную функцию updateObjectInArray из утилит\r\n    case FOLLOW:\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }),\r\n      };\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state, //создаем копию стейта(работать можем только с копией)\r\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }),\r\n      };\r\n    //рефакторинг, вынесение дублирующей логики из follow и unfollow во вспомогутальную функцию updateObjectInArray из утилит\r\n    //=====\r\n\r\n    // case FOLLOW:\r\n    //   return {\r\n    //     ...state, //создаем копию стейта(работать можем только с копией)\r\n    //     users: state.users.map((user) => {\r\n    //       if (user.id === action.userId) {\r\n    //         return { ...user, followed: true };\r\n    //       } //мапим массив юзеров(если id юзера совпадает с id пришедшим из AC) то возвращаем в глубокую копию новый объект с добавленным статусом followed true у юзера\r\n    //       return user; //если id не совпадает, возвращаем тот же самый объект юзер\r\n    //     }),\r\n    //   };\r\n    // case UNFOLLOW:\r\n    //   return {\r\n    //     ...state, //создаем копию стейта(работать можем только с копией)\r\n    //     users: state.users.map((user) => {\r\n    //       if (user.id === action.userId) {\r\n    //         return { ...user, followed: false };\r\n    //       } //мапим массив юзеров(если id юзера совпадает с id пришедшим из AC) то возвращаем в глубокую копию новый объект с измененным статусом followed false у юзера\r\n    //       return user; //если id не совпадает, возвращаем тот же самый объект юзер\r\n    //     }),\r\n    //   };\r\n    case SET_USERS: {\r\n      return {\r\n        ...state,\r\n        users: action.users, //перезатираем массив юзеров\r\n        // users: [...state.users, ...action.users],\r\n      }; //с сервера придут пользователи, мы должны взять старый стейт(сделать копию) и дополнить его новыми пользователями пришедшими из экшна (склеить два массива спред оператором)\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      };\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId] //если isF true добавляем в массив id из экшена\r\n          : state.followingInProgress.filter((id) => id !== action.userId), //если isF false фильтрация вернут новый массив\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//создаем функции action creator, которая создает(возвращает) объект действие {action}\r\n//переименовываем AC без окончания AC(хак с mdtp )\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId }); //переименуем из-за thunkCreate\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId }); //переименуем из-за thunkCreate\r\nexport const setUsers = (users) => ({ type: SET_USERS, users }); //возьмем данные о юзерах с сервера и поместим их потом в стейт\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\r\nexport const setTotalUsersCount = (totalUsersCount) => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  count: totalUsersCount, //когда ключ и значение не одинаковы(специально)\r\n});\r\nexport const toggleIsFetching = (isFetching) => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n});\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n});\r\n\r\n//создаем функции thunk creator, которая создает(возвращает) thunk(dispatch action)\r\n//переименовываем AC без окончания AC\r\nexport const requestUsers = (page, pageSize) => async (dispatch) => {\r\n  dispatch(setCurrentPage(page)); //from onPageChanged(активная страница)\r\n  dispatch(toggleIsFetching(true)); //запрос ушел preloader виден\r\n  const data = await usersAPI.getUsers(page, pageSize);\r\n  dispatch(toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n  dispatch(setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n  dispatch(setTotalUsersCount(data.totalCount));\r\n}; //convert to async/await\r\n\r\n// export const requestUsers = (page, pageSize) => {\r\n//   // debugger;\r\n//   return (dispatch) => {\r\n//     dispatch(setCurrentPage(page)); //from onPageChanged(активная страница)\r\n//     dispatch(toggleIsFetching(true)); //запрос ушел preloader виден\r\n//     usersAPI.getUsers(page, pageSize).then((data) => {\r\n//       dispatch(toggleIsFetching(false)); //запрос пришел preloader скрывается\r\n//       dispatch(setUsers(data.items)); // у usersAPI дергаем метод getUsers//получаем user из data(данные) items(объект с юзерами) и диспачим setUsers\r\n//       dispatch(setTotalUsersCount(data.totalCount));\r\n//     });\r\n//   };\r\n// };//with then\r\n\r\n//рефакторинг, вынесение дублирующей логики из follow и unfollow в функцию followUnfollowFlow\r\nexport const followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n  dispatch(toggleFollowingProgress(true, userId));\r\n  const data = await apiMethod(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actionCreator(userId));\r\n  } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  dispatch(toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId) => async (dispatch) => {\r\n  // const apiMethod = usersAPI.follow.bind(usersAPI);\r\n  // const actionCreator = followSuccess;\r\n  followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n\r\n  // dispatch(toggleFollowingProgress(true, userId));\r\n  // const data = await apiMethod(userId);\r\n  // if (data.resultCode === 0) {\r\n  //   dispatch(actionCreator(userId));\r\n  // } //если подписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  // dispatch(toggleFollowingProgress(false, userId));\r\n}; //convert to async/await\r\n\r\nexport const unfollow = (userId) => async (dispatch) => {\r\n  // const apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n  // const actionCreator = unfollowSuccess;\r\n  followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n\r\n  // dispatch(toggleFollowingProgress(true, userId));\r\n  // const data = await apiMethod(userId);\r\n  // if (data.resultCode === 0) {\r\n  //   dispatch(actionCreator(userId));\r\n  // } //если отписка произошла и сервер подтвердил(resultCode === 0) диспачим в редьюсер\r\n  // dispatch(toggleFollowingProgress(false, userId));\r\n}; //convert to async/await\r\n\r\nexport default usersReducer;\r\n","import styles from './Paginator.module.css';\r\nimport React, { useState } from 'react';\r\n\r\nconst Paginator = ({ totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 10 }) => {\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize); //кол-во странииц\r\n  const portionCount = Math.ceil(pagesCount / portionSize); //кол-во порций\r\n  const [portionNumber, setPortionNumber] = useState(Math.ceil(currentPage / portionSize)); //отслеживаем номер порции и его изменение//решение со сбросом порции при смене страницы\r\n  // const [portionNumber, setPortionNumber] = useState(1); //отслеживаем номер порции и его изменение\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //номер левого элемента порции\r\n  const rightPortionPageNumber = portionNumber * portionSize; //номер правого элемента порции\r\n  const pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) pages.push(i);\r\n  // for (let i = 1; i <= pagesCount; i++)\r\n  //   if (pages.length < 20) {\r\n  //     pages.push(i); //хардкодно ограничили длину пагинации <20 чтобы не рвало экран\r\n  //   }\r\n  // console.log(portionNumber);\r\n  return (\r\n    <div className={styles.paginationBlockWrapper}>\r\n      <div className={styles.paginationBlock}>\r\n        {portionNumber > 1 ? (\r\n          <button\r\n            className={styles.buttonPrev}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber - 1);\r\n            }}>\r\n            PREV\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>PREV</button>\r\n        )}\r\n        {pages\r\n          .filter((page) => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n          .map((page, id) => {\r\n            return (\r\n              <span\r\n                key={id}\r\n                onClick={(event) => {\r\n                  onPageChanged(page);\r\n                }}\r\n                className={`${styles.pagination} ${\r\n                  currentPage === page ? styles.selectedPage : ''\r\n                }`}>\r\n                {page}\r\n              </span>\r\n            );\r\n          })}\r\n        {/* {pages.map((page, id) => {\r\n          return (\r\n            <span\r\n              key={id}\r\n              onClick={(event) => {\r\n                onPageChanged(page);\r\n              }}\r\n              className={`${styles.pagination} ${currentPage === page ? styles.selectedPage : ''}`}>\r\n              {page}\r\n            </span>\r\n          );\r\n        })} */}\r\n        {portionNumber < portionCount ? (\r\n          <button\r\n            className={styles.buttonNext}\r\n            onClick={() => {\r\n              setPortionNumber(portionNumber + 1);\r\n            }}>\r\n            NEXT\r\n          </button>\r\n        ) : (\r\n          <button disabled={true}>NEXT</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import styles from './Users.module.css';\r\nimport avataaars from './../../../src/assets/images/avataaars.svg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst User = ({ followingInProgress, follow, unfollow, user }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              className={styles.userPhoto}\r\n              src={user.photos.small != null ? user.photos.small : avataaars} //добавляем проверку, если с сервера не пришла аватарка, поставить заглушку\r\n              alt='avatar'\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div className={styles.userButton}>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={styles.wrapper__item}>\r\n        <div>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </div>\r\n        <div>\r\n          {/* <div>{user.location.country}</div>\r\n                <div>{user.location.city}</div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import styles from './Users.module.css';\r\nimport React from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\n\r\nconst Users = ({\r\n  totalUsersCount,\r\n  pageSize,\r\n  onPageChanged,\r\n  currentPage,\r\n  users,\r\n  followingInProgress,\r\n  follow,\r\n  unfollow,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Paginator //выносим логику пагинации в отдельный компонент, прокидываем пропсы\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        onPageChanged={onPageChanged}\r\n        currentPage={currentPage}\r\n      />\r\n      {users.map((user) => (\r\n        <div className={styles.wrapper} key={user.id}>\r\n          <User //выносим логику в компонент, прокидываем пропсы\r\n            followingInProgress={followingInProgress}\r\n            follow={follow}\r\n            unfollow={unfollow}\r\n            user={user}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getUsersSelector = (state) => {\r\n  return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n}); //test reselec\r\n\r\nexport const getPageSize = (state) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state) => {\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  follow,\r\n  unfollow,\r\n  setCurrentPage,\r\n  toggleFollowingProgress,\r\n  requestUsers,\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\n// import { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport {\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getCurrentPage,\r\n  getTotalUsersCount,\r\n  getPageSize,\r\n  getUsers,\r\n} from '../../redux/users-selectors';\r\n\r\n// import UsersAPIComponent from './UsersAPIComponent';\r\n\r\nclass UsersContainer extends React.Component {\r\n  // debugger;\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // } //если кроме конструктора(супер) ничего нет, можно не писать\r\n\r\n  componentDidMount() {\r\n    this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n  }\r\n\r\n  onPageChanged = (currentPage) => {\r\n    this.props.requestUsers(currentPage, this.props.pageSize);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.isFetching ? (\r\n          <Preloader /> //вынесли компоненту в common/preloader\r\n        ) : null}\r\n        <Users\r\n          totalUsersCount={this.props.totalUsersCount}\r\n          pageSize={this.props.pageSize}\r\n          currentPage={this.props.currentPage}\r\n          users={this.props.users}\r\n          onPageChanged={this.onPageChanged}\r\n          follow={this.props.follow}\r\n          unfollow={this.props.unfollow}\r\n          followingInProgress={this.props.followingInProgress}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n//mstp принимает от connect весь глобальный стейт, и возвращает объект с теми данными которые нам здесь нужны\r\n// let mapStateToProps = (state) => {\r\n//   // debugger;\r\n//   return {\r\n//     users: state.usersPage.users,\r\n//     pageSize: state.usersPage.pageSize,\r\n//     totalUsersCount: state.usersPage.totalUsersCount,\r\n//     currentPage: state.usersPage.currentPage,\r\n//     isFetching: state.usersPage.isFetching,\r\n//     followingInProgress: state.usersPage.followingInProgress,\r\n//   };\r\n// };//add selectors\r\n\r\nlet mapStateToProps = (state) => {\r\n  // debugger;\r\n  return {\r\n    users: getUsers(state), //test reselect\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n  };\r\n};\r\n\r\n//mdtp служит для того, чтобы передавать дочерней компоненте через пропсы колбэки(функции, которые может вызывать презентационная компонента)(назначение колбэков общаться со стором-стейтом)\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     follow: (userId) => {\r\n//       dispatch(followAC(userId));\r\n//     },\r\n//     unfollow: (userId) => {\r\n//       dispatch(unfollowAC(userId));\r\n//     },\r\n//     setUsers: (users) => {\r\n//       dispatch(setUsersAC(users));\r\n//     },\r\n//     setCurrentPage: (currentPage) => {\r\n//       dispatch(setCurrentPageAC(currentPage));\r\n//     },\r\n//     setTotalUsersCount: (totalCount) => {\r\n//       dispatch(setTotalUsersCountAC(totalCount));\r\n//     },\r\n//     toggleIsFetching: (isFetching) => {\r\n//       dispatch(toggleIsFetchingAC(isFetching));\r\n//     },\r\n//   };\r\n// };\r\n\r\n//передаем напряую в mdtp объект с AC (connect подставляет нужные параметры в колбэки которые сам и создает за кадром, после происходит диспатч экшена)\r\n//переименовываем AC без окончания AC, правим импорты, и при совпадении имен ключ: значение, оставляем одно имя в объекте\r\n//mdtp больше не используем, а передаем {объект} вторым параметром в connect\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPage,\r\n    toggleFollowingProgress,\r\n    requestUsers,\r\n  }),\r\n)(UsersContainer);\r\n","import { authAPI, securityAPI } from '../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\nconst SET_USER_DATA = 'WAY-OF-SAMURAI/AUTH/SET_USER_DATA'; //add redux-ducks\r\nconst SET_USER_LOGIN_DATA = 'WAY-OF-SAMURAI/AUTH/SET_USER_LOGIN_DATA';\r\nconst SET_CAPTCHA_URL_SUCCESS = 'WAY-OF-SAMURAI/AUTH/SET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false, //isAuth флаг того, что юзер залогинен\r\n  captchaUrl: null, //по наличию капчи в стейте отображаем капчу и поле ввода в форме на странице логина\r\n}; //инициализируем стейт согласно данным из API response\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload, //в экшене будет сидеть объект data,который мы деструктурируем\r\n      };\r\n    }\r\n    case SET_USER_LOGIN_DATA: {\r\n      return {\r\n        isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    case SET_CAPTCHA_URL_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport const setAuthUserData = (userId, email, login, isAuth, captchaUrl = null) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { userId, email, login, isAuth, captchaUrl },\r\n}); //AC деструктурируем объект data до составляющих userId, email, login, isAuth true, зануляем капчу\r\n\r\nexport const setCaptchaUrlSuccess = (captchaUrl) => ({\r\n  type: SET_CAPTCHA_URL_SUCCESS, //\r\n  captchaUrl,\r\n});\r\n\r\n//TC\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  const data = await authAPI.me();\r\n  if (data.resultCode === 0) {\r\n    let { id, email, login } = data.data;\r\n    dispatch(setAuthUserData(id, email, login, true)); //isAuth true\r\n  }\r\n};\r\n\r\n//TC to login and logout\r\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha);\r\n  if (data.resultCode === 0) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (data.resultCode === 10) {\r\n      dispatch(getCaptchaUrl());\r\n    } //при ответе сервера 10 диспачим санку на получение капчи\r\n    // let action = stopSubmit('login', { email: 'Email is wrong' }); //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('login', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n  }\r\n};\r\n\r\nexport const logout = () => async (dispatch) => {\r\n  const data = await authAPI.logout();\r\n  if (data.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false)); //при логауте зануляем все данные и ставим флаг isAuth false\r\n  }\r\n};\r\n\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  dispatch(setCaptchaUrlSuccess(data.url));\r\n}; //получаем капчу с сервера\r\n\r\n// export const getAuthUserData = () => (dispatch) => {\r\n//   return authAPI.me().then((data) => {\r\n//     if (data.resultCode === 0) {\r\n//       let { id, email, login } = data.data;\r\n//       dispatch(setAuthUserData(id, email, login, true)); //isAuth true\r\n//     }\r\n//   });\r\n// };//with then\r\n\r\nexport default authReducer;\r\n","import { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router';\r\nimport styles from '../common/FormsControls/FormsControls.module.css';\r\nimport stylesLogin from './Login.module.css';\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.loginFormWrapper}>\r\n      <div>\r\n        <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          placeholder={'Password'}\r\n          name={'password'}\r\n          type={'password'}\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field component={Input} name={'rememberMe'} type={'checkbox'} />\r\n      </div>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      {captchaUrl && ( //по условию наличия в стейте капчи покажем ее на странице формы\r\n        <div>\r\n          <img src={captchaUrl} alt='captcha' />\r\n          <Field placeholder={'captcha'} name={'captcha'} component={Input} validate={[required]} />\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n//handleSubmit выполнит следующие действия\r\n//e.preventDefault\r\n//get all form data and put them to object\r\n//props.onSubmit(formData)\r\n\r\n//unique name for the form\r\n//оборачиваем нашу форму HOCом reduxForm\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm);\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={stylesLogin.loginH1}>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n      <div className={stylesLogin.loginblock}>\r\n        <h2>Данные тестового аккаунта:</h2>\r\n        <p>Email: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import styles from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <div>\r\n        {/* <img\r\n          src='https://freepngimg.com/thumb/logo/69613-litecoin-bitcoin-cryptocurrency-london-bull-logo.png'\r\n          width='40'\r\n          height='40'\r\n          alt='logo'\r\n        /> */}\r\n      </div>\r\n      <div className={styles.login}>\r\n        {props.isAuth ? (\r\n          <div>\r\n            {props.login} <button onClick={props.logout}>Log out</button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to={'/Login/'}>Login</NavLink>\r\n        )}\r\n      </div>\r\n    </header> //isAuth true - покажем логин, иначе ссылку на залогинивание\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n  // componentDidMount() {\r\n  //   this.props.getAuthUserData();\r\n  // }//переносим запрос в App\r\n  render() {\r\n    return <Header {...this.props} />; //пробрасываем все пропсы ниже в целевую компоненту\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  login: state.auth.login, //логин покажем после авторизации\r\n  isAuth: state.auth.isAuth, //флаг авторизации\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer);\r\n","import { getAuthUserData } from './auth-reducer';\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n}; //инициализируем стейт, initialized флаг того, что юзер залогинен(нет)\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        initialized: true, // isAuth: true, //меняем флаг на true если пришли пользовательские данные\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//AC\r\nexport const initializedSuccess = () => ({\r\n  type: INITIALIZED_SUCCESS,\r\n}); //задиспачив экшен поменяем флаг на true\r\n\r\n//TC\r\nexport const initializeApp = () => (dispatch) => {\r\n  let promise = dispatch(getAuthUserData()); //диспачим получение юзерских данных\r\n  //dispatch(somethingelse())//диспачим получение любых других данных\r\n  //и когда промис (в authAPI.me) зарезолвится, мы его здесь получим как результат promise и после этого мы задиспачим AC success\r\n  // promise.then(() => {dispatch(initializedSuccess())})//если промис один\r\n  Promise.all([promise]).then(() => dispatch(initializedSuccess()));\r\n};\r\n\r\nexport default appReducer;\r\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setings from './components/Setings/Setings';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\nimport Login from './components/Login/Login';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router';\r\n// import { compose } from 'redux';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/preloader/Preloader';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // Ленивая загрузка\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n// const Login = React.lazy(() => import('./components/Login/Login'));\r\n\r\nclass App extends React.Component {\r\n  catchAllUnhandledErrors = (reason, promise) => {\r\n    console.log('Some error occured');\r\n    // console.error(promiseRejectionEvent);\r\n  }; //Событие unhandledrejection происходит, когда Promise завершён с ошибкой, но на данную ошибку не установлен обработчик.\r\n  // debugger;\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  } //переносим запрос из HeaderC\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className='app-wrapper-content'>\r\n          <Suspense fallback={<Preloader />}>\r\n            <Route path='/profile/:userId?'>\r\n              <ProfileContainer\r\n              //:userId? опциональный параметр ХОКа withRouter\r\n              />\r\n            </Route>\r\n            <Route path='/dialogs'>\r\n              <DialogsContainer />\r\n            </Route>\r\n          </Suspense>\r\n          <Route path='/login'>\r\n            <Login />\r\n          </Route>\r\n          <Route path='/users'>\r\n            <UsersContainer />\r\n          </Route>\r\n          <Route path='/news'>\r\n            <News />\r\n          </Route>\r\n          <Route path='/music'>\r\n            <Music />\r\n          </Route>\r\n          <Route path='/setings'>\r\n            <Setings />\r\n          </Route>\r\n          {/* <Route path='/' exact>\r\n            <Redirect to='/profile' />\r\n          </Route> */}\r\n          <Route exact path='/'>\r\n            {this.props.initialized ? <Redirect to='/profile' /> : <Login />}\r\n          </Route>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized, //получаем из стейта флаг\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, { initializeApp })(App));\r\n// export default compose(withRouter, connect(mapStateToProps, { initializeApp })(App));//bug with compose\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialog-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\n//ключи из стейта, значения соответствующие редьюсеры(ветки нашего глобального стейта)\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\n//создаем редаксовский стор с помощью функции createStore(cS мы отдаем закомбайненые редьюсеры)\r\n//добавляем промежуточный слой middleware thunk\r\n// let store = createStore(reducers, applyMiddleware(thunk));\r\nlet store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { HashRouter as Router } from 'react-router-dom'; //HashRouter применен для деплоя на gh-pages\r\n// import { BrowserRouter as Router, Route } from 'react-router-dom';//заменен на HashRouter\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Router>\r\n    {/* <Router basename={process.env.PUBLIC_URL}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3GS1A\",\"wrapper__item\":\"Users_wrapper__item__1cUQX\",\"userPhoto\":\"Users_userPhoto__22rSw\",\"userButton\":\"Users_userButton__1Rd_M\",\"pagination\":\"Users_pagination__9wTpd\",\"selectedPage\":\"Users_selectedPage__rTwP8\",\"preloader\":\"Users_preloader__13i_D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlockWrapper\":\"Paginator_paginationBlockWrapper__35ZIW\",\"paginationBlock\":\"Paginator_paginationBlock__3Lv8U\",\"pagination\":\"Paginator_pagination__1RdNg\",\"selectedPage\":\"Paginator_selectedPage__2m9br\",\"buttonPrev\":\"Paginator_buttonPrev__1vSfq\",\"buttonNext\":\"Paginator_buttonNext__22tii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormWrapper\":\"FormsControls_loginFormWrapper__QJkSz\",\"formControl\":\"FormsControls_formControl__ZczVY\",\"error\":\"FormsControls_error__-uRCD\",\"formSummaryError\":\"FormsControls_formSummaryError__2HC3s\"};","import styles from './FormsControls.module.css';\r\n\r\nexport const FormControl = ({ input, meta, child, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// export const Textarea = ({ input, meta, ...props }) => {\r\n//   const hasError = meta.touched && meta.error;\r\n\r\n//   return (\r\n//     <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n//       <div>\r\n//         <textarea {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export const Input = ({ input, meta, ...props }) => {\r\n//   const hasError = meta.touched && meta.error;\r\n\r\n//   return (\r\n//     <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n//       <div>\r\n//         <input {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   );\r\n// };\r\n","export default __webpack_public_path__ + \"static/media/preloader.0703713f.svg\";","import React from 'react';\r\nimport styles from '../../Users/Users.module.css';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader = (props) => {\r\n  return (\r\n    <>\r\n      <img className={styles.preloader} src={preloader} alt='is loading...' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","export const required = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"News_wrapper__3YHyz\",\"wrapper__item\":\"News_wrapper__item__1eIyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Music_wrapper___hSbD\",\"wrapper__item\":\"Music_wrapper__item__267UF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Setings_wrapper__uTzoH\",\"wrapper__item\":\"Setings_wrapper__item__1F9W6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginH1\":\"Login_loginH1__21Npf\",\"loginblock\":\"Login_loginblock__34CEy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2IFrk\",\"login\":\"Header_login__6U0if\"};","import { profileAPI } from '../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\nconst ADD_POST = 'WAY-OF-SAMURAI/PROFILE/ADD-POST'; //add redux-ducks\r\nconst SET_USERS_PROFILE = 'WAY-OF-SAMURAI/PROFILE/SET_USERS_PROFILE';\r\nconst SET_STATUS = 'WAY-OF-SAMURAI/PROFILE/SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'WAY-OF-SAMURAI/PROFILE/SAVE_PHOTO_SUCCESS';\r\nconst DELETE_POST = 'WAY-OF-SAMURAI/PROFILE/DELETE_POST';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likeCounter: 15 },\r\n    { id: 2, message: 'My first react post', likeCounter: 25 },\r\n    { id: 3, message: 'Yo', likeCounter: 5 },\r\n  ],\r\n  newPostText: '',\r\n  profile: null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, { id: 4, message: action.newPostText }], //добавляем новый элемент в массив\r\n      };\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId), //jest test\r\n      };\r\n    case SET_USERS_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//создаем функции action creator, которая возвращает объект {action}, после чего переносим их в стейт\r\nexport const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText });\r\n\r\nexport const setUserProfile = (profile) => ({ type: SET_USERS_PROFILE, profile });\r\n\r\nexport const setStatus = (status) => ({ type: SET_STATUS, status });\r\n\r\nexport const savePhotoSuccess = (photos) => ({ type: SAVE_PHOTO_SUCCESS, photos });\r\n\r\nexport const deletePost = (postId) => ({ type: DELETE_POST, postId }); //jest test\r\n\r\n// export const saveProfileSuccess = (payload) => ({ type: SAVE_PROFILE_SUCCESS, payload });\r\n//TC\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(setUserProfile(data));\r\n}; //convert to async/await\r\n\r\n// export const getUserProfile = (userId) => {\r\n//   return (dispatch) => {\r\n//     usersAPI.getProfile(userId).then((data) => {\r\n//       dispatch(setUserProfile(data));\r\n//     });\r\n//   };\r\n// }; //with then\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(setStatus(data));\r\n}; //convert to async/await\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n      dispatch(setStatus(status)); //после подверждения сервера сетаем себе статус\r\n    }\r\n  } catch (error) {\r\n    console.log('updateStatus error');\r\n  }\r\n}; //test try catch\r\n\r\nexport const savePhoto = (file) => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(file);\r\n  if (data.resultCode === 0) {\r\n    dispatch(savePhotoSuccess(data.data.photos)); //диспачим полученные фото\r\n  }\r\n};\r\n\r\n//TC отправка и получение данных профиля\r\nexport const saveProfile = (profile) => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId; //в санку помимо диспача приходит стейт целиком, берем getState() и достаем из ветки auth нужный userId\r\n  // console.log(userId);\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(getUserProfile(userId)); //диспачим id для получения новых данных с сервера после редатирования профиля\r\n  } else {\r\n    //встроенный экш редакс-форм, передаем в него имя формы(_error - или общую ошибку формы), вторым параметром передаем объект с проблемными полями, которые вызвали ошибку\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n    dispatch(stopSubmit('edit-profile', { _error: message })); //диспачим экшен с именем формы и объектом с общей ощибкой формы и причиной\r\n    return Promise.reject(message); //решение с отображением ошибки формы\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n"],"sourceRoot":""}